var th=Object.defineProperty;var nh=(i,e,t)=>e in i?th(i,e,{enumerable:true,configurable:true,writable:true,value:t}):i[e]=t;var jr=(i,e,t)=>{nh(i,typeof e!=="symbol"?e+"":e,t);return t};var na=(i,e,t)=>{if(!e.has(i))throw TypeError("Cannot "+t)};var ie=(i,e,t)=>{na(i,e,"read from private field");return t?t.call(i):e.get(i)};var xe=(i,e,t)=>{if(e.has(i))throw TypeError("Cannot add the same private member more than once");e instanceof WeakSet?e.add(i):e.set(i,t)};var Ce=(i,e,t,n)=>{na(i,e,"write to private field");n?n.call(i,t):e.set(i,t);return t};var kn=(i,e,t,n)=>({set _(r){Ce(i,e,r,t)},get _(){return ie(i,e,n)}});var it=(i,e,t)=>{na(i,e,"access private method");return t};(function i(){const e=document.createElement("link").relList;if(e&&e.supports&&e.supports("modulepreload")){return}for(const r of document.querySelectorAll('link[rel="modulepreload"]')){n(r)}new MutationObserver(r=>{for(const s of r){if(s.type!=="childList"){continue}for(const o of s.addedNodes){if(o.tagName==="LINK"&&o.rel==="modulepreload")n(o)}}}).observe(document,{childList:true,subtree:true});function t(r){const s={};if(r.integrity)s.integrity=r.integrity;if(r.referrerPolicy)s.referrerPolicy=r.referrerPolicy;if(r.crossOrigin==="use-credentials")s.credentials="include";else if(r.crossOrigin==="anonymous")s.credentials="omit";else s.credentials="same-origin";return s}function n(r){if(r.ep)return;r.ep=true;const s=t(r);fetch(r.href,s)}})();const we=Object.freeze({fk:{meta:{title:"François Kerforn",description:"François Kerforn's Portfolio - Independant sound and interface designer"},homeDescription:["I create and compose sounds for various purposes : immersive experiences, HCI, artistic works, soundtracks, sound design tools.","Tayloring sounds to their future context is part of my process. I like to study and implement systems that suit specific experiences.","My appetence for programming helps in producing fine-tuned interfaces."],atmos:[],os:[]},footer:{name:"François Kerforn",bio:"independant sound and interface designer-developer with special interest in interactive systems.",clients:["(((Echora))) - Nadine Schütz","Aurasens","GHU Paris psychiatrie & neurosciences","IRCAM","Native Instruments"],contact:{mail:"contact.fk@proton.me",linkedin:"https://www.linkedin.com/in/fkerforn/"},tools:["Ableton Live","Maxmsp/M4L","HTML/CSS","Javascript","WebAudio","JUCE"]},projectsList:{meta:{title:"Projects | François Kerforn",description:"Sound and design projects"}},links:[{name:"rnbo-webaudio",href:"https://ngc6720.github.io/rnbo-webaudio/",content:["rnbo-webaudio","granular player","rnbo javascript"]},{name:"sente-waveterrain",href:"https://ngc6720.github.io/sente/",content:["sente-waveterrain","3d waveform","audio synthesis"]}],projects:[{meta:{description:"A digital musical instrument"},name:"Iris",href:"/iris",url:"https://vimeo.com/778580675",audio:"",idObject:{name:"Iris",date:"2022",type:"Music / Installation",role:"Composer"},p:["<span>Iris</span> is a music composition that offers fragmented soundscapes for the listener to wander in. It is imagined as a sound installation where layers of sounds spread in the space.","The composition is meant to take several forms, adapting to the diffusion context. It was first commissioned by 'A More Beautiful Journey' and the 'MU' collective as two sound installations.","The first is using Soundways – an application for spatialized sound diffusion regarding users geopositioning – and is located in Trinity Bellwoods Park, Toronto. The latter is using Sound Delta – a device for spatialized immersive composition on headphones with radiowave tracking – and was created in La Station Gare des Mines, Paris."]},{meta:{description:"A digital musical instrument"},name:"Psyk",href:"/psyk",url:"https://www.ircam.fr/projects/pages/psy-son",audio:"",idObject:{name:"Psyk",date:"2021",type:"Web Application",role:"Designer / Developer"},p:["<span>Psyk</span> is the prototype of a web application made for music discovery and playlists creation in the context of psychiatric caretaking.","With a minimalistic interface it lets users browse music from different entry points to quickly compose playlists.","The application is part of a research project named Psyson and led by GHU Paris Psychiatrie & Neuroscience. The project includes the context for specific usage of the interface by caretakers and patients, as well as the listening environment.","The prototype offers several ways to find music and nudge the generated playlists using musical or emotional parameters."]},{meta:{description:"A digital musical instrument"},name:"Ksora",href:"/ksora",url:"https://ksora.onrender.com",audio:"/media/extraits/ksora.mp3",idObject:{name:"Ksora",date:"2020",type:"Digital Instrument",role:"Composer / developer"},p:["<span>Ksora</span> is a digital musical instrument. It can welcome multiple users on an interface that let us play and mix several sounds together."]},{meta:{description:"A sound installation by Nadine Schütz"},name:"Boîte à Tubes #2",href:"/boite-a-tubes-2",url:"https://www.echora.ch/boite-a-tubes-2",audio:"/media/extraits/boite-a-tubes.mp3",idObject:{name:"Boîte à Tubes #2",date:"2021",type:"Sound installation",role:"Developer / musical programmer"},p:["<span>Boîte à tubes</span> is a sound installation by artist Nadine Schütz. It allows visitors to perform, record and send a digital musical postcard. Sound material from the past, present and future highlights the story of the place welcoming the installation – an ancient factory."]},{meta:{description:"A sound walk in the old center of Le Mans"},name:"Errance et Rois",href:"/errance-et-rois",url:"https://esad-talm.fr/fr/actualites/errance-et-rois",audio:"/media/extraits/errance-et-rois.mp3",idObject:{name:"Errance et Rois",date:"2019",type:"Sound walk",role:"Sound designer"},p:["<span>Errance et Rois</span> is a sound walk that takes its participants to the old center of Le Mans, a French city that preserves the traces of the Plantagenêt dynasty and of a strong medieval history. The sound walk offers a journey through various scenes inspired by the brothers Richard The Lionhearted and John Lackland."]},{meta:{description:"A sound installation recreating a rainforest soundscape"},name:"Echotopie",href:"/echotopie",audio:"/media/extraits/echotopie.mp3",idObject:{name:"Echotopie",date:"2019",type:"Sound installation",role:"Musical programmer"},p:["<span>Echotopie</span> is a sound installation where attendants are immerged in a rainforest soundscape. The participants gestures can alter the composition and disrupt the soundscape, intentionally or unintentionally."]},{meta:{description:"A bruitist instrument along the canal of Bourgogne"},name:"Éclusophone",href:"/eclusophone",url:"https://www.lyonne.fr/tonnerre-89700/actualites/ce-drole-dinstrument-de-musique-a-douze-faces-est-installe-a-lecluse-darcot-entre-tonnerre-et-commissey_13951221/",audio:"",idObject:{name:"Éclusophone",date:"2021",type:"Mechanical instrument",role:"Designer"},p:["An <span>Éclusophone</span> can be found found during a promenade along the canal of Bourgogne. Rattles and clatters emanating from this metallic instrument thanks to several handles and crank arms will surprise and intringue passerbies."]}],ascii:`-,,-=+++==--.._..,.._____.,,-=+CB;;:=--,.......,,-,                                                            ---==+++==-,.....,,..____.,-=:;C;;;:=-,,,.....,,--.                                                            ,--====---,,....,,,.._...,-+;CC;;;;:=-,,....,,,,,,_                                                            ,-------,,,....,-,,....,-=+:;C;;CCC;:=-,,,,---,,.,_                                                            -----,,,,,._....,,,....,=+;;;;;BAABC;:=-,,,+:+-...                                                             +=,....,,.__....,,..,,,+:;CBBBCBAAB;;+=,.,,:BCC::=_                                                            +=,......_____..,,..,--+;CAABAAABCCC:=-,.,-:CCCCC:_                                                            ==,..,,,._.___...,..,-+;CBAAAABBC;::=,...,-+::::C:_                                                            =-,........_______..,-=:CCBBBBCC;:==,....,-=+++++=_                                                            ,,,....,,,....___....,-+;;;;;;;:+=-,,....,-=++++==_                                                            ,,.....,,,,...__..__..--=+++++=--,,......,=====--,_                                                            ,._....,,-,,..__....._,,----,-,....___.,,-==--,..._                                                            ..__....,,,.._________.......,.___._..,-==+-,..___                                                             ..__...._,,.__________....__...___..,,-=+++-,,..__                                                             _____......._________________._____.____........__                                                             __.__........___.________..____                                                                                _...___..............____..___                                                                                 ..._____.............______              _                                                                     ________............_____             _.-.                                                                     ._______.............____            _,,-.                                                                     ,,._____....____.._.._            ...-==-.                                                                     =-,........___________           .-,-;:--.                                                                     +=-,,,,...._______.__          _,==+:C;=,                                                                      :=----,,,,,_._____..          _.=+:CC;+.                                                                       ;+=+=-,,,,.._______          _.-+:BB;=-_                                                                       :++++=--,.....____           .,=+C!B+-._                                                                    :++:+==,,.....___           ..-:;AB;=,.                                                                     ===++=-,,,..____            _.-;AB;+-._                                                                        ----=-,......_._             .-;CC:-,.                                                                         ,,.,,......_____             ,+BC;:=,.                                                                         .__.._.....____             .:BAB;:=._                                                                         _______......_          _.,-+!?!BC:=._                                                                         .__________.._          .=:B12?ACC+-_                                                                          ._____.._____         _=;;C!53AC;;+,__                                                                         .___........_    _    -CAC!24!;::+-.                                                                           .....,,,,..._   _,__ _C!AB122C:++=,.                                                                           ,,,,,,,==,..   _-+,._=AABA221;+==-..                                                                           ==-,,,,--,..  _.:+,.,;!CC!21A:=--,__                                                                           :++-,,---,..  ,,:=,,,?BCC?32A+=-,.__                                                                           B;:+-----,.. _,,=--,-1BC!?33A+=,,__                                                                            !C:+====-,.. .,,,--,+2C!?2541+-,,__                                                                            CC:+==--,,._ ....,,,:1A?1353?+-,.__                                                                            :+===--,-,._ ____...:1?32342!=,..__                                                                            --,--,,...._ ____...+!14333?A=,._    _                                                                         ,,,,,,....._ ___....+A14333!C=,.._                                                                             .....,....._ ___.,._,;12231A:-,___ __                                                                          .__........_ _....,..=!2???A;=,_ _  _                                                                          .......__.._ _....,,.,C!!!?!B:-._   _                                                                          ,,,...__...__.___.,,.-:CBA!!AC:,._  _                                _                                         ,,,...__.....,___.,,,-:CCCAB!!B-._  __                              ___                                        ,,.__....,,--,___.,,-:;CCCC;A22:,_____                              ___                                        ,,___.,,.,-=-,____.,:B;;CC;+;54C-._____                             ___                                        .._..,,,,-=+=,_ __.,:!;:CBC::67A+,_____                                                                        .._.,-===+:+-.__ _..:?;+:A?C;&8!+,__                                                                           ...,--=++;+,._____..:?C==;!!B371+,_                                __                                          ..,===+::;=.__..__..+1B=-=A1!262:.                                 ,___                                        ,,-:+:;;:+,____.__..-2!=--:?1!21=_                                _-,_                                         ,,-;::;;+=,_______..-??=--=C?!A;.                                 _-,_                                         ,-=;;:;:+=,________.,C?:==-+CC+_                                  _,,_                                         ,-=;:++++-.____   __.=A;:+-,-=-_                  _               _..                                          ,-=;=-===-____        ,+;;=,,-.                                                                                ,,-;-,,,.___ __        _.;C-,..   ..,,.       __                                                               ..,:-,,...__  _  _        ;,._  .;C?:,      ____                                                              _.,+,._____     __        -C+,_ _,:C!;=.___ _..__                                                              _.,-.    _       ___     __C+-.__,:;C;;=,_.__...___                                                            ..--.           ___._     _::=,__=;!C:;:-.,....____                                                            ,,-=,_  __     __..,.     _::;._.-C!!AC;,......____                                                            -=+++,_____    _..,-=-_____CAB-..,:AA?!C-,_....____                                                            CC;:++,.___    __.,-+=,,._.C??:,,,+BA!2?:-...,..._                                                             21?!A;-,.___   __.,-+=,-._,A23C+,,=CB!31;=,,,,._.__                                                            332!B;=,..._   _.,,,=-,,,.,A34!+,,,;C!31;+,,,.____                                                             CC;=-=,._._   __.,-,-==++-,?562:-..+:B21:-,...____                                                             +==-,,._    ____.,,,-==++-=1692:-._=+:A!C+-,...___                                                             +=-,,__      __..,,,-==++=+3782:-.,==-+BC:=....___                                                             ,,___        .,------==+:+:4882+--+++,,B!C+.....__                                                             ._         __,-======+=+::;5$&?+==+==..C4?:-...._                                                              ___        __,++++:::+++++;27&!=,-=,.__B64C+,.._                                                               ______    _.,=;;::;;;:+===:A?4C,_    ,387B+,.__                                                               _  __ .,-=+;CAAAAAABC:+==+:::C=.     :1597!:,.__                                                               .,=+++;B!?22311?!!ABC;====+::BA+   ,+A?276A+,._                                                                ,:B!ABA1112221?!AABC;:=---+;;??1=_,B;;C!55A+-.___                                                              -;;BC;CAAA????!AAB;:+=-,,,-:;1A2!:CBC:C?55A=,.___                                                              =;;;:+;CABBAAAB;;::=--,,,..+:?B43;:;+-+C!B+=-,.__          ___                                                 ;C;;+=+:;::::::===--,,,.___-+;C3?=,.__  ,=CC=-,.__         ___                                                 +;:+---=======--,--,.....__.-+::;:,_  _.=CC:=-,,._          __                                                 +:=-,,,----,,,..___..__.____.--,-?2+..._.+===---,._          _                                                 !!C:==--,,,,,,.._____________,-==A?+._  __.-=:;:=-.     ________                                               54?C:+=---,,,,.._____________,--=;B=.___   =B?1A;=._   _________                                               22?C+-,,,,,,,,..____________.,-,-=;:-,,   _-A32B;=.  ___...____         ___   ___.._   _.                      ?!B:=,,.,,,,..._____________,,-,,,+CA1A....,C51C:,_  _.._..____   _  ___..._  .,-==-._...__                    AB;=,,.,-,.._______  ______.,,-,.,=CA58!,._.:2?;=____..._____________.......__,-+;;+=,,,....__                 ;:=-.......__ _____ _ __..,,--=+---:B28?,__.=AA:,__.......__________,,,,,.....,-:CB;+-,,..,.,,.                ---,..__...__________ __.,----==---=:!5?,___.-:-...........________.,,,--,,..,-+;AAB;=-,.....,.__              ,,...___..._______    _.------------=;23+_  _.-,,,,,,,,,,...._..__.,-----,...,=:CA!AC=-,........__             ..._____......__    ___,,----------=+:;?C-,..,,,,,,,,,,,,....____,-=+===+=,,,-=:C!31B+-...._....___            ........,..______  _.,,,---=-------=:::AA:=-=+++,,,,,,,,........__,::+==+=-,,-+;A661:=,,..._._.__              .,,,,,,,,..____  ___.,..,--======--=:;A66&45A;:::-,,,,,,,.....___.,CC;:+++=--=:A5Ý7!=-,,_________              ,,---,.....__ _____.....,=+======--=:!$&8$5&B;:+CB-,,..,,..,..___.:?!AC;;:+==+A3&Ý4;=-,,....._____..._         --==-,,,..________.,,,.,=++-,,,,=+;B!Ý&9W&88A::+;?!-,..,,..,.___.-?21?!AAC;::C37Ý9!+=-,,,,,....,,-=+=.__       ==--,,,.._________,,----==-,,,-=+!33&$8WÝ8W2?;;++!1B=,.,,...___..=3332221!ABA?4$Å2:+=,,,,,,,,-+:++:+-,,,.____  ----,..._________.,,,-+++=-,,,+?4668W79Å9&9!!B?B=C2?C:-,.....___,?2344576311139W7C=----,,,,,=;ABBB;====--,.,.__---,..___  ______.,,,,--+==+++156$&Å98ÝÝ88?ABC6?=+32!AA+--,..._.-!235679733235&8A+=====-----C32?!:==:+==+:;;:=--,,..____________..,-=-,=+:CC155$WÝ$9ÝÅ971;CC;82,-!3!!AB:!43+,,,-:13479&53323682+==-==+=---+14!:=-----+CA??ABC;,,,,.____________.,.,,-+;;CC?559ÅÅÅ9$&97!;::;;7?=.;5?AB!;B7&A=,..,A15$Ý94344451C==-===:+,-=A41;+----=:C?34432!C,,,,.______   __._..,-;CC;A1239ÅÅÅ&99764+=:+:C6;::C43C;;;:4&3=._.+?60ÇÝ8333321C=-==+++:+--+23!C+---++B?47764!:=,,,,._______  __...-:CBCC?3336Å00W8777?B+=+==C6C:4&1?C;CBB4&4+=+;B1ÅÇÇÝ943221A;=--=+++:+--C34!C:--=+;!36776?;:=,....________ _.,-=;BC;C14546WÇ0Ý76672;=-==--B6C:88BCC!?3Ç01++==:B50Ç0W732211B:=--=:++:+==A54!B;===:B257862C;:=..____________,-==:BBCA134558ÅÇÅ&6594;=-----=!5C;85B;;:C4W8;-,,=+B9ÇÇÅ&62121AC+--==::::+++?66?B:::;C!46773;;;=-...._______..,--=:CCA!245567900$7587A=------+13;!94B;:;B7Ý2=,,-=:AWÇÇÝ95211!C;+====++:+++C2781ABBBCB46663B+++=-,.....____..,,-=+::B?2466777WÇÅ86893+=---,-+C3?;391C;:C!9Å2=-,-=+!ÝÇ0W74211AC:+=====+++=+A478?!12?BA6663C::===-,.____ ___.,-=++:CA1124688690Ç&7996C-=----+;?2CC9&2B;:C!8W2=---=+2ÇÇÝ8632?!C::+----==+==+B464?2661B1875!;++==-,`});const qo=(...i)=>e=>i.reduce((t,n)=>n(t),e);const q=(i,e={},t)=>{const n=document.createElement(i);if(typeof e==="string"){n.textContent=e}else{Object.entries(e).map(([r,s])=>n[r]=s);t&&(n.textContent=t)}return n};const Dc=(i,e,t)=>{const n=document.createElementNS("http://www.w3.org/2000/svg","svg");if(!Array.isArray(e))e=[e];e.forEach(r=>{if(typeof r==="string"){const s=document.createElementNS("http://www.w3.org/2000/svg","path");s.setAttribute("d",r);n.appendChild(s)}});Object.entries(t).forEach(([r,s])=>n.setAttribute(r,s));i.appendChild(n);return i};function ih(){const i=window.innerWidth-document.documentElement.clientWidth;sh("--scrollBarW",i+"px")}function rh(i){const e=Array.isArray(i)?i:[i];e.forEach(t=>t.style.top=t.getBoundingClientRect().top+"px")}function $t(i,e){const t=Array.isArray(i)?i:[i];if(e){t.forEach(n=>n.classList.add("disabled"))}else{t.forEach(n=>n.classList.remove("disabled"))}}function ys(i){return getComputedStyle(document.documentElement).getPropertyValue(i)}function sh(i,e){document.documentElement.style.setProperty(i,e)}async function ah(i){return new Promise((e,t)=>{setTimeout(e,i)})}function jo(i){return i*2-1}function Yo(i){return(i+1)*.5}function wn(i,e,t,n,r){i=(i-e)*(r-n)/(t-e)+n;return i<n?n:i>r?r:i}function Fn(i,e=-1,t=1){return i<e?e:t<i?t:i}function $o(i=-1,e=1){return t=>Fn(t,i,e)}function Uc(i=.5){return Fn(Math.tan(Fn(i,0,1)*Math.PI/2),1e-5,Infinity)}function oh(i,e=0,t=1){return((i-e)%(t-e)+(t-e))%(t-e)+e}function ui(i){return e=>oh(e*i)}function Nc(i,e=.5){return Fn(i<e?i/e:e<i?(1-i)/(1-e):i,0,1)}function Ko(i){return e=>Nc(e,i)}function lh(i){return wn(Math.cos(i*Math.PI),1,-1,0,1)}function ch(i,e=.5){const t=Uc(e);return Math.tanh(Fn(i,-1,1)*t)/Math.tanh(t)}function ia(i=.5){return e=>ch(e,i)}function Mn({phase:i=0,period:e=1}={}){return t=>Math.sin(Math.PI*2*t/e+i)}const Ic=i=>{if(i.animationName.slice(0,6)==="vanish"){i.target.style.visibility="hidden"}};const uh=i=>{if(i.animationName.slice(0,6)==="appear"){i.target.style.visibility="visible"}};document.body.addEventListener("animationstart",uh);document.body.addEventListener("animationend",Ic);document.body.addEventListener("webkitAnimationEnd",Ic);const Fc=(i,{tMin:e=800,tMax:t=2e3,random:n=false}={})=>{const r=[];for(let s=0;s<i;s++){r.push(n?Math.random()*(t-e)+e:s*(t-e)/i+e)}return r};const po=(i,e,t)=>{const n=Array.isArray(i)?i:[i];const r=e;const s=Fc(n.length,t);const o=(t==null?void 0:t.timingFunctioAppear)??"cubic-bezier(0.165, 0.84, 0.44, 1)";const a=(t==null?void 0:t.timingFunctionVanish)??"cubic-bezier(0.4, 0.60, 0.8, 1)";const l=p=>{const m=document.createElement("span");m.classList.add("mask");m.style.display="flex";m.style.overflow="hidden";p.style.visibility="hidden";e.style.pointerEvents="none";m.appendChild(p);r.appendChild(m)};let c;const u=p=>{c&&clearTimeout(c);n.map((m,g)=>m.style.animation=`${p??"appearToTop"} ${s[g]}ms ${o}`);c=setTimeout(()=>r.style.pointerEvents="all",s[s.length-1]*.6)};const h=p=>{clearTimeout(c);n.map((m,g)=>{m.style.animation=`${p??"vanishToTop"} ${s[g]*.5}ms ${a}`;g===n.length-1&&(r.style.pointerEvents="none")})};n.map(p=>l(p));return{el:r,appear:u,vanish:h}};const hh=(i,e,t)=>{const n=i.map(h=>q("span",h));const r=e;const s=()=>Fc(n.length,t);const o="cubic-bezier(0.165, 0.84, 0.44, 1)";const a="cubic-bezier(0.4, 0.08, 0.95, 1)";r.classList.add((Object.entries({3:"shortestLength",5:"shorterLength",6:"shortLength"}).find(([h,p])=>n.length<h)??[0,"normalLength"])[1]);const l=h=>{const p=document.createElement("span");p.classList.add("mask");h.style.visibility="hidden";p.style.display="flex";p.style.overflow="hidden";p.style.justifyContent="center";p.appendChild(h);r.appendChild(p)};const c=h=>n.map((p,m)=>p.style.animation=`${h??"appearToTop"} ${s()[m]}ms ${o}`);const u=h=>n.map((p,m)=>p.style.animation=`${h??"vanishToTop"} ${s()[m]*.5}ms ${a}`);n.map(h=>l(h));return{el:r,appear:c,vanish:u}};const dh=(()=>{const i=[(e,t)=>qo(ui(Math.floor(t.rand1*6)),jo,Ko(),Yo,ui(Mn({phase:0,period:2})(e.phz)),n=>ui(n*(t.rand1+.4))(n),Mn({phase:0,period:wn(t.index,0,t.qt,.2,4)}),Mn({phase:wn(t.index,0,t.qt,0,.5),period:t.rand2*4}),ia(.6),n=>n*1/t.qt*.8,n=>n+wn(t.index,0,t.qt,-.8,.8),n=>n*-1)(e.phz),(e,t)=>qo(ui(Math.floor(t.rand1*6)),jo,Ko(),Yo,ui(Mn({phase:0,period:2})(e.phz)),n=>ui(n*(t.rand1+.4))(n),Mn({phase:0,period:wn(t.index,0,t.qt,.2,4)}),Mn({phase:wn(t.index,0,t.qt,0,.5),period:t.rand2*4}),ia(.6),n=>n+$o(-2,2)(Mn({phase:t.rand1*9,period:2})(e.mod1*.2)*8),n=>n+$o(-4,4)(Mn({phase:t.rand1*9,period:3})(e.mod1*.5)*2),n=>n*1/t.qt*.8,n=>n+wn(t.index,0,t.qt,-.8,.8),n=>n*-1,ia(.4))(e.phz)];return i})();const fh=(i,e)=>t=>{Object.values(e).forEach(n=>n[2]=n[0]);for(let n=0,r=Object.entries(e);n<1.0001;n+=i,r.map(([s,o])=>o[2]+=o[1]*i))t(n,Object.assign({},...r.map(([s,o])=>({[s]:o[2]}))))};function Oc({width:i=512,height:e=200,vMargin:t=1,qt:n=8}={}){let r=Array(n);r.fill("");const s=a=>(l,c)=>{const u=dh[1](c,Object.assign(o,{index:a,qt:n}));const h=` ${l===0?"M":"L"}`;const p=` ${l*i}`.slice(0,6);const m=` ${(1-u)*(e/2-t)+t}`.slice(0,6);r[a]+=h+p+m};const o={rand1:Math.random(),rand2:Math.random()};for(let a=r.length;a--;){fh(.005,{phz:[0+a*.2,1],mod1:[0,8],mod2:[0,.7]})(s(a))}return r}const Bc=q("div",{"id":"layout"});for(let i=0;i<12;i++)Bc.appendChild(q("div"));document.body.appendChild(Bc);const ph=[q("meta",{name:"robots",content:"index, follow"}),q("meta",{name:"title",content:we.fk.meta.title}),q("meta",{name:"description",content:we.fk.meta.title})];ph.forEach(i=>document.head.appendChild(i));const mo=q("header");const mh=q("h1","François Kerforn | Portfolio");mo.appendChild(mh);document.body.appendChild(mo);const Fr=q("main");document.body.appendChild(Fr);const $i=q("nav",{classList:"hidden"});const pr=q("a",{href:"/projects",alt:"Projects | François Kerforn"});const zc=q("span","Projects");pr.setAttribute("data-text",zc.textContent);pr.appendChild(zc);const mr=q("a",{href:"/fk",alt:"Home | François Kerforn"});const Gc=q("span","Home");mr.setAttribute("data-text",Gc.textContent);mr.appendChild(Gc);const Ki=q("button",{id:"audioSwitch",className:"hidden"});const Hc=q("span","Audio (is on)");const _h=q("div");Ki.setAttribute("data-text",Hc.textContent);Ki.appendChild(_h);Ki.appendChild(Hc);$i.appendChild(mr);$i.appendChild(pr);$i.appendChild(Ki);mo.appendChild($i);const xn=q("footer",{classList:"hidden"});const _o=q("div",{className:"category"});const gh=q("div",`François Kerforn?`);const Vc=q("div",{className:"content"});const vh=q("a",{href:"/fk",alt:"Projects | François Kerforn"},"FK");const xh=q("a",{href:"/projects",alt:"Home | François Kerforn"},"Projects");Vc.appendChild(q("div","> "+we.footer.bio));_o.appendChild(gh);_o.appendChild(Vc);const go=q("div",{className:"category"});const Sh=q("div","Contact me!");const Vs=q("div",{className:"content"});Vs.appendChild(q("a",{href:`mailto:${we.footer.contact.mail}`,target:"_blank",alt:"Send e-mail"},"E-mail"));const ks=q("div",{id:"mailText"});ks.appendChild(q("span",`(`));const Mh=q("span",`${we.footer.contact.mail}`);ks.appendChild(Mh);ks.appendChild(q("span",`)`));Vs.appendChild(ks);Vs.appendChild(q("a",{href:we.footer.contact.linkedin,target:"_blank",alt:"Open Linkedin Profile"},"Linkedin"));go.appendChild(Sh);go.appendChild(Vs);const vo=q("div",{className:"category"});const Eh=q("div","Favourite tools:");const kc=q("div",{className:"content"});we.footer.tools.forEach(i=>kc.appendChild(q("p",i)));vo.appendChild(Eh);vo.appendChild(kc);xn.appendChild(_o);xn.appendChild(go);xn.appendChild(vo);xn.appendChild(q("p",`${new Date().getFullYear()} © fk.`));document.body.appendChild(xn);const Wc=q("div",{id:"loadingMess"},"fk");const Xc=q("section",{className:"loading"});Xc.appendChild(Wc);Fr.appendChild(Xc);const Ws=q("section",{className:"fk"});Fr.appendChild(Ws);const qc=q("div",{id:"hero"});const ka=po([q("span","f"),q("span","k")],q("span"));const Wa=po([q("span","SOUND"),q("span","DESIGN"),q("span","CODE")],q("span"));const xo=q("span");xo.appendChild(ka.el);xo.appendChild(Wa.el);qc.appendChild(xo);const jc=q("article");const So=q("div");const yh=q("h3","SOUND x DESIGN x CODE");const Th=we.fk.homeDescription.map(i=>q("p",i));So.appendChild(yh);Th.forEach(i=>So.appendChild(i));jc.appendChild(So);Ws.appendChild(qc);Ws.appendChild(jc);const Mo=q("div",{id:"homeLinks"});const Xs=q("a",{className:"homeLink",href:"/projects",alt:"Projects | François Kerforn"});Xs.appendChild(q("span",{className:"scrolling-text"},"ROJECTS * PROJECTS * PROJECTS * PROJECTS * PROJECTS * PROJECTS * PROJECTS * PROJECTS * PROJECTS * P"));Xs.appendChild(q("span",{className:"scrolling-text"},"ROJECTS * PROJECTS * PROJECTS * PROJECTS * PROJECTS * PROJECTS * PROJECTS * PROJECTS * PROJECTS * P"));const Eo=q("a",{className:"homeLink",href:`mailto:${we.footer.contact.mail}`,target:"_blank",alt:"Send e-mail"});Eo.appendChild(q("span",{className:"scrolling-text"},"ACT ↗ CONTACT ↗ CONTACT ↗ CONTACT ↗ CONTACT ↗ CONTACT ↗ CONTACT ↗ CONTACT ↗ CONTACT ↗ CONTACT ↗ CONT"));Eo.appendChild(q("span",{className:"scrolling-text"},"ACT ↗ CONTACT ↗ CONTACT ↗ CONTACT ↗ CONTACT ↗ CONTACT ↗ CONTACT ↗ CONTACT ↗ CONTACT ↗ CONTACT ↗ CONT"));Mo.appendChild(Xs);Mo.appendChild(Eo);Ws.appendChild(Mo);const Ts=128;const As=128;const Xa=we.projects.map(i=>{const e=q("a",{href:i.href,className:"projectLink",target:"_blank",alt:`Open project : ${i.name}`});e.appendChild(Dc(q("div",{className:"waveIcon"}),Oc({width:Ts,height:As}),{width:"100%",height:"100%",viewBox:`0 0  ${Ts} ${As}`}));const t=q("div",{className:"text"});const n=[q("div",i.name),q("div",i.idObject.date),q("div","> "+i.idObject.type)];n.forEach(r=>{const s=q("span",{className:"mask"});s.appendChild(r);t.appendChild(s)});t.querySelectorAll(".mask").forEach(r=>r.setAttribute("data-text",r.textContent));e.appendChild(t);return e});const Yc=we.links.map(i=>{const e=q("a",{href:i.href,className:"hyperLink",target:"_blank",alt:`Visit project : ${i.name}`});e.appendChild(Dc(q("div",{className:"waveIcon"}),Oc({width:Ts,height:As}),{width:"100%",height:"100%",viewBox:`0 0  ${Ts} ${As}`}));const t=q("div",{className:"text"});const n=[q("div",i.name),q("div","> "+i.content[1]),q("div","> "+i.content[2])];n.forEach(r=>{const s=q("span",{className:"mask"});s.appendChild(r);t.appendChild(s)});t.querySelectorAll(".mask").forEach(r=>r.setAttribute("data-text",r.textContent));e.appendChild(t);return e});const yo=q("section",{className:"projects"});Fr.appendChild(yo);const Ah=q("h2",{id:"projectsTitle"},"Projects");yo.appendChild(Ah);const $c=q("div",{id:"projectLinks"});const Ui=q("div",{id:"projectLinksList"});Xa.forEach((i,e)=>{Ui.appendChild(i)});Yc.forEach((i,e)=>{Ui.appendChild(i)});$c.appendChild(Ui);yo.appendChild($c);const ra=(i,e)=>{const t=q("p");const n=q("span",i);const r=q("span",e);t.appendChild(n);t.appendChild(r);return t};const bh=we.projects.map(i=>{const e=q("div",{className:"projectInfo"});[ra("Name:",i.idObject.name),ra("Date:",i.idObject.date),ra("Role:",i.idObject.role)].forEach(t=>e.appendChild(t));return e});const _n=we.projects.map(i=>{const e=q("article",{className:"projectArticle1"});const t=q("p");t.innerHTML=i.p[0];e.appendChild(t);return{el:e,display:n=>{e.classList.toggle("display",n)}}});const Ri=we.projects.map(i=>{const e=q("article",{className:"projectArticle2"});const t=i.p.map((n,r)=>r>0&&q("p",n)).filter(n=>n);t.forEach(n=>e.appendChild(n));if(t.length>0)return{el:e,display:n=>{e.classList.toggle("display",n)}}});const wi=we.projects.map(i=>po([q("div","x Close")],q("a",{href:"/projects",className:"backLink",alt:"Projects | François Kerforn"}),{tMin:650,tMax:900}));const dr=we.projects.map(i=>hh(i.name.split(""),q("h2",{className:"projectName"},i.name),{tMin:600,tMax:1400,random:true}));we.projects.forEach((i,e)=>{var o;const t=q("section",{className:"project"});Fr.appendChild(t);t.appendChild(wi[e].el);_n[e].el.insertBefore(bh[e],_n[e].el.childNodes[0]);_n[e].el.insertBefore(dr[e].el,_n[e].el.childNodes[0]);const n=q("div",{className:"projectArticleGrid"});n.appendChild(_n[e].el);((o=Ri[e])==null?void 0:o.el)&&n.appendChild(Ri[e].el);const r=q("a",{href:i.url,className:"projectContentLinks",target:"_blank"});const s=q("span","Learn More ↗ ");r.setAttribute("data-text",s.textContent);r.appendChild(s);if(i.url)n.lastChild.appendChild(r);t.appendChild(n)});const fr=[q("button",{id:"arrowLeft"},"← Prev"),q("button",{id:"arrowRight"},"Next →")];const qa=q("div",{id:"counter"});const ja=(()=>{const i=q("div",{id:"carousel"});i.appendChild(fr[0]);i.appendChild(qa);i.appendChild(fr[1]);return{el:i}})();document.body.insertBefore(ja.el,xn);const Kc=q("div",{id:"progress"});const bs=q("div",{id:"progressContainer"});bs.appendChild(Kc);document.body.appendChild(bs);const Ch="/assets/gain01-CN-HkUcj.js";const wh="/assets/player-CPx8ZKJ_.js";const Rh="/assets/oneh-DTJ6eSBX.js";async function Lh(){let i=null;const e={create:{}};function t(n){e.create[n]=(r,s)=>{try{e[r]=new AudioWorkletNode(i,n,s)}catch(o){console.error(`** Error: Unable to create worklet node: ${o}`)}return e[r]}}try{i=new AudioContext({sampleRate:44100});i.suspend()}catch(n){console.error(`** Error: Unable to create audio context: ${n}`)}try{await i.audioWorklet.addModule(Ch);t("gain01");await i.audioWorklet.addModule(wh);t("player");await i.audioWorklet.addModule(Rh);t("oneh")}catch(n){console.error(`** Error: Unable to add audio worklet module: ${n}`)}return[i,e]}var xr,hn,ni,Us,Zc,ho,Ph;const Ns=class Ns{constructor(e,{fadems:t=10,autoplay:n=true,loop:r=false,gain:s=1}={}){xe(this,Us);xe(this,ho);xe(this,xr,void 0);xe(this,hn,void 0);xe(this,ni,void 0);this.audioContext=e;this.node=new AudioWorkletNode(this.audioContext,"player",{numberOfInputs:0,numberOfOutputs:2,outputChannelCount:[2,1],parameterData:{gain:s},processorOptions:{fadems:t,loop:r,autoplay:n}});Ce(this,hn,this.audioContext.createAnalyser());ie(this,hn).fftSize=32;const o=ie(this,hn).frequencyBinCount;Ce(this,ni,new Float32Array(o));ie(this,hn).getFloatTimeDomainData(ie(this,ni));this.node.connect(ie(this,hn),1,0)}static async decodeAudioFile(e,t){let n;try{const r=await fetch(e);n=await r.arrayBuffer()}catch(r){console.error(`Unable to fetch the audio file. Error: ${r.message}`)}return await t.decodeAudioData(n)}async loadAudioSource(e){if(typeof e==="string")e=[e];let t;try{for(let n=0;n<e.length;n++){try{t=await Ns.decodeAudioFile(e[n],this.audioContext);break}catch(r){if(e[n+1]){console.warn(`cannot decode source ${e[n]}`);console.warn(`trying again with ${e[n+1]}`)}else console.error(`cannot decode ${e[n]}`)}}it(this,Us,Zc).call(this,t)}catch(n){console.error(`Unable to load audio source. Error: ${n.message}`)}}start(){this.node.port.postMessage({play:1})}pause(){this.node.port.postMessage({play:0})}stop(){this.node.port.postMessage({play:-1})}restart(){this.node.port.postMessage({restart:true})}reset(){this.node.port.postMessage({reset:true})}loop(e){this.node.port.postMessage({loop:e})}getPosition(){ie(this,hn).getFloatTimeDomainData(ie(this,ni));const e=ie(this,ni)[0];return e}getDuration(){return ie(this,xr)}};xr=new WeakMap;hn=new WeakMap;ni=new WeakMap;Us=new WeakSet;Zc=function(e){if(!e)return;this.node.port.postMessage({buffers:[e.getChannelData(0),e.getChannelData(1)]});Ce(this,xr,e.getChannelData(0).length)};ho=new WeakSet;Ph=function(e){return Ns.decodeAudioFile(e,this.audioContext)};let Ya=Ns;var Pn,dn,Fi,Sr;class Dh{constructor(e,{playerOptions:t={}}={}){xe(this,Pn,[]);xe(this,dn,-1);xe(this,Fi,null);xe(this,Sr,{});this.audioContext=e;this.node=new AudioWorkletNode(this.audioContext,"gain01",{numberOfInputs:1,numberOfOutputs:1,outputChannelCount:[2]});Ce(this,Sr,Object.freeze(Object.assign({fadems:20,autoplay:false,loop:false},t)))}async loadSource(e){const t=new Ya(this.audioContext,{...ie(this,Sr)});ie(this,Pn).push(t);await ie(this,Pn)[ie(this,Pn).length-1].loadAudioSource(e);t.node.connect(this.node)}async loadSources(e,t=()=>{}){const n=e.map(s=>this.loadSource(s));let r=0;t(r/e.length);for(let s of n){s.then(()=>{r++;t(r/e.length)})}return Promise.all(n)}play(e){var t,n;e=+e;if(isNaN(e))return;if(e===-1){(t=this.getCurrentPlayer())==null?void 0:t.pause();Ce(this,dn,e)}else{(n=this.getCurrentPlayer())==null?void 0:n.pause();ie(this,Pn)[e].start();Ce(this,dn,e);Ce(this,Fi,e)}}getState(){return ie(this,dn)}getCurrentPlayer(){return ie(this,Pn)[ie(this,dn)]??null}getLastPlayingId(){return ie(this,Fi)}getPosition(){var e;return((e=this.getCurrentPlayer())==null?void 0:e.getPosition())??null}getDuration(){var e;return((e=this.getCurrentPlayer())==null?void 0:e.getDuration())??null}getFormatedDuration(){var s;if(!this.getCurrentPlayer())return null;const e=Math.round(((s=this.getCurrentPlayer())==null?void 0:s.getDuration())/this.audioContext.sampleRate);const t=~~(e/3600);const n=~~(e%3600/60);const r=~~e%60;return{values:[t,n,r],string:[`${t}`.padStart(2,0),`${n}`.padStart(2,0),`${r}`.padStart(2,0)].join(":")}}pause(){if(ie(this,dn)!==-1)this.play(-1)}resume(){if(ie(this,dn)===-1)this.play(ie(this,Fi))}}Pn=new WeakMap;dn=new WeakMap;Fi=new WeakMap;Sr=new WeakMap;const Uh=(()=>{const i=Array(we.projects.length);i.fill(-1);let e=0;we.projects.map(t=>t.audio).forEach((t,n)=>{if(t==="")return;i[n]=e;e++});return i})();function Zo(i,e,t,n,r){i=(i-e)*(r-n)/(t-e)+n;return i<n?n:i>r?r:i}function Yr(i,e=0,t=1){return i<e?e:t<i?t:i}var fn,Oi,Ot,Mr,Er,yr,Bi,zi,Tr,Ar,$a,Gi,Ss,br,Ka,Is,Jc,Fs,Qc,Cr,Za;const Di=class Di{constructor({ctx:e,param:t,el:n,range:r=[0,1],initialValue:s=0,transfer:o=u=>u,shouldSlide:a=true,slidems:l=100,speedlimms:c=0}){xe(this,Ar);xe(this,Gi);xe(this,br);xe(this,Is);xe(this,Fs);xe(this,Cr);xe(this,fn,void 0);xe(this,Oi,[0,1]);xe(this,Ot,void 0);xe(this,Mr,void 0);xe(this,Er,void 0);xe(this,yr,true);xe(this,Bi,void 0);xe(this,zi,false);xe(this,Tr,null);[kn(this,fn)._,kn(this,Ot)._,kn(this,Mr)._,kn(this,Er)._,kn(this,yr)._,kn(this,Bi)._]=[e,t,o,l*.001,a,c];if(!ie(this,fn))Ce(this,fn,Di.audioCtx);if(n){Ce(this,Oi,[+n.min,+n.max]);it(this,Gi,Ss).call(this,+n.value);n.addEventListener("input",u=>this.update(u.target.value))}else{Ce(this,Oi,r);it(this,Gi,Ss).call(this,Yr(s,...r))}}static setContext(e){Di.audioCtx=e}update(e){ie(this,yr)===true?it(this,Fs,Qc).call(this,e):it(this,Gi,Ss).call(this,e)}};fn=new WeakMap;Oi=new WeakMap;Ot=new WeakMap;Mr=new WeakMap;Er=new WeakMap;yr=new WeakMap;Bi=new WeakMap;zi=new WeakMap;Tr=new WeakMap;Ar=new WeakSet;$a=function(e){const[t,n]=ie(this,Oi);return Zo(ie(this,Mr).call(this,Zo(+e,t,n,0,1)),0,1,t,n)};Gi=new WeakSet;Ss=function(e){const t=it(this,Ar,$a).call(this,e);if(typeof t!=="number")return;if(Array.isArray(ie(this,Ot)))ie(this,Ot).forEach(n=>n.value=Yr(t,n.minValue,n.maxValue));else ie(this,Ot).value=Yr(t,ie(this,Ot).minValue,ie(this,Ot).maxValue)};br=new WeakSet;Ka=function(){const e=it(this,Ar,$a).call(this,it(this,Is,Jc).call(this));if(typeof e!=="number")return;if(Array.isArray(ie(this,Ot))){ie(this,Ot).forEach(t=>{it(this,Cr,Za).call(this,t,e)})}else{it(this,Cr,Za).call(this,ie(this,Ot),e)}};Is=new WeakSet;Jc=function(){return ie(this,Tr)};Fs=new WeakSet;Qc=function(e){Ce(this,Tr,e);if(ie(this,Bi)>0){if(ie(this,zi)){return}setTimeout(()=>{Ce(this,zi,false);it(this,br,Ka).call(this)},ie(this,Bi));Ce(this,zi,true)}it(this,br,Ka).call(this)};Cr=new WeakSet;Za=function(e,t){const n=e.value;e.cancelScheduledValues(ie(this,fn).currentTime);e.setValueAtTime(n,ie(this,fn).currentTime);e.linearRampToValueAtTime(Yr(t,e.minValue,e.maxValue),ie(this,fn).currentTime+ie(this,Er))};jr(Di,"audioCtx");jr(Di,"transferFunction",{linear:e=>e,exp:e=>e<1e-4?0:Math.pow(2,10*e-10)});let Cs=Di;var pn,ii,Hi,wr,Rr,Os,eu,Lr;let Nh=(Lr=class{constructor(e,t){xe(this,Os);xe(this,pn,null);xe(this,ii,[-1,-1]);xe(this,Hi,null);xe(this,wr,null);xe(this,Rr,null);Ce(this,wr,e);Ce(this,pn,t)}static getNormalisedWindow(e){const t=document.body.getBoundingClientRect();const n=e.min.element.getBoundingClientRect();const r=e.max.element.getBoundingClientRect();const s=e.threshPosition===_r.threshPosition.center?window.innerHeight*.5:0;return[(n.top+n.height*e.min.offset-t.top-s)/(t.height-document.documentElement.clientHeight),(r.top+r.height*e.max.offset-t.top-s)/(t.height-document.documentElement.clientHeight)]}setNode(e){Ce(this,Rr,e);Ce(this,Hi,new Cs({ctx:ie(this,wr),param:ie(this,Rr).parameters.get("gain"),range:[0,1],initialValue:0,speedlimms:ie(this,pn).speedlimms,slidems:ie(this,pn).slidems}))}setWindow(e){Ce(this,ii,e)}setPlaybackOptions(e){Object.assign(ie(this,pn),e)}updateWindow(){Ce(this,ii,Lr.getNormalisedWindow(ie(this,pn)))}update(e){ie(this,Hi)&&ie(this,Hi).update(it(this,Os,eu).call(this,e))}},pn=new WeakMap,ii=new WeakMap,Hi=new WeakMap,wr=new WeakMap,Rr=new WeakMap,Os=new WeakSet,eu=function(e){return lh(Fn(Nc(wn(e,ie(this,ii)[0],ie(this,ii)[1],0,1),.5)*(Uc(Fn(1-ie(this,pn).windowFade,0,1))+1),0,1))},Lr);var Pr,Vi,Ms,Bs,tu;const zs=class zs{constructor(e,t){xe(this,Vi);xe(this,Bs);xe(this,Pr,void 0);this.audioContext=e;Ce(this,Pr,t==null?void 0:t.defaultSourceOptions);this.sources=[];this.node=new AudioWorkletNode(e,"gain01",{numberOfInputs:1,numberOfOutputs:1,outputChannelCount:[2]});this.currentPosition=0}static async decodeAudioFile(e,t){let n;try{const r=await fetch(e);n=await r.arrayBuffer()}catch(r){console.error(`Unable to fetch the audio file. Error: ${r.message}`)}return await t.decodeAudioData(n)}async loadAudioSource(e){if(typeof e==="string")e=[e];this.sources.push(new Nh(this.audioContext,{...ie(this,Pr)}));const t=this.sources.length-1;let n;try{for(let s=0;s<e.length;s++){try{n=await zs.decodeAudioFile(e[s],this.audioContext);break}catch(o){if(e[s+1]){console.warn(`cannot decode source ${e[s]}`);console.warn(`trying again with ${e[s+1]}`)}else console.error(`cannot decode ${e[s]}`)}}const r=it(this,Bs,tu).call(this,n);this.sources[t].setNode(r);this.sources[t].update(this.currentPosition)}catch(r){console.error(`Unable to load audio source. Error: ${r.message}`)}}async loadAudioSources(e,t=()=>{}){const n=e.map(s=>this.loadAudioSource(s));let r=0;t(r/e.length);for(let s of n){s.then(()=>{r++;t(r/e.length)})}return Promise.all(n)}connect(...e){return this.node.connect(e)}updateWindows(){for(let e of this.sources){e.updateWindow()}}updatePosition(e){this.currentPosition=Fn(e,0,1);it(this,Vi,Ms).call(this)}setWindow(e,t){var n;(n=this.sources[e])==null?void 0:n.setWindow(t);it(this,Vi,Ms).call(this)}setPlaybackOptions(e,t){var n,r;(n=this.sources[e])==null?void 0:n.setPlaybackOptions(t);(r=this.sources[e])==null?void 0:r.updateWindow();it(this,Vi,Ms).call(this)}log(){for(let e of this.sources){console.log(e)}}};Pr=new WeakMap;Vi=new WeakSet;Ms=function(){for(let e of this.sources){e.update(this.currentPosition)}};Bs=new WeakSet;tu=function(e){const t=new AudioWorkletNode(this.audioContext,"player",{numberOfInputs:0,numberOfOutputs:2,outputChannelCount:[2,1],parameterData:{gain:1},processorOptions:{fadems:10,loop:true,autoplay:true}});if(e)t.port.postMessage({buffers:[e.getChannelData(0),e.getChannelData(1)]});t.connect(this.node,0,0);return t};jr(zs,"threshPosition",{center:0,top:1});let _r=zs;var Gs,nu,Hs,iu;const zo=class zo{constructor(e,{gain:t=1}={}){xe(this,Gs);xe(this,Hs);this.audioContext=e;this.node=new AudioWorkletNode(this.audioContext,"oneh",{numberOfInputs:0,numberOfOutputs:1,outputChannelCount:[2],parameterData:{gain:t}})}static async decodeAudioFile(e,t){let n;try{const r=await fetch(e);n=await r.arrayBuffer()}catch(r){console.error(`Unable to fetch the audio file. Error: ${r.message}`)}return await t.decodeAudioData(n)}async loadSources(e,t=()=>{}){const n=e.map(s=>it(this,Hs,iu).call(this,s));let r=0;t(r/e.length);for(let s of n){s.then(()=>{r++;t(r/e.length)})}return Promise.all(n).then(s=>it(this,Gs,nu).call(this,s))}play(e){if(this.audioContext.state==="running")this.node.port.postMessage({play:e})}};Gs=new WeakSet;nu=function(e){this.node.port.postMessage({buffers:e.map(t=>t?[t.getChannelData(0),t.getChannelData(1)]:[new Float32Array([0]),new Float32Array([0])])})};Hs=new WeakSet;iu=async function(e){if(typeof e==="string")e=[e];let t;try{for(let n=0;n<e.length;n++){try{t=await zo.decodeAudioFile(e[n],this.audioContext);break}catch(r){if(e[n+1]){console.warn(`cannot decode source ${e[n]}`);console.warn(`trying again with ${e[n+1]}`)}else console.error(`cannot load ${e[n]}`)}}}catch(n){console.error(`Unable to load audio source. Error: ${n.message}`);t=null}return t};let Ja=zo;/**
 * @license
 * Copyright 2010-2023 Three.js Authors
 * SPDX-License-Identifier: MIT
 */const To="162";const Ih=0;const Jo=1;const Fh=2;const ru=1;const Oh=2;const un=3;const On=0;const wt=1;const Jt=2;const Sn=0;const Ni=1;const Qa=2;const Qo=3;const el=4;const Bh=5;const Jn=100;const zh=101;const Gh=102;const tl=103;const nl=104;const Hh=200;const Vh=201;const kh=202;const Wh=203;const eo=204;const to=205;const Xh=206;const qh=207;const jh=208;const Yh=209;const $h=210;const Kh=211;const Zh=212;const Jh=213;const Qh=214;const ed=0;const td=1;const nd=2;const ws=3;const id=4;const rd=5;const sd=6;const ad=7;const Ao=0;const od=1;const ld=2;const Un=0;const su=1;const au=2;const ou=3;const lu=4;const cd=5;const cu=6;const uu=7;const hu=300;const Zi=301;const Ji=302;const no=303;const io=304;const qs=306;const ro=1e3;const Wt=1001;const so=1002;const Et=1003;const il=1004;const ar=1005;const Ct=1006;const sa=1007;const ei=1008;const Nn=1009;const ud=1010;const hd=1011;const bo=1012;const du=1013;const Dn=1014;const gn=1015;const Bn=1016;const fu=1017;const pu=1018;const ai=1020;const dd=1021;const Xt=1023;const fd=1024;const pd=1025;const oi=1026;const Qi=1027;const md=1028;const mu=1029;const _d=1030;const _u=1031;const gu=1033;const aa=33776;const oa=33777;const la=33778;const ca=33779;const rl=35840;const sl=35841;const al=35842;const ol=35843;const vu=36196;const ll=37492;const cl=37496;const ul=37808;const hl=37809;const dl=37810;const fl=37811;const pl=37812;const ml=37813;const _l=37814;const gl=37815;const vl=37816;const xl=37817;const Sl=37818;const Ml=37819;const El=37820;const yl=37821;const ua=36492;const Tl=36494;const Al=36495;const gd=36283;const bl=36284;const Cl=36285;const wl=36286;const vd=3200;const xd=3201;const xu=0;const Sd=1;const Rn="";const Kt="srgb";const Gn="srgb-linear";const Co="display-p3";const js="display-p3-linear";const Rs="linear";const Je="srgb";const Ls="rec709";const Ps="p3";const hi=7680;const Rl=519;const Md=512;const Ed=513;const yd=514;const Su=515;const Td=516;const Ad=517;const bd=518;const Cd=519;const Ll=35044;const Pl="300 es";const ao=1035;const vn=2e3;const Ds=2001;class tr{addEventListener(e,t){if(this._listeners===void 0)this._listeners={};const n=this._listeners;if(n[e]===void 0){n[e]=[]}if(n[e].indexOf(t)===-1){n[e].push(t)}}hasEventListener(e,t){if(this._listeners===void 0)return false;const n=this._listeners;return n[e]!==void 0&&n[e].indexOf(t)!==-1}removeEventListener(e,t){if(this._listeners===void 0)return;const n=this._listeners;const r=n[e];if(r!==void 0){const s=r.indexOf(t);if(s!==-1){r.splice(s,1)}}}dispatchEvent(e){if(this._listeners===void 0)return;const t=this._listeners;const n=t[e.type];if(n!==void 0){e.target=this;const r=n.slice(0);for(let s=0,o=r.length;s<o;s++){r[s].call(this,e)}e.target=null}}}const gt=["00","01","02","03","04","05","06","07","08","09","0a","0b","0c","0d","0e","0f","10","11","12","13","14","15","16","17","18","19","1a","1b","1c","1d","1e","1f","20","21","22","23","24","25","26","27","28","29","2a","2b","2c","2d","2e","2f","30","31","32","33","34","35","36","37","38","39","3a","3b","3c","3d","3e","3f","40","41","42","43","44","45","46","47","48","49","4a","4b","4c","4d","4e","4f","50","51","52","53","54","55","56","57","58","59","5a","5b","5c","5d","5e","5f","60","61","62","63","64","65","66","67","68","69","6a","6b","6c","6d","6e","6f","70","71","72","73","74","75","76","77","78","79","7a","7b","7c","7d","7e","7f","80","81","82","83","84","85","86","87","88","89","8a","8b","8c","8d","8e","8f","90","91","92","93","94","95","96","97","98","99","9a","9b","9c","9d","9e","9f","a0","a1","a2","a3","a4","a5","a6","a7","a8","a9","aa","ab","ac","ad","ae","af","b0","b1","b2","b3","b4","b5","b6","b7","b8","b9","ba","bb","bc","bd","be","bf","c0","c1","c2","c3","c4","c5","c6","c7","c8","c9","ca","cb","cc","cd","ce","cf","d0","d1","d2","d3","d4","d5","d6","d7","d8","d9","da","db","dc","dd","de","df","e0","e1","e2","e3","e4","e5","e6","e7","e8","e9","ea","eb","ec","ed","ee","ef","f0","f1","f2","f3","f4","f5","f6","f7","f8","f9","fa","fb","fc","fd","fe","ff"];const ha=Math.PI/180;const oo=180/Math.PI;function Or(){const i=Math.random()*4294967295|0;const e=Math.random()*4294967295|0;const t=Math.random()*4294967295|0;const n=Math.random()*4294967295|0;const r=gt[i&255]+gt[i>>8&255]+gt[i>>16&255]+gt[i>>24&255]+"-"+gt[e&255]+gt[e>>8&255]+"-"+gt[e>>16&15|64]+gt[e>>24&255]+"-"+gt[t&63|128]+gt[t>>8&255]+"-"+gt[t>>16&255]+gt[t>>24&255]+gt[n&255]+gt[n>>8&255]+gt[n>>16&255]+gt[n>>24&255];return r.toLowerCase()}function xt(i,e,t){return Math.max(e,Math.min(t,i))}function wd(i,e){return(i%e+e)%e}function da(i,e,t){return(1-t)*i+t*e}function Dl(i){return(i&i-1)===0&&i!==0}function lo(i){return Math.pow(2,Math.floor(Math.log(i)/Math.LN2))}function or(i,e){switch(e.constructor){case Float32Array:return i;case Uint32Array:return i/4294967295;case Uint16Array:return i/65535;case Uint8Array:return i/255;case Int32Array:return Math.max(i/2147483647,-1);case Int16Array:return Math.max(i/32767,-1);case Int8Array:return Math.max(i/127,-1);default:throw new Error("Invalid component type.")}}function At(i,e){switch(e.constructor){case Float32Array:return i;case Uint32Array:return Math.round(i*4294967295);case Uint16Array:return Math.round(i*65535);case Uint8Array:return Math.round(i*255);case Int32Array:return Math.round(i*2147483647);case Int16Array:return Math.round(i*32767);case Int8Array:return Math.round(i*127);default:throw new Error("Invalid component type.")}}class Pe{constructor(e=0,t=0){Pe.prototype.isVector2=true;this.x=e;this.y=t}get width(){return this.x}set width(e){this.x=e}get height(){return this.y}set height(e){this.y=e}set(e,t){this.x=e;this.y=t;return this}setScalar(e){this.x=e;this.y=e;return this}setX(e){this.x=e;return this}setY(e){this.y=e;return this}setComponent(e,t){switch(e){case 0:this.x=t;break;case 1:this.y=t;break;default:throw new Error("index is out of range: "+e)}return this}getComponent(e){switch(e){case 0:return this.x;case 1:return this.y;default:throw new Error("index is out of range: "+e)}}clone(){return new this.constructor(this.x,this.y)}copy(e){this.x=e.x;this.y=e.y;return this}add(e){this.x+=e.x;this.y+=e.y;return this}addScalar(e){this.x+=e;this.y+=e;return this}addVectors(e,t){this.x=e.x+t.x;this.y=e.y+t.y;return this}addScaledVector(e,t){this.x+=e.x*t;this.y+=e.y*t;return this}sub(e){this.x-=e.x;this.y-=e.y;return this}subScalar(e){this.x-=e;this.y-=e;return this}subVectors(e,t){this.x=e.x-t.x;this.y=e.y-t.y;return this}multiply(e){this.x*=e.x;this.y*=e.y;return this}multiplyScalar(e){this.x*=e;this.y*=e;return this}divide(e){this.x/=e.x;this.y/=e.y;return this}divideScalar(e){return this.multiplyScalar(1/e)}applyMatrix3(e){const t=this.x,n=this.y;const r=e.elements;this.x=r[0]*t+r[3]*n+r[6];this.y=r[1]*t+r[4]*n+r[7];return this}min(e){this.x=Math.min(this.x,e.x);this.y=Math.min(this.y,e.y);return this}max(e){this.x=Math.max(this.x,e.x);this.y=Math.max(this.y,e.y);return this}clamp(e,t){this.x=Math.max(e.x,Math.min(t.x,this.x));this.y=Math.max(e.y,Math.min(t.y,this.y));return this}clampScalar(e,t){this.x=Math.max(e,Math.min(t,this.x));this.y=Math.max(e,Math.min(t,this.y));return this}clampLength(e,t){const n=this.length();return this.divideScalar(n||1).multiplyScalar(Math.max(e,Math.min(t,n)))}floor(){this.x=Math.floor(this.x);this.y=Math.floor(this.y);return this}ceil(){this.x=Math.ceil(this.x);this.y=Math.ceil(this.y);return this}round(){this.x=Math.round(this.x);this.y=Math.round(this.y);return this}roundToZero(){this.x=Math.trunc(this.x);this.y=Math.trunc(this.y);return this}negate(){this.x=-this.x;this.y=-this.y;return this}dot(e){return this.x*e.x+this.y*e.y}cross(e){return this.x*e.y-this.y*e.x}lengthSq(){return this.x*this.x+this.y*this.y}length(){return Math.sqrt(this.x*this.x+this.y*this.y)}manhattanLength(){return Math.abs(this.x)+Math.abs(this.y)}normalize(){return this.divideScalar(this.length()||1)}angle(){const e=Math.atan2(-this.y,-this.x)+Math.PI;return e}angleTo(e){const t=Math.sqrt(this.lengthSq()*e.lengthSq());if(t===0)return Math.PI/2;const n=this.dot(e)/t;return Math.acos(xt(n,-1,1))}distanceTo(e){return Math.sqrt(this.distanceToSquared(e))}distanceToSquared(e){const t=this.x-e.x,n=this.y-e.y;return t*t+n*n}manhattanDistanceTo(e){return Math.abs(this.x-e.x)+Math.abs(this.y-e.y)}setLength(e){return this.normalize().multiplyScalar(e)}lerp(e,t){this.x+=(e.x-this.x)*t;this.y+=(e.y-this.y)*t;return this}lerpVectors(e,t,n){this.x=e.x+(t.x-e.x)*n;this.y=e.y+(t.y-e.y)*n;return this}equals(e){return e.x===this.x&&e.y===this.y}fromArray(e,t=0){this.x=e[t];this.y=e[t+1];return this}toArray(e=[],t=0){e[t]=this.x;e[t+1]=this.y;return e}fromBufferAttribute(e,t){this.x=e.getX(t);this.y=e.getY(t);return this}rotateAround(e,t){const n=Math.cos(t),r=Math.sin(t);const s=this.x-e.x;const o=this.y-e.y;this.x=s*n-o*r+e.x;this.y=s*r+o*n+e.y;return this}random(){this.x=Math.random();this.y=Math.random();return this}*[Symbol.iterator](){yield this.x;yield this.y}}class Be{constructor(e,t,n,r,s,o,a,l,c){Be.prototype.isMatrix3=true;this.elements=[1,0,0,0,1,0,0,0,1];if(e!==void 0){this.set(e,t,n,r,s,o,a,l,c)}}set(e,t,n,r,s,o,a,l,c){const u=this.elements;u[0]=e;u[1]=r;u[2]=a;u[3]=t;u[4]=s;u[5]=l;u[6]=n;u[7]=o;u[8]=c;return this}identity(){this.set(1,0,0,0,1,0,0,0,1);return this}copy(e){const t=this.elements;const n=e.elements;t[0]=n[0];t[1]=n[1];t[2]=n[2];t[3]=n[3];t[4]=n[4];t[5]=n[5];t[6]=n[6];t[7]=n[7];t[8]=n[8];return this}extractBasis(e,t,n){e.setFromMatrix3Column(this,0);t.setFromMatrix3Column(this,1);n.setFromMatrix3Column(this,2);return this}setFromMatrix4(e){const t=e.elements;this.set(t[0],t[4],t[8],t[1],t[5],t[9],t[2],t[6],t[10]);return this}multiply(e){return this.multiplyMatrices(this,e)}premultiply(e){return this.multiplyMatrices(e,this)}multiplyMatrices(e,t){const n=e.elements;const r=t.elements;const s=this.elements;const o=n[0],a=n[3],l=n[6];const c=n[1],u=n[4],h=n[7];const p=n[2],m=n[5],g=n[8];const S=r[0],f=r[3],d=r[6];const A=r[1],M=r[4],T=r[7];const D=r[2],C=r[5],b=r[8];s[0]=o*S+a*A+l*D;s[3]=o*f+a*M+l*C;s[6]=o*d+a*T+l*b;s[1]=c*S+u*A+h*D;s[4]=c*f+u*M+h*C;s[7]=c*d+u*T+h*b;s[2]=p*S+m*A+g*D;s[5]=p*f+m*M+g*C;s[8]=p*d+m*T+g*b;return this}multiplyScalar(e){const t=this.elements;t[0]*=e;t[3]*=e;t[6]*=e;t[1]*=e;t[4]*=e;t[7]*=e;t[2]*=e;t[5]*=e;t[8]*=e;return this}determinant(){const e=this.elements;const t=e[0],n=e[1],r=e[2],s=e[3],o=e[4],a=e[5],l=e[6],c=e[7],u=e[8];return t*o*u-t*a*c-n*s*u+n*a*l+r*s*c-r*o*l}invert(){const e=this.elements,t=e[0],n=e[1],r=e[2],s=e[3],o=e[4],a=e[5],l=e[6],c=e[7],u=e[8],h=u*o-a*c,p=a*l-u*s,m=c*s-o*l,g=t*h+n*p+r*m;if(g===0)return this.set(0,0,0,0,0,0,0,0,0);const S=1/g;e[0]=h*S;e[1]=(r*c-u*n)*S;e[2]=(a*n-r*o)*S;e[3]=p*S;e[4]=(u*t-r*l)*S;e[5]=(r*s-a*t)*S;e[6]=m*S;e[7]=(n*l-c*t)*S;e[8]=(o*t-n*s)*S;return this}transpose(){let e;const t=this.elements;e=t[1];t[1]=t[3];t[3]=e;e=t[2];t[2]=t[6];t[6]=e;e=t[5];t[5]=t[7];t[7]=e;return this}getNormalMatrix(e){return this.setFromMatrix4(e).invert().transpose()}transposeIntoArray(e){const t=this.elements;e[0]=t[0];e[1]=t[3];e[2]=t[6];e[3]=t[1];e[4]=t[4];e[5]=t[7];e[6]=t[2];e[7]=t[5];e[8]=t[8];return this}setUvTransform(e,t,n,r,s,o,a){const l=Math.cos(s);const c=Math.sin(s);this.set(n*l,n*c,-n*(l*o+c*a)+o+e,-r*c,r*l,-r*(-c*o+l*a)+a+t,0,0,1);return this}scale(e,t){this.premultiply(fa.makeScale(e,t));return this}rotate(e){this.premultiply(fa.makeRotation(-e));return this}translate(e,t){this.premultiply(fa.makeTranslation(e,t));return this}makeTranslation(e,t){if(e.isVector2){this.set(1,0,e.x,0,1,e.y,0,0,1)}else{this.set(1,0,e,0,1,t,0,0,1)}return this}makeRotation(e){const t=Math.cos(e);const n=Math.sin(e);this.set(t,-n,0,n,t,0,0,0,1);return this}makeScale(e,t){this.set(e,0,0,0,t,0,0,0,1);return this}equals(e){const t=this.elements;const n=e.elements;for(let r=0;r<9;r++){if(t[r]!==n[r])return false}return true}fromArray(e,t=0){for(let n=0;n<9;n++){this.elements[n]=e[n+t]}return this}toArray(e=[],t=0){const n=this.elements;e[t]=n[0];e[t+1]=n[1];e[t+2]=n[2];e[t+3]=n[3];e[t+4]=n[4];e[t+5]=n[5];e[t+6]=n[6];e[t+7]=n[7];e[t+8]=n[8];return e}clone(){return new this.constructor().fromArray(this.elements)}}const fa=new Be;function Mu(i){for(let e=i.length-1;e>=0;--e){if(i[e]>=65535)return true}return false}function gr(i){return document.createElementNS("http://www.w3.org/1999/xhtml",i)}function Rd(){const i=gr("canvas");i.style.display="block";return i}const Ul={};function Ld(i){if(i in Ul)return;Ul[i]=true;console.warn(i)}const Nl=new Be().set(.8224621,.177538,0,.0331941,.9668058,0,.0170827,.0723974,.9105199);const Il=new Be().set(1.2249401,-.2249404,0,-.0420569,1.0420571,0,-.0196376,-.0786361,1.0982735);const $r={[Gn]:{transfer:Rs,primaries:Ls,toReference:i=>i,fromReference:i=>i},[Kt]:{transfer:Je,primaries:Ls,toReference:i=>i.convertSRGBToLinear(),fromReference:i=>i.convertLinearToSRGB()},[js]:{transfer:Rs,primaries:Ps,toReference:i=>i.applyMatrix3(Il),fromReference:i=>i.applyMatrix3(Nl)},[Co]:{transfer:Je,primaries:Ps,toReference:i=>i.convertSRGBToLinear().applyMatrix3(Il),fromReference:i=>i.applyMatrix3(Nl).convertLinearToSRGB()}};const Pd=new Set([Gn,js]);const $e={enabled:true,_workingColorSpace:Gn,get workingColorSpace(){return this._workingColorSpace},set workingColorSpace(i){if(!Pd.has(i)){throw new Error(`Unsupported working color space, "${i}".`)}this._workingColorSpace=i},convert:function(i,e,t){if(this.enabled===false||e===t||!e||!t){return i}const n=$r[e].toReference;const r=$r[t].fromReference;return r(n(i))},fromWorkingColorSpace:function(i,e){return this.convert(i,this._workingColorSpace,e)},toWorkingColorSpace:function(i,e){return this.convert(i,e,this._workingColorSpace)},getPrimaries:function(i){return $r[i].primaries},getTransfer:function(i){if(i===Rn)return Rs;return $r[i].transfer}};function Ii(i){return i<.04045?i*.0773993808:Math.pow(i*.9478672986+.0521327014,2.4)}function pa(i){return i<.0031308?i*12.92:1.055*Math.pow(i,.41666)-.055}let di;class Eu{static getDataURL(e){if(/^data:/i.test(e.src)){return e.src}if(typeof HTMLCanvasElement==="undefined"){return e.src}let t;if(e instanceof HTMLCanvasElement){t=e}else{if(di===void 0)di=gr("canvas");di.width=e.width;di.height=e.height;const n=di.getContext("2d");if(e instanceof ImageData){n.putImageData(e,0,0)}else{n.drawImage(e,0,0,e.width,e.height)}t=di}if(t.width>2048||t.height>2048){console.warn("THREE.ImageUtils.getDataURL: Image converted to jpg for performance reasons",e);return t.toDataURL("image/jpeg",.6)}else{return t.toDataURL("image/png")}}static sRGBToLinear(e){if(typeof HTMLImageElement!=="undefined"&&e instanceof HTMLImageElement||typeof HTMLCanvasElement!=="undefined"&&e instanceof HTMLCanvasElement||typeof ImageBitmap!=="undefined"&&e instanceof ImageBitmap){const t=gr("canvas");t.width=e.width;t.height=e.height;const n=t.getContext("2d");n.drawImage(e,0,0,e.width,e.height);const r=n.getImageData(0,0,e.width,e.height);const s=r.data;for(let o=0;o<s.length;o++){s[o]=Ii(s[o]/255)*255}n.putImageData(r,0,0);return t}else if(e.data){const t=e.data.slice(0);for(let n=0;n<t.length;n++){if(t instanceof Uint8Array||t instanceof Uint8ClampedArray){t[n]=Math.floor(Ii(t[n]/255)*255)}else{t[n]=Ii(t[n])}}return{data:t,width:e.width,height:e.height}}else{console.warn("THREE.ImageUtils.sRGBToLinear(): Unsupported image type. No color space conversion applied.");return e}}}let Dd=0;class yu{constructor(e=null){this.isSource=true;Object.defineProperty(this,"id",{value:Dd++});this.uuid=Or();this.data=e;this.dataReady=true;this.version=0}set needsUpdate(e){if(e===true)this.version++}toJSON(e){const t=e===void 0||typeof e==="string";if(!t&&e.images[this.uuid]!==void 0){return e.images[this.uuid]}const n={uuid:this.uuid,url:""};const r=this.data;if(r!==null){let s;if(Array.isArray(r)){s=[];for(let o=0,a=r.length;o<a;o++){if(r[o].isDataTexture){s.push(ma(r[o].image))}else{s.push(ma(r[o]))}}}else{s=ma(r)}n.url=s}if(!t){e.images[this.uuid]=n}return n}}function ma(i){if(typeof HTMLImageElement!=="undefined"&&i instanceof HTMLImageElement||typeof HTMLCanvasElement!=="undefined"&&i instanceof HTMLCanvasElement||typeof ImageBitmap!=="undefined"&&i instanceof ImageBitmap){return Eu.getDataURL(i)}else{if(i.data){return{data:Array.from(i.data),width:i.width,height:i.height,type:i.data.constructor.name}}else{console.warn("THREE.Texture: Unable to serialize Texture.");return{}}}}let Ud=0;class yt extends tr{constructor(e=yt.DEFAULT_IMAGE,t=yt.DEFAULT_MAPPING,n=Wt,r=Wt,s=Ct,o=ei,a=Xt,l=Nn,c=yt.DEFAULT_ANISOTROPY,u=Rn){super();this.isTexture=true;Object.defineProperty(this,"id",{value:Ud++});this.uuid=Or();this.name="";this.source=new yu(e);this.mipmaps=[];this.mapping=t;this.channel=0;this.wrapS=n;this.wrapT=r;this.magFilter=s;this.minFilter=o;this.anisotropy=c;this.format=a;this.internalFormat=null;this.type=l;this.offset=new Pe(0,0);this.repeat=new Pe(1,1);this.center=new Pe(0,0);this.rotation=0;this.matrixAutoUpdate=true;this.matrix=new Be;this.generateMipmaps=true;this.premultiplyAlpha=false;this.flipY=true;this.unpackAlignment=4;this.colorSpace=u;this.userData={};this.version=0;this.onUpdate=null;this.isRenderTargetTexture=false;this.needsPMREMUpdate=false}get image(){return this.source.data}set image(e=null){this.source.data=e}updateMatrix(){this.matrix.setUvTransform(this.offset.x,this.offset.y,this.repeat.x,this.repeat.y,this.rotation,this.center.x,this.center.y)}clone(){return new this.constructor().copy(this)}copy(e){this.name=e.name;this.source=e.source;this.mipmaps=e.mipmaps.slice(0);this.mapping=e.mapping;this.channel=e.channel;this.wrapS=e.wrapS;this.wrapT=e.wrapT;this.magFilter=e.magFilter;this.minFilter=e.minFilter;this.anisotropy=e.anisotropy;this.format=e.format;this.internalFormat=e.internalFormat;this.type=e.type;this.offset.copy(e.offset);this.repeat.copy(e.repeat);this.center.copy(e.center);this.rotation=e.rotation;this.matrixAutoUpdate=e.matrixAutoUpdate;this.matrix.copy(e.matrix);this.generateMipmaps=e.generateMipmaps;this.premultiplyAlpha=e.premultiplyAlpha;this.flipY=e.flipY;this.unpackAlignment=e.unpackAlignment;this.colorSpace=e.colorSpace;this.userData=JSON.parse(JSON.stringify(e.userData));this.needsUpdate=true;return this}toJSON(e){const t=e===void 0||typeof e==="string";if(!t&&e.textures[this.uuid]!==void 0){return e.textures[this.uuid]}const n={metadata:{version:4.6,type:"Texture",generator:"Texture.toJSON"},uuid:this.uuid,name:this.name,image:this.source.toJSON(e).uuid,mapping:this.mapping,channel:this.channel,repeat:[this.repeat.x,this.repeat.y],offset:[this.offset.x,this.offset.y],center:[this.center.x,this.center.y],rotation:this.rotation,wrap:[this.wrapS,this.wrapT],format:this.format,internalFormat:this.internalFormat,type:this.type,colorSpace:this.colorSpace,minFilter:this.minFilter,magFilter:this.magFilter,anisotropy:this.anisotropy,flipY:this.flipY,generateMipmaps:this.generateMipmaps,premultiplyAlpha:this.premultiplyAlpha,unpackAlignment:this.unpackAlignment};if(Object.keys(this.userData).length>0)n.userData=this.userData;if(!t){e.textures[this.uuid]=n}return n}dispose(){this.dispatchEvent({type:"dispose"})}transformUv(e){if(this.mapping!==hu)return e;e.applyMatrix3(this.matrix);if(e.x<0||e.x>1){switch(this.wrapS){case ro:e.x=e.x-Math.floor(e.x);break;case Wt:e.x=e.x<0?0:1;break;case so:if(Math.abs(Math.floor(e.x)%2)===1){e.x=Math.ceil(e.x)-e.x}else{e.x=e.x-Math.floor(e.x)}break}}if(e.y<0||e.y>1){switch(this.wrapT){case ro:e.y=e.y-Math.floor(e.y);break;case Wt:e.y=e.y<0?0:1;break;case so:if(Math.abs(Math.floor(e.y)%2)===1){e.y=Math.ceil(e.y)-e.y}else{e.y=e.y-Math.floor(e.y)}break}}if(this.flipY){e.y=1-e.y}return e}set needsUpdate(e){if(e===true){this.version++;this.source.needsUpdate=true}}}yt.DEFAULT_IMAGE=null;yt.DEFAULT_MAPPING=hu;yt.DEFAULT_ANISOTROPY=1;class dt{constructor(e=0,t=0,n=0,r=1){dt.prototype.isVector4=true;this.x=e;this.y=t;this.z=n;this.w=r}get width(){return this.z}set width(e){this.z=e}get height(){return this.w}set height(e){this.w=e}set(e,t,n,r){this.x=e;this.y=t;this.z=n;this.w=r;return this}setScalar(e){this.x=e;this.y=e;this.z=e;this.w=e;return this}setX(e){this.x=e;return this}setY(e){this.y=e;return this}setZ(e){this.z=e;return this}setW(e){this.w=e;return this}setComponent(e,t){switch(e){case 0:this.x=t;break;case 1:this.y=t;break;case 2:this.z=t;break;case 3:this.w=t;break;default:throw new Error("index is out of range: "+e)}return this}getComponent(e){switch(e){case 0:return this.x;case 1:return this.y;case 2:return this.z;case 3:return this.w;default:throw new Error("index is out of range: "+e)}}clone(){return new this.constructor(this.x,this.y,this.z,this.w)}copy(e){this.x=e.x;this.y=e.y;this.z=e.z;this.w=e.w!==void 0?e.w:1;return this}add(e){this.x+=e.x;this.y+=e.y;this.z+=e.z;this.w+=e.w;return this}addScalar(e){this.x+=e;this.y+=e;this.z+=e;this.w+=e;return this}addVectors(e,t){this.x=e.x+t.x;this.y=e.y+t.y;this.z=e.z+t.z;this.w=e.w+t.w;return this}addScaledVector(e,t){this.x+=e.x*t;this.y+=e.y*t;this.z+=e.z*t;this.w+=e.w*t;return this}sub(e){this.x-=e.x;this.y-=e.y;this.z-=e.z;this.w-=e.w;return this}subScalar(e){this.x-=e;this.y-=e;this.z-=e;this.w-=e;return this}subVectors(e,t){this.x=e.x-t.x;this.y=e.y-t.y;this.z=e.z-t.z;this.w=e.w-t.w;return this}multiply(e){this.x*=e.x;this.y*=e.y;this.z*=e.z;this.w*=e.w;return this}multiplyScalar(e){this.x*=e;this.y*=e;this.z*=e;this.w*=e;return this}applyMatrix4(e){const t=this.x,n=this.y,r=this.z,s=this.w;const o=e.elements;this.x=o[0]*t+o[4]*n+o[8]*r+o[12]*s;this.y=o[1]*t+o[5]*n+o[9]*r+o[13]*s;this.z=o[2]*t+o[6]*n+o[10]*r+o[14]*s;this.w=o[3]*t+o[7]*n+o[11]*r+o[15]*s;return this}divideScalar(e){return this.multiplyScalar(1/e)}setAxisAngleFromQuaternion(e){this.w=2*Math.acos(e.w);const t=Math.sqrt(1-e.w*e.w);if(t<1e-4){this.x=1;this.y=0;this.z=0}else{this.x=e.x/t;this.y=e.y/t;this.z=e.z/t}return this}setAxisAngleFromRotationMatrix(e){let t,n,r,s;const o=.01,a=.1,l=e.elements,c=l[0],u=l[4],h=l[8],p=l[1],m=l[5],g=l[9],S=l[2],f=l[6],d=l[10];if(Math.abs(u-p)<o&&Math.abs(h-S)<o&&Math.abs(g-f)<o){if(Math.abs(u+p)<a&&Math.abs(h+S)<a&&Math.abs(g+f)<a&&Math.abs(c+m+d-3)<a){this.set(1,0,0,0);return this}t=Math.PI;const M=(c+1)/2;const T=(m+1)/2;const D=(d+1)/2;const C=(u+p)/4;const b=(h+S)/4;const z=(g+f)/4;if(M>T&&M>D){if(M<o){n=0;r=.707106781;s=.707106781}else{n=Math.sqrt(M);r=C/n;s=b/n}}else if(T>D){if(T<o){n=.707106781;r=0;s=.707106781}else{r=Math.sqrt(T);n=C/r;s=z/r}}else{if(D<o){n=.707106781;r=.707106781;s=0}else{s=Math.sqrt(D);n=b/s;r=z/s}}this.set(n,r,s,t);return this}let A=Math.sqrt((f-g)*(f-g)+(h-S)*(h-S)+(p-u)*(p-u));if(Math.abs(A)<.001)A=1;this.x=(f-g)/A;this.y=(h-S)/A;this.z=(p-u)/A;this.w=Math.acos((c+m+d-1)/2);return this}min(e){this.x=Math.min(this.x,e.x);this.y=Math.min(this.y,e.y);this.z=Math.min(this.z,e.z);this.w=Math.min(this.w,e.w);return this}max(e){this.x=Math.max(this.x,e.x);this.y=Math.max(this.y,e.y);this.z=Math.max(this.z,e.z);this.w=Math.max(this.w,e.w);return this}clamp(e,t){this.x=Math.max(e.x,Math.min(t.x,this.x));this.y=Math.max(e.y,Math.min(t.y,this.y));this.z=Math.max(e.z,Math.min(t.z,this.z));this.w=Math.max(e.w,Math.min(t.w,this.w));return this}clampScalar(e,t){this.x=Math.max(e,Math.min(t,this.x));this.y=Math.max(e,Math.min(t,this.y));this.z=Math.max(e,Math.min(t,this.z));this.w=Math.max(e,Math.min(t,this.w));return this}clampLength(e,t){const n=this.length();return this.divideScalar(n||1).multiplyScalar(Math.max(e,Math.min(t,n)))}floor(){this.x=Math.floor(this.x);this.y=Math.floor(this.y);this.z=Math.floor(this.z);this.w=Math.floor(this.w);return this}ceil(){this.x=Math.ceil(this.x);this.y=Math.ceil(this.y);this.z=Math.ceil(this.z);this.w=Math.ceil(this.w);return this}round(){this.x=Math.round(this.x);this.y=Math.round(this.y);this.z=Math.round(this.z);this.w=Math.round(this.w);return this}roundToZero(){this.x=Math.trunc(this.x);this.y=Math.trunc(this.y);this.z=Math.trunc(this.z);this.w=Math.trunc(this.w);return this}negate(){this.x=-this.x;this.y=-this.y;this.z=-this.z;this.w=-this.w;return this}dot(e){return this.x*e.x+this.y*e.y+this.z*e.z+this.w*e.w}lengthSq(){return this.x*this.x+this.y*this.y+this.z*this.z+this.w*this.w}length(){return Math.sqrt(this.x*this.x+this.y*this.y+this.z*this.z+this.w*this.w)}manhattanLength(){return Math.abs(this.x)+Math.abs(this.y)+Math.abs(this.z)+Math.abs(this.w)}normalize(){return this.divideScalar(this.length()||1)}setLength(e){return this.normalize().multiplyScalar(e)}lerp(e,t){this.x+=(e.x-this.x)*t;this.y+=(e.y-this.y)*t;this.z+=(e.z-this.z)*t;this.w+=(e.w-this.w)*t;return this}lerpVectors(e,t,n){this.x=e.x+(t.x-e.x)*n;this.y=e.y+(t.y-e.y)*n;this.z=e.z+(t.z-e.z)*n;this.w=e.w+(t.w-e.w)*n;return this}equals(e){return e.x===this.x&&e.y===this.y&&e.z===this.z&&e.w===this.w}fromArray(e,t=0){this.x=e[t];this.y=e[t+1];this.z=e[t+2];this.w=e[t+3];return this}toArray(e=[],t=0){e[t]=this.x;e[t+1]=this.y;e[t+2]=this.z;e[t+3]=this.w;return e}fromBufferAttribute(e,t){this.x=e.getX(t);this.y=e.getY(t);this.z=e.getZ(t);this.w=e.getW(t);return this}random(){this.x=Math.random();this.y=Math.random();this.z=Math.random();this.w=Math.random();return this}*[Symbol.iterator](){yield this.x;yield this.y;yield this.z;yield this.w}}class Nd extends tr{constructor(e=1,t=1,n={}){super();this.isRenderTarget=true;this.width=e;this.height=t;this.depth=1;this.scissor=new dt(0,0,e,t);this.scissorTest=false;this.viewport=new dt(0,0,e,t);const r={width:e,height:t,depth:1};n=Object.assign({generateMipmaps:false,internalFormat:null,minFilter:Ct,depthBuffer:true,stencilBuffer:false,depthTexture:null,samples:0,count:1},n);const s=new yt(r,n.mapping,n.wrapS,n.wrapT,n.magFilter,n.minFilter,n.format,n.type,n.anisotropy,n.colorSpace);s.flipY=false;s.generateMipmaps=n.generateMipmaps;s.internalFormat=n.internalFormat;this.textures=[];const o=n.count;for(let a=0;a<o;a++){this.textures[a]=s.clone();this.textures[a].isRenderTargetTexture=true}this.depthBuffer=n.depthBuffer;this.stencilBuffer=n.stencilBuffer;this.depthTexture=n.depthTexture;this.samples=n.samples}get texture(){return this.textures[0]}set texture(e){this.textures[0]=e}setSize(e,t,n=1){if(this.width!==e||this.height!==t||this.depth!==n){this.width=e;this.height=t;this.depth=n;for(let r=0,s=this.textures.length;r<s;r++){this.textures[r].image.width=e;this.textures[r].image.height=t;this.textures[r].image.depth=n}this.dispose()}this.viewport.set(0,0,e,t);this.scissor.set(0,0,e,t)}clone(){return new this.constructor().copy(this)}copy(e){this.width=e.width;this.height=e.height;this.depth=e.depth;this.scissor.copy(e.scissor);this.scissorTest=e.scissorTest;this.viewport.copy(e.viewport);this.textures.length=0;for(let n=0,r=e.textures.length;n<r;n++){this.textures[n]=e.textures[n].clone();this.textures[n].isRenderTargetTexture=true}const t=Object.assign({},e.texture.image);this.texture.source=new yu(t);this.depthBuffer=e.depthBuffer;this.stencilBuffer=e.stencilBuffer;if(e.depthTexture!==null)this.depthTexture=e.depthTexture.clone();this.samples=e.samples;return this}dispose(){this.dispatchEvent({type:"dispose"})}}class tn extends Nd{constructor(e=1,t=1,n={}){super(e,t,n);this.isWebGLRenderTarget=true}}class Tu extends yt{constructor(e=null,t=1,n=1,r=1){super(null);this.isDataArrayTexture=true;this.image={data:e,width:t,height:n,depth:r};this.magFilter=Et;this.minFilter=Et;this.wrapR=Wt;this.generateMipmaps=false;this.flipY=false;this.unpackAlignment=1}}class Id extends yt{constructor(e=null,t=1,n=1,r=1){super(null);this.isData3DTexture=true;this.image={data:e,width:t,height:n,depth:r};this.magFilter=Et;this.minFilter=Et;this.wrapR=Wt;this.generateMipmaps=false;this.flipY=false;this.unpackAlignment=1}}class Br{constructor(e=0,t=0,n=0,r=1){this.isQuaternion=true;this._x=e;this._y=t;this._z=n;this._w=r}static slerpFlat(e,t,n,r,s,o,a){let l=n[r+0],c=n[r+1],u=n[r+2],h=n[r+3];const p=s[o+0],m=s[o+1],g=s[o+2],S=s[o+3];if(a===0){e[t+0]=l;e[t+1]=c;e[t+2]=u;e[t+3]=h;return}if(a===1){e[t+0]=p;e[t+1]=m;e[t+2]=g;e[t+3]=S;return}if(h!==S||l!==p||c!==m||u!==g){let f=1-a;const d=l*p+c*m+u*g+h*S,A=d>=0?1:-1,M=1-d*d;if(M>Number.EPSILON){const D=Math.sqrt(M),C=Math.atan2(D,d*A);f=Math.sin(f*C)/D;a=Math.sin(a*C)/D}const T=a*A;l=l*f+p*T;c=c*f+m*T;u=u*f+g*T;h=h*f+S*T;if(f===1-a){const D=1/Math.sqrt(l*l+c*c+u*u+h*h);l*=D;c*=D;u*=D;h*=D}}e[t]=l;e[t+1]=c;e[t+2]=u;e[t+3]=h}static multiplyQuaternionsFlat(e,t,n,r,s,o){const a=n[r];const l=n[r+1];const c=n[r+2];const u=n[r+3];const h=s[o];const p=s[o+1];const m=s[o+2];const g=s[o+3];e[t]=a*g+u*h+l*m-c*p;e[t+1]=l*g+u*p+c*h-a*m;e[t+2]=c*g+u*m+a*p-l*h;e[t+3]=u*g-a*h-l*p-c*m;return e}get x(){return this._x}set x(e){this._x=e;this._onChangeCallback()}get y(){return this._y}set y(e){this._y=e;this._onChangeCallback()}get z(){return this._z}set z(e){this._z=e;this._onChangeCallback()}get w(){return this._w}set w(e){this._w=e;this._onChangeCallback()}set(e,t,n,r){this._x=e;this._y=t;this._z=n;this._w=r;this._onChangeCallback();return this}clone(){return new this.constructor(this._x,this._y,this._z,this._w)}copy(e){this._x=e.x;this._y=e.y;this._z=e.z;this._w=e.w;this._onChangeCallback();return this}setFromEuler(e,t=true){const n=e._x,r=e._y,s=e._z,o=e._order;const a=Math.cos;const l=Math.sin;const c=a(n/2);const u=a(r/2);const h=a(s/2);const p=l(n/2);const m=l(r/2);const g=l(s/2);switch(o){case"XYZ":this._x=p*u*h+c*m*g;this._y=c*m*h-p*u*g;this._z=c*u*g+p*m*h;this._w=c*u*h-p*m*g;break;case"YXZ":this._x=p*u*h+c*m*g;this._y=c*m*h-p*u*g;this._z=c*u*g-p*m*h;this._w=c*u*h+p*m*g;break;case"ZXY":this._x=p*u*h-c*m*g;this._y=c*m*h+p*u*g;this._z=c*u*g+p*m*h;this._w=c*u*h-p*m*g;break;case"ZYX":this._x=p*u*h-c*m*g;this._y=c*m*h+p*u*g;this._z=c*u*g-p*m*h;this._w=c*u*h+p*m*g;break;case"YZX":this._x=p*u*h+c*m*g;this._y=c*m*h+p*u*g;this._z=c*u*g-p*m*h;this._w=c*u*h-p*m*g;break;case"XZY":this._x=p*u*h-c*m*g;this._y=c*m*h-p*u*g;this._z=c*u*g+p*m*h;this._w=c*u*h+p*m*g;break;default:console.warn("THREE.Quaternion: .setFromEuler() encountered an unknown order: "+o)}if(t===true)this._onChangeCallback();return this}setFromAxisAngle(e,t){const n=t/2,r=Math.sin(n);this._x=e.x*r;this._y=e.y*r;this._z=e.z*r;this._w=Math.cos(n);this._onChangeCallback();return this}setFromRotationMatrix(e){const t=e.elements,n=t[0],r=t[4],s=t[8],o=t[1],a=t[5],l=t[9],c=t[2],u=t[6],h=t[10],p=n+a+h;if(p>0){const m=.5/Math.sqrt(p+1);this._w=.25/m;this._x=(u-l)*m;this._y=(s-c)*m;this._z=(o-r)*m}else if(n>a&&n>h){const m=2*Math.sqrt(1+n-a-h);this._w=(u-l)/m;this._x=.25*m;this._y=(r+o)/m;this._z=(s+c)/m}else if(a>h){const m=2*Math.sqrt(1+a-n-h);this._w=(s-c)/m;this._x=(r+o)/m;this._y=.25*m;this._z=(l+u)/m}else{const m=2*Math.sqrt(1+h-n-a);this._w=(o-r)/m;this._x=(s+c)/m;this._y=(l+u)/m;this._z=.25*m}this._onChangeCallback();return this}setFromUnitVectors(e,t){let n=e.dot(t)+1;if(n<Number.EPSILON){n=0;if(Math.abs(e.x)>Math.abs(e.z)){this._x=-e.y;this._y=e.x;this._z=0;this._w=n}else{this._x=0;this._y=-e.z;this._z=e.y;this._w=n}}else{this._x=e.y*t.z-e.z*t.y;this._y=e.z*t.x-e.x*t.z;this._z=e.x*t.y-e.y*t.x;this._w=n}return this.normalize()}angleTo(e){return 2*Math.acos(Math.abs(xt(this.dot(e),-1,1)))}rotateTowards(e,t){const n=this.angleTo(e);if(n===0)return this;const r=Math.min(1,t/n);this.slerp(e,r);return this}identity(){return this.set(0,0,0,1)}invert(){return this.conjugate()}conjugate(){this._x*=-1;this._y*=-1;this._z*=-1;this._onChangeCallback();return this}dot(e){return this._x*e._x+this._y*e._y+this._z*e._z+this._w*e._w}lengthSq(){return this._x*this._x+this._y*this._y+this._z*this._z+this._w*this._w}length(){return Math.sqrt(this._x*this._x+this._y*this._y+this._z*this._z+this._w*this._w)}normalize(){let e=this.length();if(e===0){this._x=0;this._y=0;this._z=0;this._w=1}else{e=1/e;this._x=this._x*e;this._y=this._y*e;this._z=this._z*e;this._w=this._w*e}this._onChangeCallback();return this}multiply(e){return this.multiplyQuaternions(this,e)}premultiply(e){return this.multiplyQuaternions(e,this)}multiplyQuaternions(e,t){const n=e._x,r=e._y,s=e._z,o=e._w;const a=t._x,l=t._y,c=t._z,u=t._w;this._x=n*u+o*a+r*c-s*l;this._y=r*u+o*l+s*a-n*c;this._z=s*u+o*c+n*l-r*a;this._w=o*u-n*a-r*l-s*c;this._onChangeCallback();return this}slerp(e,t){if(t===0)return this;if(t===1)return this.copy(e);const n=this._x,r=this._y,s=this._z,o=this._w;let a=o*e._w+n*e._x+r*e._y+s*e._z;if(a<0){this._w=-e._w;this._x=-e._x;this._y=-e._y;this._z=-e._z;a=-a}else{this.copy(e)}if(a>=1){this._w=o;this._x=n;this._y=r;this._z=s;return this}const l=1-a*a;if(l<=Number.EPSILON){const m=1-t;this._w=m*o+t*this._w;this._x=m*n+t*this._x;this._y=m*r+t*this._y;this._z=m*s+t*this._z;this.normalize();return this}const c=Math.sqrt(l);const u=Math.atan2(c,a);const h=Math.sin((1-t)*u)/c,p=Math.sin(t*u)/c;this._w=o*h+this._w*p;this._x=n*h+this._x*p;this._y=r*h+this._y*p;this._z=s*h+this._z*p;this._onChangeCallback();return this}slerpQuaternions(e,t,n){return this.copy(e).slerp(t,n)}random(){const e=2*Math.PI*Math.random();const t=2*Math.PI*Math.random();const n=Math.random();const r=Math.sqrt(1-n);const s=Math.sqrt(n);return this.set(r*Math.sin(e),r*Math.cos(e),s*Math.sin(t),s*Math.cos(t))}equals(e){return e._x===this._x&&e._y===this._y&&e._z===this._z&&e._w===this._w}fromArray(e,t=0){this._x=e[t];this._y=e[t+1];this._z=e[t+2];this._w=e[t+3];this._onChangeCallback();return this}toArray(e=[],t=0){e[t]=this._x;e[t+1]=this._y;e[t+2]=this._z;e[t+3]=this._w;return e}fromBufferAttribute(e,t){this._x=e.getX(t);this._y=e.getY(t);this._z=e.getZ(t);this._w=e.getW(t);this._onChangeCallback();return this}toJSON(){return this.toArray()}_onChange(e){this._onChangeCallback=e;return this}_onChangeCallback(){}*[Symbol.iterator](){yield this._x;yield this._y;yield this._z;yield this._w}}class L{constructor(e=0,t=0,n=0){L.prototype.isVector3=true;this.x=e;this.y=t;this.z=n}set(e,t,n){if(n===void 0)n=this.z;this.x=e;this.y=t;this.z=n;return this}setScalar(e){this.x=e;this.y=e;this.z=e;return this}setX(e){this.x=e;return this}setY(e){this.y=e;return this}setZ(e){this.z=e;return this}setComponent(e,t){switch(e){case 0:this.x=t;break;case 1:this.y=t;break;case 2:this.z=t;break;default:throw new Error("index is out of range: "+e)}return this}getComponent(e){switch(e){case 0:return this.x;case 1:return this.y;case 2:return this.z;default:throw new Error("index is out of range: "+e)}}clone(){return new this.constructor(this.x,this.y,this.z)}copy(e){this.x=e.x;this.y=e.y;this.z=e.z;return this}add(e){this.x+=e.x;this.y+=e.y;this.z+=e.z;return this}addScalar(e){this.x+=e;this.y+=e;this.z+=e;return this}addVectors(e,t){this.x=e.x+t.x;this.y=e.y+t.y;this.z=e.z+t.z;return this}addScaledVector(e,t){this.x+=e.x*t;this.y+=e.y*t;this.z+=e.z*t;return this}sub(e){this.x-=e.x;this.y-=e.y;this.z-=e.z;return this}subScalar(e){this.x-=e;this.y-=e;this.z-=e;return this}subVectors(e,t){this.x=e.x-t.x;this.y=e.y-t.y;this.z=e.z-t.z;return this}multiply(e){this.x*=e.x;this.y*=e.y;this.z*=e.z;return this}multiplyScalar(e){this.x*=e;this.y*=e;this.z*=e;return this}multiplyVectors(e,t){this.x=e.x*t.x;this.y=e.y*t.y;this.z=e.z*t.z;return this}applyEuler(e){return this.applyQuaternion(Fl.setFromEuler(e))}applyAxisAngle(e,t){return this.applyQuaternion(Fl.setFromAxisAngle(e,t))}applyMatrix3(e){const t=this.x,n=this.y,r=this.z;const s=e.elements;this.x=s[0]*t+s[3]*n+s[6]*r;this.y=s[1]*t+s[4]*n+s[7]*r;this.z=s[2]*t+s[5]*n+s[8]*r;return this}applyNormalMatrix(e){return this.applyMatrix3(e).normalize()}applyMatrix4(e){const t=this.x,n=this.y,r=this.z;const s=e.elements;const o=1/(s[3]*t+s[7]*n+s[11]*r+s[15]);this.x=(s[0]*t+s[4]*n+s[8]*r+s[12])*o;this.y=(s[1]*t+s[5]*n+s[9]*r+s[13])*o;this.z=(s[2]*t+s[6]*n+s[10]*r+s[14])*o;return this}applyQuaternion(e){const t=this.x,n=this.y,r=this.z;const s=e.x,o=e.y,a=e.z,l=e.w;const c=2*(o*r-a*n);const u=2*(a*t-s*r);const h=2*(s*n-o*t);this.x=t+l*c+o*h-a*u;this.y=n+l*u+a*c-s*h;this.z=r+l*h+s*u-o*c;return this}project(e){return this.applyMatrix4(e.matrixWorldInverse).applyMatrix4(e.projectionMatrix)}unproject(e){return this.applyMatrix4(e.projectionMatrixInverse).applyMatrix4(e.matrixWorld)}transformDirection(e){const t=this.x,n=this.y,r=this.z;const s=e.elements;this.x=s[0]*t+s[4]*n+s[8]*r;this.y=s[1]*t+s[5]*n+s[9]*r;this.z=s[2]*t+s[6]*n+s[10]*r;return this.normalize()}divide(e){this.x/=e.x;this.y/=e.y;this.z/=e.z;return this}divideScalar(e){return this.multiplyScalar(1/e)}min(e){this.x=Math.min(this.x,e.x);this.y=Math.min(this.y,e.y);this.z=Math.min(this.z,e.z);return this}max(e){this.x=Math.max(this.x,e.x);this.y=Math.max(this.y,e.y);this.z=Math.max(this.z,e.z);return this}clamp(e,t){this.x=Math.max(e.x,Math.min(t.x,this.x));this.y=Math.max(e.y,Math.min(t.y,this.y));this.z=Math.max(e.z,Math.min(t.z,this.z));return this}clampScalar(e,t){this.x=Math.max(e,Math.min(t,this.x));this.y=Math.max(e,Math.min(t,this.y));this.z=Math.max(e,Math.min(t,this.z));return this}clampLength(e,t){const n=this.length();return this.divideScalar(n||1).multiplyScalar(Math.max(e,Math.min(t,n)))}floor(){this.x=Math.floor(this.x);this.y=Math.floor(this.y);this.z=Math.floor(this.z);return this}ceil(){this.x=Math.ceil(this.x);this.y=Math.ceil(this.y);this.z=Math.ceil(this.z);return this}round(){this.x=Math.round(this.x);this.y=Math.round(this.y);this.z=Math.round(this.z);return this}roundToZero(){this.x=Math.trunc(this.x);this.y=Math.trunc(this.y);this.z=Math.trunc(this.z);return this}negate(){this.x=-this.x;this.y=-this.y;this.z=-this.z;return this}dot(e){return this.x*e.x+this.y*e.y+this.z*e.z}lengthSq(){return this.x*this.x+this.y*this.y+this.z*this.z}length(){return Math.sqrt(this.x*this.x+this.y*this.y+this.z*this.z)}manhattanLength(){return Math.abs(this.x)+Math.abs(this.y)+Math.abs(this.z)}normalize(){return this.divideScalar(this.length()||1)}setLength(e){return this.normalize().multiplyScalar(e)}lerp(e,t){this.x+=(e.x-this.x)*t;this.y+=(e.y-this.y)*t;this.z+=(e.z-this.z)*t;return this}lerpVectors(e,t,n){this.x=e.x+(t.x-e.x)*n;this.y=e.y+(t.y-e.y)*n;this.z=e.z+(t.z-e.z)*n;return this}cross(e){return this.crossVectors(this,e)}crossVectors(e,t){const n=e.x,r=e.y,s=e.z;const o=t.x,a=t.y,l=t.z;this.x=r*l-s*a;this.y=s*o-n*l;this.z=n*a-r*o;return this}projectOnVector(e){const t=e.lengthSq();if(t===0)return this.set(0,0,0);const n=e.dot(this)/t;return this.copy(e).multiplyScalar(n)}projectOnPlane(e){_a.copy(this).projectOnVector(e);return this.sub(_a)}reflect(e){return this.sub(_a.copy(e).multiplyScalar(2*this.dot(e)))}angleTo(e){const t=Math.sqrt(this.lengthSq()*e.lengthSq());if(t===0)return Math.PI/2;const n=this.dot(e)/t;return Math.acos(xt(n,-1,1))}distanceTo(e){return Math.sqrt(this.distanceToSquared(e))}distanceToSquared(e){const t=this.x-e.x,n=this.y-e.y,r=this.z-e.z;return t*t+n*n+r*r}manhattanDistanceTo(e){return Math.abs(this.x-e.x)+Math.abs(this.y-e.y)+Math.abs(this.z-e.z)}setFromSpherical(e){return this.setFromSphericalCoords(e.radius,e.phi,e.theta)}setFromSphericalCoords(e,t,n){const r=Math.sin(t)*e;this.x=r*Math.sin(n);this.y=Math.cos(t)*e;this.z=r*Math.cos(n);return this}setFromCylindrical(e){return this.setFromCylindricalCoords(e.radius,e.theta,e.y)}setFromCylindricalCoords(e,t,n){this.x=e*Math.sin(t);this.y=n;this.z=e*Math.cos(t);return this}setFromMatrixPosition(e){const t=e.elements;this.x=t[12];this.y=t[13];this.z=t[14];return this}setFromMatrixScale(e){const t=this.setFromMatrixColumn(e,0).length();const n=this.setFromMatrixColumn(e,1).length();const r=this.setFromMatrixColumn(e,2).length();this.x=t;this.y=n;this.z=r;return this}setFromMatrixColumn(e,t){return this.fromArray(e.elements,t*4)}setFromMatrix3Column(e,t){return this.fromArray(e.elements,t*3)}setFromEuler(e){this.x=e._x;this.y=e._y;this.z=e._z;return this}setFromColor(e){this.x=e.r;this.y=e.g;this.z=e.b;return this}equals(e){return e.x===this.x&&e.y===this.y&&e.z===this.z}fromArray(e,t=0){this.x=e[t];this.y=e[t+1];this.z=e[t+2];return this}toArray(e=[],t=0){e[t]=this.x;e[t+1]=this.y;e[t+2]=this.z;return e}fromBufferAttribute(e,t){this.x=e.getX(t);this.y=e.getY(t);this.z=e.getZ(t);return this}random(){this.x=Math.random();this.y=Math.random();this.z=Math.random();return this}randomDirection(){const e=Math.random()*Math.PI*2;const t=Math.random()*2-1;const n=Math.sqrt(1-t*t);this.x=n*Math.cos(e);this.y=t;this.z=n*Math.sin(e);return this}*[Symbol.iterator](){yield this.x;yield this.y;yield this.z}}const _a=new L;const Fl=new Br;class zr{constructor(e=new L(Infinity,Infinity,Infinity),t=new L(-Infinity,-Infinity,-Infinity)){this.isBox3=true;this.min=e;this.max=t}set(e,t){this.min.copy(e);this.max.copy(t);return this}setFromArray(e){this.makeEmpty();for(let t=0,n=e.length;t<n;t+=3){this.expandByPoint(Gt.fromArray(e,t))}return this}setFromBufferAttribute(e){this.makeEmpty();for(let t=0,n=e.count;t<n;t++){this.expandByPoint(Gt.fromBufferAttribute(e,t))}return this}setFromPoints(e){this.makeEmpty();for(let t=0,n=e.length;t<n;t++){this.expandByPoint(e[t])}return this}setFromCenterAndSize(e,t){const n=Gt.copy(t).multiplyScalar(.5);this.min.copy(e).sub(n);this.max.copy(e).add(n);return this}setFromObject(e,t=false){this.makeEmpty();return this.expandByObject(e,t)}clone(){return new this.constructor().copy(this)}copy(e){this.min.copy(e.min);this.max.copy(e.max);return this}makeEmpty(){this.min.x=this.min.y=this.min.z=Infinity;this.max.x=this.max.y=this.max.z=-Infinity;return this}isEmpty(){return this.max.x<this.min.x||this.max.y<this.min.y||this.max.z<this.min.z}getCenter(e){return this.isEmpty()?e.set(0,0,0):e.addVectors(this.min,this.max).multiplyScalar(.5)}getSize(e){return this.isEmpty()?e.set(0,0,0):e.subVectors(this.max,this.min)}expandByPoint(e){this.min.min(e);this.max.max(e);return this}expandByVector(e){this.min.sub(e);this.max.add(e);return this}expandByScalar(e){this.min.addScalar(-e);this.max.addScalar(e);return this}expandByObject(e,t=false){e.updateWorldMatrix(false,false);const n=e.geometry;if(n!==void 0){const s=n.getAttribute("position");if(t===true&&s!==void 0&&e.isInstancedMesh!==true){for(let o=0,a=s.count;o<a;o++){if(e.isMesh===true){e.getVertexPosition(o,Gt)}else{Gt.fromBufferAttribute(s,o)}Gt.applyMatrix4(e.matrixWorld);this.expandByPoint(Gt)}}else{if(e.boundingBox!==void 0){if(e.boundingBox===null){e.computeBoundingBox()}Kr.copy(e.boundingBox)}else{if(n.boundingBox===null){n.computeBoundingBox()}Kr.copy(n.boundingBox)}Kr.applyMatrix4(e.matrixWorld);this.union(Kr)}}const r=e.children;for(let s=0,o=r.length;s<o;s++){this.expandByObject(r[s],t)}return this}containsPoint(e){return e.x<this.min.x||e.x>this.max.x||e.y<this.min.y||e.y>this.max.y||e.z<this.min.z||e.z>this.max.z?false:true}containsBox(e){return this.min.x<=e.min.x&&e.max.x<=this.max.x&&this.min.y<=e.min.y&&e.max.y<=this.max.y&&this.min.z<=e.min.z&&e.max.z<=this.max.z}getParameter(e,t){return t.set((e.x-this.min.x)/(this.max.x-this.min.x),(e.y-this.min.y)/(this.max.y-this.min.y),(e.z-this.min.z)/(this.max.z-this.min.z))}intersectsBox(e){return e.max.x<this.min.x||e.min.x>this.max.x||e.max.y<this.min.y||e.min.y>this.max.y||e.max.z<this.min.z||e.min.z>this.max.z?false:true}intersectsSphere(e){this.clampPoint(e.center,Gt);return Gt.distanceToSquared(e.center)<=e.radius*e.radius}intersectsPlane(e){let t,n;if(e.normal.x>0){t=e.normal.x*this.min.x;n=e.normal.x*this.max.x}else{t=e.normal.x*this.max.x;n=e.normal.x*this.min.x}if(e.normal.y>0){t+=e.normal.y*this.min.y;n+=e.normal.y*this.max.y}else{t+=e.normal.y*this.max.y;n+=e.normal.y*this.min.y}if(e.normal.z>0){t+=e.normal.z*this.min.z;n+=e.normal.z*this.max.z}else{t+=e.normal.z*this.max.z;n+=e.normal.z*this.min.z}return t<=-e.constant&&n>=-e.constant}intersectsTriangle(e){if(this.isEmpty()){return false}this.getCenter(lr);Zr.subVectors(this.max,lr);fi.subVectors(e.a,lr);pi.subVectors(e.b,lr);mi.subVectors(e.c,lr);En.subVectors(pi,fi);yn.subVectors(mi,pi);Wn.subVectors(fi,mi);let t=[0,-En.z,En.y,0,-yn.z,yn.y,0,-Wn.z,Wn.y,En.z,0,-En.x,yn.z,0,-yn.x,Wn.z,0,-Wn.x,-En.y,En.x,0,-yn.y,yn.x,0,-Wn.y,Wn.x,0];if(!ga(t,fi,pi,mi,Zr)){return false}t=[1,0,0,0,1,0,0,0,1];if(!ga(t,fi,pi,mi,Zr)){return false}Jr.crossVectors(En,yn);t=[Jr.x,Jr.y,Jr.z];return ga(t,fi,pi,mi,Zr)}clampPoint(e,t){return t.copy(e).clamp(this.min,this.max)}distanceToPoint(e){return this.clampPoint(e,Gt).distanceTo(e)}getBoundingSphere(e){if(this.isEmpty()){e.makeEmpty()}else{this.getCenter(e.center);e.radius=this.getSize(Gt).length()*.5}return e}intersect(e){this.min.max(e.min);this.max.min(e.max);if(this.isEmpty())this.makeEmpty();return this}union(e){this.min.min(e.min);this.max.max(e.max);return this}applyMatrix4(e){if(this.isEmpty())return this;sn[0].set(this.min.x,this.min.y,this.min.z).applyMatrix4(e);sn[1].set(this.min.x,this.min.y,this.max.z).applyMatrix4(e);sn[2].set(this.min.x,this.max.y,this.min.z).applyMatrix4(e);sn[3].set(this.min.x,this.max.y,this.max.z).applyMatrix4(e);sn[4].set(this.max.x,this.min.y,this.min.z).applyMatrix4(e);sn[5].set(this.max.x,this.min.y,this.max.z).applyMatrix4(e);sn[6].set(this.max.x,this.max.y,this.min.z).applyMatrix4(e);sn[7].set(this.max.x,this.max.y,this.max.z).applyMatrix4(e);this.setFromPoints(sn);return this}translate(e){this.min.add(e);this.max.add(e);return this}equals(e){return e.min.equals(this.min)&&e.max.equals(this.max)}}const sn=[new L,new L,new L,new L,new L,new L,new L,new L];const Gt=new L;const Kr=new zr;const fi=new L;const pi=new L;const mi=new L;const En=new L;const yn=new L;const Wn=new L;const lr=new L;const Zr=new L;const Jr=new L;const Xn=new L;function ga(i,e,t,n,r){for(let s=0,o=i.length-3;s<=o;s+=3){Xn.fromArray(i,s);const a=r.x*Math.abs(Xn.x)+r.y*Math.abs(Xn.y)+r.z*Math.abs(Xn.z);const l=e.dot(Xn);const c=t.dot(Xn);const u=n.dot(Xn);if(Math.max(-Math.max(l,c,u),Math.min(l,c,u))>a){return false}}return true}const Fd=new zr;const cr=new L;const va=new L;class Ys{constructor(e=new L,t=-1){this.isSphere=true;this.center=e;this.radius=t}set(e,t){this.center.copy(e);this.radius=t;return this}setFromPoints(e,t){const n=this.center;if(t!==void 0){n.copy(t)}else{Fd.setFromPoints(e).getCenter(n)}let r=0;for(let s=0,o=e.length;s<o;s++){r=Math.max(r,n.distanceToSquared(e[s]))}this.radius=Math.sqrt(r);return this}copy(e){this.center.copy(e.center);this.radius=e.radius;return this}isEmpty(){return this.radius<0}makeEmpty(){this.center.set(0,0,0);this.radius=-1;return this}containsPoint(e){return e.distanceToSquared(this.center)<=this.radius*this.radius}distanceToPoint(e){return e.distanceTo(this.center)-this.radius}intersectsSphere(e){const t=this.radius+e.radius;return e.center.distanceToSquared(this.center)<=t*t}intersectsBox(e){return e.intersectsSphere(this)}intersectsPlane(e){return Math.abs(e.distanceToPoint(this.center))<=this.radius}clampPoint(e,t){const n=this.center.distanceToSquared(e);t.copy(e);if(n>this.radius*this.radius){t.sub(this.center).normalize();t.multiplyScalar(this.radius).add(this.center)}return t}getBoundingBox(e){if(this.isEmpty()){e.makeEmpty();return e}e.set(this.center,this.center);e.expandByScalar(this.radius);return e}applyMatrix4(e){this.center.applyMatrix4(e);this.radius=this.radius*e.getMaxScaleOnAxis();return this}translate(e){this.center.add(e);return this}expandByPoint(e){if(this.isEmpty()){this.center.copy(e);this.radius=0;return this}cr.subVectors(e,this.center);const t=cr.lengthSq();if(t>this.radius*this.radius){const n=Math.sqrt(t);const r=(n-this.radius)*.5;this.center.addScaledVector(cr,r/n);this.radius+=r}return this}union(e){if(e.isEmpty()){return this}if(this.isEmpty()){this.copy(e);return this}if(this.center.equals(e.center)===true){this.radius=Math.max(this.radius,e.radius)}else{va.subVectors(e.center,this.center).setLength(e.radius);this.expandByPoint(cr.copy(e.center).add(va));this.expandByPoint(cr.copy(e.center).sub(va))}return this}equals(e){return e.center.equals(this.center)&&e.radius===this.radius}clone(){return new this.constructor().copy(this)}}const an=new L;const xa=new L;const Qr=new L;const Tn=new L;const Sa=new L;const es=new L;const Ma=new L;class Au{constructor(e=new L,t=new L(0,0,-1)){this.origin=e;this.direction=t}set(e,t){this.origin.copy(e);this.direction.copy(t);return this}copy(e){this.origin.copy(e.origin);this.direction.copy(e.direction);return this}at(e,t){return t.copy(this.origin).addScaledVector(this.direction,e)}lookAt(e){this.direction.copy(e).sub(this.origin).normalize();return this}recast(e){this.origin.copy(this.at(e,an));return this}closestPointToPoint(e,t){t.subVectors(e,this.origin);const n=t.dot(this.direction);if(n<0){return t.copy(this.origin)}return t.copy(this.origin).addScaledVector(this.direction,n)}distanceToPoint(e){return Math.sqrt(this.distanceSqToPoint(e))}distanceSqToPoint(e){const t=an.subVectors(e,this.origin).dot(this.direction);if(t<0){return this.origin.distanceToSquared(e)}an.copy(this.origin).addScaledVector(this.direction,t);return an.distanceToSquared(e)}distanceSqToSegment(e,t,n,r){xa.copy(e).add(t).multiplyScalar(.5);Qr.copy(t).sub(e).normalize();Tn.copy(this.origin).sub(xa);const s=e.distanceTo(t)*.5;const o=-this.direction.dot(Qr);const a=Tn.dot(this.direction);const l=-Tn.dot(Qr);const c=Tn.lengthSq();const u=Math.abs(1-o*o);let h,p,m,g;if(u>0){h=o*l-a;p=o*a-l;g=s*u;if(h>=0){if(p>=-g){if(p<=g){const S=1/u;h*=S;p*=S;m=h*(h+o*p+2*a)+p*(o*h+p+2*l)+c}else{p=s;h=Math.max(0,-(o*p+a));m=-h*h+p*(p+2*l)+c}}else{p=-s;h=Math.max(0,-(o*p+a));m=-h*h+p*(p+2*l)+c}}else{if(p<=-g){h=Math.max(0,-(-o*s+a));p=h>0?-s:Math.min(Math.max(-s,-l),s);m=-h*h+p*(p+2*l)+c}else if(p<=g){h=0;p=Math.min(Math.max(-s,-l),s);m=p*(p+2*l)+c}else{h=Math.max(0,-(o*s+a));p=h>0?s:Math.min(Math.max(-s,-l),s);m=-h*h+p*(p+2*l)+c}}}else{p=o>0?-s:s;h=Math.max(0,-(o*p+a));m=-h*h+p*(p+2*l)+c}if(n){n.copy(this.origin).addScaledVector(this.direction,h)}if(r){r.copy(xa).addScaledVector(Qr,p)}return m}intersectSphere(e,t){an.subVectors(e.center,this.origin);const n=an.dot(this.direction);const r=an.dot(an)-n*n;const s=e.radius*e.radius;if(r>s)return null;const o=Math.sqrt(s-r);const a=n-o;const l=n+o;if(l<0)return null;if(a<0)return this.at(l,t);return this.at(a,t)}intersectsSphere(e){return this.distanceSqToPoint(e.center)<=e.radius*e.radius}distanceToPlane(e){const t=e.normal.dot(this.direction);if(t===0){if(e.distanceToPoint(this.origin)===0){return 0}return null}const n=-(this.origin.dot(e.normal)+e.constant)/t;return n>=0?n:null}intersectPlane(e,t){const n=this.distanceToPlane(e);if(n===null){return null}return this.at(n,t)}intersectsPlane(e){const t=e.distanceToPoint(this.origin);if(t===0){return true}const n=e.normal.dot(this.direction);if(n*t<0){return true}return false}intersectBox(e,t){let n,r,s,o,a,l;const c=1/this.direction.x,u=1/this.direction.y,h=1/this.direction.z;const p=this.origin;if(c>=0){n=(e.min.x-p.x)*c;r=(e.max.x-p.x)*c}else{n=(e.max.x-p.x)*c;r=(e.min.x-p.x)*c}if(u>=0){s=(e.min.y-p.y)*u;o=(e.max.y-p.y)*u}else{s=(e.max.y-p.y)*u;o=(e.min.y-p.y)*u}if(n>o||s>r)return null;if(s>n||isNaN(n))n=s;if(o<r||isNaN(r))r=o;if(h>=0){a=(e.min.z-p.z)*h;l=(e.max.z-p.z)*h}else{a=(e.max.z-p.z)*h;l=(e.min.z-p.z)*h}if(n>l||a>r)return null;if(a>n||n!==n)n=a;if(l<r||r!==r)r=l;if(r<0)return null;return this.at(n>=0?n:r,t)}intersectsBox(e){return this.intersectBox(e,an)!==null}intersectTriangle(e,t,n,r,s){Sa.subVectors(t,e);es.subVectors(n,e);Ma.crossVectors(Sa,es);let o=this.direction.dot(Ma);let a;if(o>0){if(r)return null;a=1}else if(o<0){a=-1;o=-o}else{return null}Tn.subVectors(this.origin,e);const l=a*this.direction.dot(es.crossVectors(Tn,es));if(l<0){return null}const c=a*this.direction.dot(Sa.cross(Tn));if(c<0){return null}if(l+c>o){return null}const u=-a*Tn.dot(Ma);if(u<0){return null}return this.at(u/o,s)}applyMatrix4(e){this.origin.applyMatrix4(e);this.direction.transformDirection(e);return this}equals(e){return e.origin.equals(this.origin)&&e.direction.equals(this.direction)}clone(){return new this.constructor().copy(this)}}class nt{constructor(e,t,n,r,s,o,a,l,c,u,h,p,m,g,S,f){nt.prototype.isMatrix4=true;this.elements=[1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1];if(e!==void 0){this.set(e,t,n,r,s,o,a,l,c,u,h,p,m,g,S,f)}}set(e,t,n,r,s,o,a,l,c,u,h,p,m,g,S,f){const d=this.elements;d[0]=e;d[4]=t;d[8]=n;d[12]=r;d[1]=s;d[5]=o;d[9]=a;d[13]=l;d[2]=c;d[6]=u;d[10]=h;d[14]=p;d[3]=m;d[7]=g;d[11]=S;d[15]=f;return this}identity(){this.set(1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1);return this}clone(){return new nt().fromArray(this.elements)}copy(e){const t=this.elements;const n=e.elements;t[0]=n[0];t[1]=n[1];t[2]=n[2];t[3]=n[3];t[4]=n[4];t[5]=n[5];t[6]=n[6];t[7]=n[7];t[8]=n[8];t[9]=n[9];t[10]=n[10];t[11]=n[11];t[12]=n[12];t[13]=n[13];t[14]=n[14];t[15]=n[15];return this}copyPosition(e){const t=this.elements,n=e.elements;t[12]=n[12];t[13]=n[13];t[14]=n[14];return this}setFromMatrix3(e){const t=e.elements;this.set(t[0],t[3],t[6],0,t[1],t[4],t[7],0,t[2],t[5],t[8],0,0,0,0,1);return this}extractBasis(e,t,n){e.setFromMatrixColumn(this,0);t.setFromMatrixColumn(this,1);n.setFromMatrixColumn(this,2);return this}makeBasis(e,t,n){this.set(e.x,t.x,n.x,0,e.y,t.y,n.y,0,e.z,t.z,n.z,0,0,0,0,1);return this}extractRotation(e){const t=this.elements;const n=e.elements;const r=1/_i.setFromMatrixColumn(e,0).length();const s=1/_i.setFromMatrixColumn(e,1).length();const o=1/_i.setFromMatrixColumn(e,2).length();t[0]=n[0]*r;t[1]=n[1]*r;t[2]=n[2]*r;t[3]=0;t[4]=n[4]*s;t[5]=n[5]*s;t[6]=n[6]*s;t[7]=0;t[8]=n[8]*o;t[9]=n[9]*o;t[10]=n[10]*o;t[11]=0;t[12]=0;t[13]=0;t[14]=0;t[15]=1;return this}makeRotationFromEuler(e){const t=this.elements;const n=e.x,r=e.y,s=e.z;const o=Math.cos(n),a=Math.sin(n);const l=Math.cos(r),c=Math.sin(r);const u=Math.cos(s),h=Math.sin(s);if(e.order==="XYZ"){const p=o*u,m=o*h,g=a*u,S=a*h;t[0]=l*u;t[4]=-l*h;t[8]=c;t[1]=m+g*c;t[5]=p-S*c;t[9]=-a*l;t[2]=S-p*c;t[6]=g+m*c;t[10]=o*l}else if(e.order==="YXZ"){const p=l*u,m=l*h,g=c*u,S=c*h;t[0]=p+S*a;t[4]=g*a-m;t[8]=o*c;t[1]=o*h;t[5]=o*u;t[9]=-a;t[2]=m*a-g;t[6]=S+p*a;t[10]=o*l}else if(e.order==="ZXY"){const p=l*u,m=l*h,g=c*u,S=c*h;t[0]=p-S*a;t[4]=-o*h;t[8]=g+m*a;t[1]=m+g*a;t[5]=o*u;t[9]=S-p*a;t[2]=-o*c;t[6]=a;t[10]=o*l}else if(e.order==="ZYX"){const p=o*u,m=o*h,g=a*u,S=a*h;t[0]=l*u;t[4]=g*c-m;t[8]=p*c+S;t[1]=l*h;t[5]=S*c+p;t[9]=m*c-g;t[2]=-c;t[6]=a*l;t[10]=o*l}else if(e.order==="YZX"){const p=o*l,m=o*c,g=a*l,S=a*c;t[0]=l*u;t[4]=S-p*h;t[8]=g*h+m;t[1]=h;t[5]=o*u;t[9]=-a*u;t[2]=-c*u;t[6]=m*h+g;t[10]=p-S*h}else if(e.order==="XZY"){const p=o*l,m=o*c,g=a*l,S=a*c;t[0]=l*u;t[4]=-h;t[8]=c*u;t[1]=p*h+S;t[5]=o*u;t[9]=m*h-g;t[2]=g*h-m;t[6]=a*u;t[10]=S*h+p}t[3]=0;t[7]=0;t[11]=0;t[12]=0;t[13]=0;t[14]=0;t[15]=1;return this}makeRotationFromQuaternion(e){return this.compose(Od,e,Bd)}lookAt(e,t,n){const r=this.elements;Lt.subVectors(e,t);if(Lt.lengthSq()===0){Lt.z=1}Lt.normalize();An.crossVectors(n,Lt);if(An.lengthSq()===0){if(Math.abs(n.z)===1){Lt.x+=1e-4}else{Lt.z+=1e-4}Lt.normalize();An.crossVectors(n,Lt)}An.normalize();ts.crossVectors(Lt,An);r[0]=An.x;r[4]=ts.x;r[8]=Lt.x;r[1]=An.y;r[5]=ts.y;r[9]=Lt.y;r[2]=An.z;r[6]=ts.z;r[10]=Lt.z;return this}multiply(e){return this.multiplyMatrices(this,e)}premultiply(e){return this.multiplyMatrices(e,this)}multiplyMatrices(e,t){const n=e.elements;const r=t.elements;const s=this.elements;const o=n[0],a=n[4],l=n[8],c=n[12];const u=n[1],h=n[5],p=n[9],m=n[13];const g=n[2],S=n[6],f=n[10],d=n[14];const A=n[3],M=n[7],T=n[11],D=n[15];const C=r[0],b=r[4],z=r[8],ee=r[12];const v=r[1],y=r[5],te=r[9],J=r[13];const R=r[2],k=r[6],H=r[10],j=r[14];const V=r[3],X=r[7],Y=r[11],se=r[15];s[0]=o*C+a*v+l*R+c*V;s[4]=o*b+a*y+l*k+c*X;s[8]=o*z+a*te+l*H+c*Y;s[12]=o*ee+a*J+l*j+c*se;s[1]=u*C+h*v+p*R+m*V;s[5]=u*b+h*y+p*k+m*X;s[9]=u*z+h*te+p*H+m*Y;s[13]=u*ee+h*J+p*j+m*se;s[2]=g*C+S*v+f*R+d*V;s[6]=g*b+S*y+f*k+d*X;s[10]=g*z+S*te+f*H+d*Y;s[14]=g*ee+S*J+f*j+d*se;s[3]=A*C+M*v+T*R+D*V;s[7]=A*b+M*y+T*k+D*X;s[11]=A*z+M*te+T*H+D*Y;s[15]=A*ee+M*J+T*j+D*se;return this}multiplyScalar(e){const t=this.elements;t[0]*=e;t[4]*=e;t[8]*=e;t[12]*=e;t[1]*=e;t[5]*=e;t[9]*=e;t[13]*=e;t[2]*=e;t[6]*=e;t[10]*=e;t[14]*=e;t[3]*=e;t[7]*=e;t[11]*=e;t[15]*=e;return this}determinant(){const e=this.elements;const t=e[0],n=e[4],r=e[8],s=e[12];const o=e[1],a=e[5],l=e[9],c=e[13];const u=e[2],h=e[6],p=e[10],m=e[14];const g=e[3],S=e[7],f=e[11],d=e[15];return g*(+s*l*h-r*c*h-s*a*p+n*c*p+r*a*m-n*l*m)+S*(+t*l*m-t*c*p+s*o*p-r*o*m+r*c*u-s*l*u)+f*(+t*c*h-t*a*m-s*o*h+n*o*m+s*a*u-n*c*u)+d*(-r*a*u-t*l*h+t*a*p+r*o*h-n*o*p+n*l*u)}transpose(){const e=this.elements;let t;t=e[1];e[1]=e[4];e[4]=t;t=e[2];e[2]=e[8];e[8]=t;t=e[6];e[6]=e[9];e[9]=t;t=e[3];e[3]=e[12];e[12]=t;t=e[7];e[7]=e[13];e[13]=t;t=e[11];e[11]=e[14];e[14]=t;return this}setPosition(e,t,n){const r=this.elements;if(e.isVector3){r[12]=e.x;r[13]=e.y;r[14]=e.z}else{r[12]=e;r[13]=t;r[14]=n}return this}invert(){const e=this.elements,t=e[0],n=e[1],r=e[2],s=e[3],o=e[4],a=e[5],l=e[6],c=e[7],u=e[8],h=e[9],p=e[10],m=e[11],g=e[12],S=e[13],f=e[14],d=e[15],A=h*f*c-S*p*c+S*l*m-a*f*m-h*l*d+a*p*d,M=g*p*c-u*f*c-g*l*m+o*f*m+u*l*d-o*p*d,T=u*S*c-g*h*c+g*a*m-o*S*m-u*a*d+o*h*d,D=g*h*l-u*S*l-g*a*p+o*S*p+u*a*f-o*h*f;const C=t*A+n*M+r*T+s*D;if(C===0)return this.set(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0);const b=1/C;e[0]=A*b;e[1]=(S*p*s-h*f*s-S*r*m+n*f*m+h*r*d-n*p*d)*b;e[2]=(a*f*s-S*l*s+S*r*c-n*f*c-a*r*d+n*l*d)*b;e[3]=(h*l*s-a*p*s-h*r*c+n*p*c+a*r*m-n*l*m)*b;e[4]=M*b;e[5]=(u*f*s-g*p*s+g*r*m-t*f*m-u*r*d+t*p*d)*b;e[6]=(g*l*s-o*f*s-g*r*c+t*f*c+o*r*d-t*l*d)*b;e[7]=(o*p*s-u*l*s+u*r*c-t*p*c-o*r*m+t*l*m)*b;e[8]=T*b;e[9]=(g*h*s-u*S*s-g*n*m+t*S*m+u*n*d-t*h*d)*b;e[10]=(o*S*s-g*a*s+g*n*c-t*S*c-o*n*d+t*a*d)*b;e[11]=(u*a*s-o*h*s-u*n*c+t*h*c+o*n*m-t*a*m)*b;e[12]=D*b;e[13]=(u*S*r-g*h*r+g*n*p-t*S*p-u*n*f+t*h*f)*b;e[14]=(g*a*r-o*S*r-g*n*l+t*S*l+o*n*f-t*a*f)*b;e[15]=(o*h*r-u*a*r+u*n*l-t*h*l-o*n*p+t*a*p)*b;return this}scale(e){const t=this.elements;const n=e.x,r=e.y,s=e.z;t[0]*=n;t[4]*=r;t[8]*=s;t[1]*=n;t[5]*=r;t[9]*=s;t[2]*=n;t[6]*=r;t[10]*=s;t[3]*=n;t[7]*=r;t[11]*=s;return this}getMaxScaleOnAxis(){const e=this.elements;const t=e[0]*e[0]+e[1]*e[1]+e[2]*e[2];const n=e[4]*e[4]+e[5]*e[5]+e[6]*e[6];const r=e[8]*e[8]+e[9]*e[9]+e[10]*e[10];return Math.sqrt(Math.max(t,n,r))}makeTranslation(e,t,n){if(e.isVector3){this.set(1,0,0,e.x,0,1,0,e.y,0,0,1,e.z,0,0,0,1)}else{this.set(1,0,0,e,0,1,0,t,0,0,1,n,0,0,0,1)}return this}makeRotationX(e){const t=Math.cos(e),n=Math.sin(e);this.set(1,0,0,0,0,t,-n,0,0,n,t,0,0,0,0,1);return this}makeRotationY(e){const t=Math.cos(e),n=Math.sin(e);this.set(t,0,n,0,0,1,0,0,-n,0,t,0,0,0,0,1);return this}makeRotationZ(e){const t=Math.cos(e),n=Math.sin(e);this.set(t,-n,0,0,n,t,0,0,0,0,1,0,0,0,0,1);return this}makeRotationAxis(e,t){const n=Math.cos(t);const r=Math.sin(t);const s=1-n;const o=e.x,a=e.y,l=e.z;const c=s*o,u=s*a;this.set(c*o+n,c*a-r*l,c*l+r*a,0,c*a+r*l,u*a+n,u*l-r*o,0,c*l-r*a,u*l+r*o,s*l*l+n,0,0,0,0,1);return this}makeScale(e,t,n){this.set(e,0,0,0,0,t,0,0,0,0,n,0,0,0,0,1);return this}makeShear(e,t,n,r,s,o){this.set(1,n,s,0,e,1,o,0,t,r,1,0,0,0,0,1);return this}compose(e,t,n){const r=this.elements;const s=t._x,o=t._y,a=t._z,l=t._w;const c=s+s,u=o+o,h=a+a;const p=s*c,m=s*u,g=s*h;const S=o*u,f=o*h,d=a*h;const A=l*c,M=l*u,T=l*h;const D=n.x,C=n.y,b=n.z;r[0]=(1-(S+d))*D;r[1]=(m+T)*D;r[2]=(g-M)*D;r[3]=0;r[4]=(m-T)*C;r[5]=(1-(p+d))*C;r[6]=(f+A)*C;r[7]=0;r[8]=(g+M)*b;r[9]=(f-A)*b;r[10]=(1-(p+S))*b;r[11]=0;r[12]=e.x;r[13]=e.y;r[14]=e.z;r[15]=1;return this}decompose(e,t,n){const r=this.elements;let s=_i.set(r[0],r[1],r[2]).length();const o=_i.set(r[4],r[5],r[6]).length();const a=_i.set(r[8],r[9],r[10]).length();const l=this.determinant();if(l<0)s=-s;e.x=r[12];e.y=r[13];e.z=r[14];Ht.copy(this);const c=1/s;const u=1/o;const h=1/a;Ht.elements[0]*=c;Ht.elements[1]*=c;Ht.elements[2]*=c;Ht.elements[4]*=u;Ht.elements[5]*=u;Ht.elements[6]*=u;Ht.elements[8]*=h;Ht.elements[9]*=h;Ht.elements[10]*=h;t.setFromRotationMatrix(Ht);n.x=s;n.y=o;n.z=a;return this}makePerspective(e,t,n,r,s,o,a=vn){const l=this.elements;const c=2*s/(t-e);const u=2*s/(n-r);const h=(t+e)/(t-e);const p=(n+r)/(n-r);let m,g;if(a===vn){m=-(o+s)/(o-s);g=-2*o*s/(o-s)}else if(a===Ds){m=-o/(o-s);g=-o*s/(o-s)}else{throw new Error("THREE.Matrix4.makePerspective(): Invalid coordinate system: "+a)}l[0]=c;l[4]=0;l[8]=h;l[12]=0;l[1]=0;l[5]=u;l[9]=p;l[13]=0;l[2]=0;l[6]=0;l[10]=m;l[14]=g;l[3]=0;l[7]=0;l[11]=-1;l[15]=0;return this}makeOrthographic(e,t,n,r,s,o,a=vn){const l=this.elements;const c=1/(t-e);const u=1/(n-r);const h=1/(o-s);const p=(t+e)*c;const m=(n+r)*u;let g,S;if(a===vn){g=(o+s)*h;S=-2*h}else if(a===Ds){g=s*h;S=-1*h}else{throw new Error("THREE.Matrix4.makeOrthographic(): Invalid coordinate system: "+a)}l[0]=2*c;l[4]=0;l[8]=0;l[12]=-p;l[1]=0;l[5]=2*u;l[9]=0;l[13]=-m;l[2]=0;l[6]=0;l[10]=S;l[14]=-g;l[3]=0;l[7]=0;l[11]=0;l[15]=1;return this}equals(e){const t=this.elements;const n=e.elements;for(let r=0;r<16;r++){if(t[r]!==n[r])return false}return true}fromArray(e,t=0){for(let n=0;n<16;n++){this.elements[n]=e[n+t]}return this}toArray(e=[],t=0){const n=this.elements;e[t]=n[0];e[t+1]=n[1];e[t+2]=n[2];e[t+3]=n[3];e[t+4]=n[4];e[t+5]=n[5];e[t+6]=n[6];e[t+7]=n[7];e[t+8]=n[8];e[t+9]=n[9];e[t+10]=n[10];e[t+11]=n[11];e[t+12]=n[12];e[t+13]=n[13];e[t+14]=n[14];e[t+15]=n[15];return e}}const _i=new L;const Ht=new nt;const Od=new L(0,0,0);const Bd=new L(1,1,1);const An=new L;const ts=new L;const Lt=new L;const Ol=new nt;const Bl=new Br;class nn{constructor(e=0,t=0,n=0,r=nn.DEFAULT_ORDER){this.isEuler=true;this._x=e;this._y=t;this._z=n;this._order=r}get x(){return this._x}set x(e){this._x=e;this._onChangeCallback()}get y(){return this._y}set y(e){this._y=e;this._onChangeCallback()}get z(){return this._z}set z(e){this._z=e;this._onChangeCallback()}get order(){return this._order}set order(e){this._order=e;this._onChangeCallback()}set(e,t,n,r=this._order){this._x=e;this._y=t;this._z=n;this._order=r;this._onChangeCallback();return this}clone(){return new this.constructor(this._x,this._y,this._z,this._order)}copy(e){this._x=e._x;this._y=e._y;this._z=e._z;this._order=e._order;this._onChangeCallback();return this}setFromRotationMatrix(e,t=this._order,n=true){const r=e.elements;const s=r[0],o=r[4],a=r[8];const l=r[1],c=r[5],u=r[9];const h=r[2],p=r[6],m=r[10];switch(t){case"XYZ":this._y=Math.asin(xt(a,-1,1));if(Math.abs(a)<.9999999){this._x=Math.atan2(-u,m);this._z=Math.atan2(-o,s)}else{this._x=Math.atan2(p,c);this._z=0}break;case"YXZ":this._x=Math.asin(-xt(u,-1,1));if(Math.abs(u)<.9999999){this._y=Math.atan2(a,m);this._z=Math.atan2(l,c)}else{this._y=Math.atan2(-h,s);this._z=0}break;case"ZXY":this._x=Math.asin(xt(p,-1,1));if(Math.abs(p)<.9999999){this._y=Math.atan2(-h,m);this._z=Math.atan2(-o,c)}else{this._y=0;this._z=Math.atan2(l,s)}break;case"ZYX":this._y=Math.asin(-xt(h,-1,1));if(Math.abs(h)<.9999999){this._x=Math.atan2(p,m);this._z=Math.atan2(l,s)}else{this._x=0;this._z=Math.atan2(-o,c)}break;case"YZX":this._z=Math.asin(xt(l,-1,1));if(Math.abs(l)<.9999999){this._x=Math.atan2(-u,c);this._y=Math.atan2(-h,s)}else{this._x=0;this._y=Math.atan2(a,m)}break;case"XZY":this._z=Math.asin(-xt(o,-1,1));if(Math.abs(o)<.9999999){this._x=Math.atan2(p,c);this._y=Math.atan2(a,s)}else{this._x=Math.atan2(-u,m);this._y=0}break;default:console.warn("THREE.Euler: .setFromRotationMatrix() encountered an unknown order: "+t)}this._order=t;if(n===true)this._onChangeCallback();return this}setFromQuaternion(e,t,n){Ol.makeRotationFromQuaternion(e);return this.setFromRotationMatrix(Ol,t,n)}setFromVector3(e,t=this._order){return this.set(e.x,e.y,e.z,t)}reorder(e){Bl.setFromEuler(this);return this.setFromQuaternion(Bl,e)}equals(e){return e._x===this._x&&e._y===this._y&&e._z===this._z&&e._order===this._order}fromArray(e){this._x=e[0];this._y=e[1];this._z=e[2];if(e[3]!==void 0)this._order=e[3];this._onChangeCallback();return this}toArray(e=[],t=0){e[t]=this._x;e[t+1]=this._y;e[t+2]=this._z;e[t+3]=this._order;return e}_onChange(e){this._onChangeCallback=e;return this}_onChangeCallback(){}*[Symbol.iterator](){yield this._x;yield this._y;yield this._z;yield this._order}}nn.DEFAULT_ORDER="XYZ";class bu{constructor(){this.mask=1|0}set(e){this.mask=(1<<e|0)>>>0}enable(e){this.mask|=1<<e|0}enableAll(){this.mask=4294967295|0}toggle(e){this.mask^=1<<e|0}disable(e){this.mask&=~(1<<e|0)}disableAll(){this.mask=0}test(e){return(this.mask&e.mask)!==0}isEnabled(e){return(this.mask&(1<<e|0))!==0}}let zd=0;const zl=new L;const gi=new Br;const on=new nt;const ns=new L;const ur=new L;const Gd=new L;const Hd=new Br;const Gl=new L(1,0,0);const Hl=new L(0,1,0);const Vl=new L(0,0,1);const Vd={type:"added"};const kd={type:"removed"};const Ea={type:"childadded",child:null};const ya={type:"childremoved",child:null};class mt extends tr{constructor(){super();this.isObject3D=true;Object.defineProperty(this,"id",{value:zd++});this.uuid=Or();this.name="";this.type="Object3D";this.parent=null;this.children=[];this.up=mt.DEFAULT_UP.clone();const e=new L;const t=new nn;const n=new Br;const r=new L(1,1,1);function s(){n.setFromEuler(t,false)}function o(){t.setFromQuaternion(n,void 0,false)}t._onChange(s);n._onChange(o);Object.defineProperties(this,{position:{configurable:true,enumerable:true,value:e},rotation:{configurable:true,enumerable:true,value:t},quaternion:{configurable:true,enumerable:true,value:n},scale:{configurable:true,enumerable:true,value:r},modelViewMatrix:{value:new nt},normalMatrix:{value:new Be}});this.matrix=new nt;this.matrixWorld=new nt;this.matrixAutoUpdate=mt.DEFAULT_MATRIX_AUTO_UPDATE;this.matrixWorldAutoUpdate=mt.DEFAULT_MATRIX_WORLD_AUTO_UPDATE;this.matrixWorldNeedsUpdate=false;this.layers=new bu;this.visible=true;this.castShadow=false;this.receiveShadow=false;this.frustumCulled=true;this.renderOrder=0;this.animations=[];this.userData={}}onBeforeShadow(){}onAfterShadow(){}onBeforeRender(){}onAfterRender(){}applyMatrix4(e){if(this.matrixAutoUpdate)this.updateMatrix();this.matrix.premultiply(e);this.matrix.decompose(this.position,this.quaternion,this.scale)}applyQuaternion(e){this.quaternion.premultiply(e);return this}setRotationFromAxisAngle(e,t){this.quaternion.setFromAxisAngle(e,t)}setRotationFromEuler(e){this.quaternion.setFromEuler(e,true)}setRotationFromMatrix(e){this.quaternion.setFromRotationMatrix(e)}setRotationFromQuaternion(e){this.quaternion.copy(e)}rotateOnAxis(e,t){gi.setFromAxisAngle(e,t);this.quaternion.multiply(gi);return this}rotateOnWorldAxis(e,t){gi.setFromAxisAngle(e,t);this.quaternion.premultiply(gi);return this}rotateX(e){return this.rotateOnAxis(Gl,e)}rotateY(e){return this.rotateOnAxis(Hl,e)}rotateZ(e){return this.rotateOnAxis(Vl,e)}translateOnAxis(e,t){zl.copy(e).applyQuaternion(this.quaternion);this.position.add(zl.multiplyScalar(t));return this}translateX(e){return this.translateOnAxis(Gl,e)}translateY(e){return this.translateOnAxis(Hl,e)}translateZ(e){return this.translateOnAxis(Vl,e)}localToWorld(e){this.updateWorldMatrix(true,false);return e.applyMatrix4(this.matrixWorld)}worldToLocal(e){this.updateWorldMatrix(true,false);return e.applyMatrix4(on.copy(this.matrixWorld).invert())}lookAt(e,t,n){if(e.isVector3){ns.copy(e)}else{ns.set(e,t,n)}const r=this.parent;this.updateWorldMatrix(true,false);ur.setFromMatrixPosition(this.matrixWorld);if(this.isCamera||this.isLight){on.lookAt(ur,ns,this.up)}else{on.lookAt(ns,ur,this.up)}this.quaternion.setFromRotationMatrix(on);if(r){on.extractRotation(r.matrixWorld);gi.setFromRotationMatrix(on);this.quaternion.premultiply(gi.invert())}}add(e){if(arguments.length>1){for(let t=0;t<arguments.length;t++){this.add(arguments[t])}return this}if(e===this){console.error("THREE.Object3D.add: object can't be added as a child of itself.",e);return this}if(e&&e.isObject3D){if(e.parent!==null){e.parent.remove(e)}e.parent=this;this.children.push(e);e.dispatchEvent(Vd);Ea.child=e;this.dispatchEvent(Ea);Ea.child=null}else{console.error("THREE.Object3D.add: object not an instance of THREE.Object3D.",e)}return this}remove(e){if(arguments.length>1){for(let n=0;n<arguments.length;n++){this.remove(arguments[n])}return this}const t=this.children.indexOf(e);if(t!==-1){e.parent=null;this.children.splice(t,1);e.dispatchEvent(kd);ya.child=e;this.dispatchEvent(ya);ya.child=null}return this}removeFromParent(){const e=this.parent;if(e!==null){e.remove(this)}return this}clear(){return this.remove(...this.children)}attach(e){this.updateWorldMatrix(true,false);on.copy(this.matrixWorld).invert();if(e.parent!==null){e.parent.updateWorldMatrix(true,false);on.multiply(e.parent.matrixWorld)}e.applyMatrix4(on);this.add(e);e.updateWorldMatrix(false,true);return this}getObjectById(e){return this.getObjectByProperty("id",e)}getObjectByName(e){return this.getObjectByProperty("name",e)}getObjectByProperty(e,t){if(this[e]===t)return this;for(let n=0,r=this.children.length;n<r;n++){const s=this.children[n];const o=s.getObjectByProperty(e,t);if(o!==void 0){return o}}return void 0}getObjectsByProperty(e,t,n=[]){if(this[e]===t)n.push(this);const r=this.children;for(let s=0,o=r.length;s<o;s++){r[s].getObjectsByProperty(e,t,n)}return n}getWorldPosition(e){this.updateWorldMatrix(true,false);return e.setFromMatrixPosition(this.matrixWorld)}getWorldQuaternion(e){this.updateWorldMatrix(true,false);this.matrixWorld.decompose(ur,e,Gd);return e}getWorldScale(e){this.updateWorldMatrix(true,false);this.matrixWorld.decompose(ur,Hd,e);return e}getWorldDirection(e){this.updateWorldMatrix(true,false);const t=this.matrixWorld.elements;return e.set(t[8],t[9],t[10]).normalize()}raycast(){}traverse(e){e(this);const t=this.children;for(let n=0,r=t.length;n<r;n++){t[n].traverse(e)}}traverseVisible(e){if(this.visible===false)return;e(this);const t=this.children;for(let n=0,r=t.length;n<r;n++){t[n].traverseVisible(e)}}traverseAncestors(e){const t=this.parent;if(t!==null){e(t);t.traverseAncestors(e)}}updateMatrix(){this.matrix.compose(this.position,this.quaternion,this.scale);this.matrixWorldNeedsUpdate=true}updateMatrixWorld(e){if(this.matrixAutoUpdate)this.updateMatrix();if(this.matrixWorldNeedsUpdate||e){if(this.parent===null){this.matrixWorld.copy(this.matrix)}else{this.matrixWorld.multiplyMatrices(this.parent.matrixWorld,this.matrix)}this.matrixWorldNeedsUpdate=false;e=true}const t=this.children;for(let n=0,r=t.length;n<r;n++){const s=t[n];if(s.matrixWorldAutoUpdate===true||e===true){s.updateMatrixWorld(e)}}}updateWorldMatrix(e,t){const n=this.parent;if(e===true&&n!==null&&n.matrixWorldAutoUpdate===true){n.updateWorldMatrix(true,false)}if(this.matrixAutoUpdate)this.updateMatrix();if(this.parent===null){this.matrixWorld.copy(this.matrix)}else{this.matrixWorld.multiplyMatrices(this.parent.matrixWorld,this.matrix)}if(t===true){const r=this.children;for(let s=0,o=r.length;s<o;s++){const a=r[s];if(a.matrixWorldAutoUpdate===true){a.updateWorldMatrix(false,true)}}}}toJSON(e){const t=e===void 0||typeof e==="string";const n={};if(t){e={geometries:{},materials:{},textures:{},images:{},shapes:{},skeletons:{},animations:{},nodes:{}};n.metadata={version:4.6,type:"Object",generator:"Object3D.toJSON"}}const r={};r.uuid=this.uuid;r.type=this.type;if(this.name!=="")r.name=this.name;if(this.castShadow===true)r.castShadow=true;if(this.receiveShadow===true)r.receiveShadow=true;if(this.visible===false)r.visible=false;if(this.frustumCulled===false)r.frustumCulled=false;if(this.renderOrder!==0)r.renderOrder=this.renderOrder;if(Object.keys(this.userData).length>0)r.userData=this.userData;r.layers=this.layers.mask;r.matrix=this.matrix.toArray();r.up=this.up.toArray();if(this.matrixAutoUpdate===false)r.matrixAutoUpdate=false;if(this.isInstancedMesh){r.type="InstancedMesh";r.count=this.count;r.instanceMatrix=this.instanceMatrix.toJSON();if(this.instanceColor!==null)r.instanceColor=this.instanceColor.toJSON()}if(this.isBatchedMesh){r.type="BatchedMesh";r.perObjectFrustumCulled=this.perObjectFrustumCulled;r.sortObjects=this.sortObjects;r.drawRanges=this._drawRanges;r.reservedRanges=this._reservedRanges;r.visibility=this._visibility;r.active=this._active;r.bounds=this._bounds.map(a=>({boxInitialized:a.boxInitialized,boxMin:a.box.min.toArray(),boxMax:a.box.max.toArray(),sphereInitialized:a.sphereInitialized,sphereRadius:a.sphere.radius,sphereCenter:a.sphere.center.toArray()}));r.maxGeometryCount=this._maxGeometryCount;r.maxVertexCount=this._maxVertexCount;r.maxIndexCount=this._maxIndexCount;r.geometryInitialized=this._geometryInitialized;r.geometryCount=this._geometryCount;r.matricesTexture=this._matricesTexture.toJSON(e);if(this.boundingSphere!==null){r.boundingSphere={center:r.boundingSphere.center.toArray(),radius:r.boundingSphere.radius}}if(this.boundingBox!==null){r.boundingBox={min:r.boundingBox.min.toArray(),max:r.boundingBox.max.toArray()}}}function s(a,l){if(a[l.uuid]===void 0){a[l.uuid]=l.toJSON(e)}return l.uuid}if(this.isScene){if(this.background){if(this.background.isColor){r.background=this.background.toJSON()}else if(this.background.isTexture){r.background=this.background.toJSON(e).uuid}}if(this.environment&&this.environment.isTexture&&this.environment.isRenderTargetTexture!==true){r.environment=this.environment.toJSON(e).uuid}}else if(this.isMesh||this.isLine||this.isPoints){r.geometry=s(e.geometries,this.geometry);const a=this.geometry.parameters;if(a!==void 0&&a.shapes!==void 0){const l=a.shapes;if(Array.isArray(l)){for(let c=0,u=l.length;c<u;c++){const h=l[c];s(e.shapes,h)}}else{s(e.shapes,l)}}}if(this.isSkinnedMesh){r.bindMode=this.bindMode;r.bindMatrix=this.bindMatrix.toArray();if(this.skeleton!==void 0){s(e.skeletons,this.skeleton);r.skeleton=this.skeleton.uuid}}if(this.material!==void 0){if(Array.isArray(this.material)){const a=[];for(let l=0,c=this.material.length;l<c;l++){a.push(s(e.materials,this.material[l]))}r.material=a}else{r.material=s(e.materials,this.material)}}if(this.children.length>0){r.children=[];for(let a=0;a<this.children.length;a++){r.children.push(this.children[a].toJSON(e).object)}}if(this.animations.length>0){r.animations=[];for(let a=0;a<this.animations.length;a++){const l=this.animations[a];r.animations.push(s(e.animations,l))}}if(t){const a=o(e.geometries);const l=o(e.materials);const c=o(e.textures);const u=o(e.images);const h=o(e.shapes);const p=o(e.skeletons);const m=o(e.animations);const g=o(e.nodes);if(a.length>0)n.geometries=a;if(l.length>0)n.materials=l;if(c.length>0)n.textures=c;if(u.length>0)n.images=u;if(h.length>0)n.shapes=h;if(p.length>0)n.skeletons=p;if(m.length>0)n.animations=m;if(g.length>0)n.nodes=g}n.object=r;return n;function o(a){const l=[];for(const c in a){const u=a[c];delete u.metadata;l.push(u)}return l}}clone(e){return new this.constructor().copy(this,e)}copy(e,t=true){this.name=e.name;this.up.copy(e.up);this.position.copy(e.position);this.rotation.order=e.rotation.order;this.quaternion.copy(e.quaternion);this.scale.copy(e.scale);this.matrix.copy(e.matrix);this.matrixWorld.copy(e.matrixWorld);this.matrixAutoUpdate=e.matrixAutoUpdate;this.matrixWorldAutoUpdate=e.matrixWorldAutoUpdate;this.matrixWorldNeedsUpdate=e.matrixWorldNeedsUpdate;this.layers.mask=e.layers.mask;this.visible=e.visible;this.castShadow=e.castShadow;this.receiveShadow=e.receiveShadow;this.frustumCulled=e.frustumCulled;this.renderOrder=e.renderOrder;this.animations=e.animations.slice();this.userData=JSON.parse(JSON.stringify(e.userData));if(t===true){for(let n=0;n<e.children.length;n++){const r=e.children[n];this.add(r.clone())}}return this}}mt.DEFAULT_UP=new L(0,1,0);mt.DEFAULT_MATRIX_AUTO_UPDATE=true;mt.DEFAULT_MATRIX_WORLD_AUTO_UPDATE=true;const Vt=new L;const ln=new L;const Ta=new L;const cn=new L;const vi=new L;const xi=new L;const kl=new L;const Aa=new L;const ba=new L;const Ca=new L;class Qt{constructor(e=new L,t=new L,n=new L){this.a=e;this.b=t;this.c=n}static getNormal(e,t,n,r){r.subVectors(n,t);Vt.subVectors(e,t);r.cross(Vt);const s=r.lengthSq();if(s>0){return r.multiplyScalar(1/Math.sqrt(s))}return r.set(0,0,0)}static getBarycoord(e,t,n,r,s){Vt.subVectors(r,t);ln.subVectors(n,t);Ta.subVectors(e,t);const o=Vt.dot(Vt);const a=Vt.dot(ln);const l=Vt.dot(Ta);const c=ln.dot(ln);const u=ln.dot(Ta);const h=o*c-a*a;if(h===0){s.set(0,0,0);return null}const p=1/h;const m=(c*l-a*u)*p;const g=(o*u-a*l)*p;return s.set(1-m-g,g,m)}static containsPoint(e,t,n,r){if(this.getBarycoord(e,t,n,r,cn)===null){return false}return cn.x>=0&&cn.y>=0&&cn.x+cn.y<=1}static getInterpolation(e,t,n,r,s,o,a,l){if(this.getBarycoord(e,t,n,r,cn)===null){l.x=0;l.y=0;if("z"in l)l.z=0;if("w"in l)l.w=0;return null}l.setScalar(0);l.addScaledVector(s,cn.x);l.addScaledVector(o,cn.y);l.addScaledVector(a,cn.z);return l}static isFrontFacing(e,t,n,r){Vt.subVectors(n,t);ln.subVectors(e,t);return Vt.cross(ln).dot(r)<0?true:false}set(e,t,n){this.a.copy(e);this.b.copy(t);this.c.copy(n);return this}setFromPointsAndIndices(e,t,n,r){this.a.copy(e[t]);this.b.copy(e[n]);this.c.copy(e[r]);return this}setFromAttributeAndIndices(e,t,n,r){this.a.fromBufferAttribute(e,t);this.b.fromBufferAttribute(e,n);this.c.fromBufferAttribute(e,r);return this}clone(){return new this.constructor().copy(this)}copy(e){this.a.copy(e.a);this.b.copy(e.b);this.c.copy(e.c);return this}getArea(){Vt.subVectors(this.c,this.b);ln.subVectors(this.a,this.b);return Vt.cross(ln).length()*.5}getMidpoint(e){return e.addVectors(this.a,this.b).add(this.c).multiplyScalar(1/3)}getNormal(e){return Qt.getNormal(this.a,this.b,this.c,e)}getPlane(e){return e.setFromCoplanarPoints(this.a,this.b,this.c)}getBarycoord(e,t){return Qt.getBarycoord(e,this.a,this.b,this.c,t)}getInterpolation(e,t,n,r,s){return Qt.getInterpolation(e,this.a,this.b,this.c,t,n,r,s)}containsPoint(e){return Qt.containsPoint(e,this.a,this.b,this.c)}isFrontFacing(e){return Qt.isFrontFacing(this.a,this.b,this.c,e)}intersectsBox(e){return e.intersectsTriangle(this)}closestPointToPoint(e,t){const n=this.a,r=this.b,s=this.c;let o,a;vi.subVectors(r,n);xi.subVectors(s,n);Aa.subVectors(e,n);const l=vi.dot(Aa);const c=xi.dot(Aa);if(l<=0&&c<=0){return t.copy(n)}ba.subVectors(e,r);const u=vi.dot(ba);const h=xi.dot(ba);if(u>=0&&h<=u){return t.copy(r)}const p=l*h-u*c;if(p<=0&&l>=0&&u<=0){o=l/(l-u);return t.copy(n).addScaledVector(vi,o)}Ca.subVectors(e,s);const m=vi.dot(Ca);const g=xi.dot(Ca);if(g>=0&&m<=g){return t.copy(s)}const S=m*c-l*g;if(S<=0&&c>=0&&g<=0){a=c/(c-g);return t.copy(n).addScaledVector(xi,a)}const f=u*g-m*h;if(f<=0&&h-u>=0&&m-g>=0){kl.subVectors(s,r);a=(h-u)/(h-u+(m-g));return t.copy(r).addScaledVector(kl,a)}const d=1/(f+S+p);o=S*d;a=p*d;return t.copy(n).addScaledVector(vi,o).addScaledVector(xi,a)}equals(e){return e.a.equals(this.a)&&e.b.equals(this.b)&&e.c.equals(this.c)}}const Cu={"aliceblue":15792383,"antiquewhite":16444375,"aqua":65535,"aquamarine":8388564,"azure":15794175,"beige":16119260,"bisque":16770244,"black":0,"blanchedalmond":16772045,"blue":255,"blueviolet":9055202,"brown":10824234,"burlywood":14596231,"cadetblue":6266528,"chartreuse":8388352,"chocolate":13789470,"coral":16744272,"cornflowerblue":6591981,"cornsilk":16775388,"crimson":14423100,"cyan":65535,"darkblue":139,"darkcyan":35723,"darkgoldenrod":12092939,"darkgray":11119017,"darkgreen":25600,"darkgrey":11119017,"darkkhaki":12433259,"darkmagenta":9109643,"darkolivegreen":5597999,"darkorange":16747520,"darkorchid":10040012,"darkred":9109504,"darksalmon":15308410,"darkseagreen":9419919,"darkslateblue":4734347,"darkslategray":3100495,"darkslategrey":3100495,"darkturquoise":52945,"darkviolet":9699539,"deeppink":16716947,"deepskyblue":49151,"dimgray":6908265,"dimgrey":6908265,"dodgerblue":2003199,"firebrick":11674146,"floralwhite":16775920,"forestgreen":2263842,"fuchsia":16711935,"gainsboro":14474460,"ghostwhite":16316671,"gold":16766720,"goldenrod":14329120,"gray":8421504,"green":32768,"greenyellow":11403055,"grey":8421504,"honeydew":15794160,"hotpink":16738740,"indianred":13458524,"indigo":4915330,"ivory":16777200,"khaki":15787660,"lavender":15132410,"lavenderblush":16773365,"lawngreen":8190976,"lemonchiffon":16775885,"lightblue":11393254,"lightcoral":15761536,"lightcyan":14745599,"lightgoldenrodyellow":16448210,"lightgray":13882323,"lightgreen":9498256,"lightgrey":13882323,"lightpink":16758465,"lightsalmon":16752762,"lightseagreen":2142890,"lightskyblue":8900346,"lightslategray":7833753,"lightslategrey":7833753,"lightsteelblue":11584734,"lightyellow":16777184,"lime":65280,"limegreen":3329330,"linen":16445670,"magenta":16711935,"maroon":8388608,"mediumaquamarine":6737322,"mediumblue":205,"mediumorchid":12211667,"mediumpurple":9662683,"mediumseagreen":3978097,"mediumslateblue":8087790,"mediumspringgreen":64154,"mediumturquoise":4772300,"mediumvioletred":13047173,"midnightblue":1644912,"mintcream":16121850,"mistyrose":16770273,"moccasin":16770229,"navajowhite":16768685,"navy":128,"oldlace":16643558,"olive":8421376,"olivedrab":7048739,"orange":16753920,"orangered":16729344,"orchid":14315734,"palegoldenrod":15657130,"palegreen":10025880,"paleturquoise":11529966,"palevioletred":14381203,"papayawhip":16773077,"peachpuff":16767673,"peru":13468991,"pink":16761035,"plum":14524637,"powderblue":11591910,"purple":8388736,"rebeccapurple":6697881,"red":16711680,"rosybrown":12357519,"royalblue":4286945,"saddlebrown":9127187,"salmon":16416882,"sandybrown":16032864,"seagreen":3050327,"seashell":16774638,"sienna":10506797,"silver":12632256,"skyblue":8900331,"slateblue":6970061,"slategray":7372944,"slategrey":7372944,"snow":16775930,"springgreen":65407,"steelblue":4620980,"tan":13808780,"teal":32896,"thistle":14204888,"tomato":16737095,"turquoise":4251856,"violet":15631086,"wheat":16113331,"white":16777215,"whitesmoke":16119285,"yellow":16776960,"yellowgreen":10145074};const bn={h:0,s:0,l:0};const is={h:0,s:0,l:0};function wa(i,e,t){if(t<0)t+=1;if(t>1)t-=1;if(t<1/6)return i+(e-i)*6*t;if(t<1/2)return e;if(t<2/3)return i+(e-i)*6*(2/3-t);return i}class Ve{constructor(e,t,n){this.isColor=true;this.r=1;this.g=1;this.b=1;return this.set(e,t,n)}set(e,t,n){if(t===void 0&&n===void 0){const r=e;if(r&&r.isColor){this.copy(r)}else if(typeof r==="number"){this.setHex(r)}else if(typeof r==="string"){this.setStyle(r)}}else{this.setRGB(e,t,n)}return this}setScalar(e){this.r=e;this.g=e;this.b=e;return this}setHex(e,t=Kt){e=Math.floor(e);this.r=(e>>16&255)/255;this.g=(e>>8&255)/255;this.b=(e&255)/255;$e.toWorkingColorSpace(this,t);return this}setRGB(e,t,n,r=$e.workingColorSpace){this.r=e;this.g=t;this.b=n;$e.toWorkingColorSpace(this,r);return this}setHSL(e,t,n,r=$e.workingColorSpace){e=wd(e,1);t=xt(t,0,1);n=xt(n,0,1);if(t===0){this.r=this.g=this.b=n}else{const s=n<=.5?n*(1+t):n+t-n*t;const o=2*n-s;this.r=wa(o,s,e+1/3);this.g=wa(o,s,e);this.b=wa(o,s,e-1/3)}$e.toWorkingColorSpace(this,r);return this}setStyle(e,t=Kt){function n(s){if(s===void 0)return;if(parseFloat(s)<1){console.warn("THREE.Color: Alpha component of "+e+" will be ignored.")}}let r;if(r=/^(\w+)\(([^\)]*)\)/.exec(e)){let s;const o=r[1];const a=r[2];switch(o){case"rgb":case"rgba":if(s=/^\s*(\d+)\s*,\s*(\d+)\s*,\s*(\d+)\s*(?:,\s*(\d*\.?\d+)\s*)?$/.exec(a)){n(s[4]);return this.setRGB(Math.min(255,parseInt(s[1],10))/255,Math.min(255,parseInt(s[2],10))/255,Math.min(255,parseInt(s[3],10))/255,t)}if(s=/^\s*(\d+)\%\s*,\s*(\d+)\%\s*,\s*(\d+)\%\s*(?:,\s*(\d*\.?\d+)\s*)?$/.exec(a)){n(s[4]);return this.setRGB(Math.min(100,parseInt(s[1],10))/100,Math.min(100,parseInt(s[2],10))/100,Math.min(100,parseInt(s[3],10))/100,t)}break;case"hsl":case"hsla":if(s=/^\s*(\d*\.?\d+)\s*,\s*(\d*\.?\d+)\%\s*,\s*(\d*\.?\d+)\%\s*(?:,\s*(\d*\.?\d+)\s*)?$/.exec(a)){n(s[4]);return this.setHSL(parseFloat(s[1])/360,parseFloat(s[2])/100,parseFloat(s[3])/100,t)}break;default:console.warn("THREE.Color: Unknown color model "+e)}}else if(r=/^\#([A-Fa-f\d]+)$/.exec(e)){const s=r[1];const o=s.length;if(o===3){return this.setRGB(parseInt(s.charAt(0),16)/15,parseInt(s.charAt(1),16)/15,parseInt(s.charAt(2),16)/15,t)}else if(o===6){return this.setHex(parseInt(s,16),t)}else{console.warn("THREE.Color: Invalid hex color "+e)}}else if(e&&e.length>0){return this.setColorName(e,t)}return this}setColorName(e,t=Kt){const n=Cu[e.toLowerCase()];if(n!==void 0){this.setHex(n,t)}else{console.warn("THREE.Color: Unknown color "+e)}return this}clone(){return new this.constructor(this.r,this.g,this.b)}copy(e){this.r=e.r;this.g=e.g;this.b=e.b;return this}copySRGBToLinear(e){this.r=Ii(e.r);this.g=Ii(e.g);this.b=Ii(e.b);return this}copyLinearToSRGB(e){this.r=pa(e.r);this.g=pa(e.g);this.b=pa(e.b);return this}convertSRGBToLinear(){this.copySRGBToLinear(this);return this}convertLinearToSRGB(){this.copyLinearToSRGB(this);return this}getHex(e=Kt){$e.fromWorkingColorSpace(vt.copy(this),e);return Math.round(xt(vt.r*255,0,255))*65536+Math.round(xt(vt.g*255,0,255))*256+Math.round(xt(vt.b*255,0,255))}getHexString(e=Kt){return("000000"+this.getHex(e).toString(16)).slice(-6)}getHSL(e,t=$e.workingColorSpace){$e.fromWorkingColorSpace(vt.copy(this),t);const n=vt.r,r=vt.g,s=vt.b;const o=Math.max(n,r,s);const a=Math.min(n,r,s);let l,c;const u=(a+o)/2;if(a===o){l=0;c=0}else{const h=o-a;c=u<=.5?h/(o+a):h/(2-o-a);switch(o){case n:l=(r-s)/h+(r<s?6:0);break;case r:l=(s-n)/h+2;break;case s:l=(n-r)/h+4;break}l/=6}e.h=l;e.s=c;e.l=u;return e}getRGB(e,t=$e.workingColorSpace){$e.fromWorkingColorSpace(vt.copy(this),t);e.r=vt.r;e.g=vt.g;e.b=vt.b;return e}getStyle(e=Kt){$e.fromWorkingColorSpace(vt.copy(this),e);const t=vt.r,n=vt.g,r=vt.b;if(e!==Kt){return`color(${e} ${t.toFixed(3)} ${n.toFixed(3)} ${r.toFixed(3)})`}return`rgb(${Math.round(t*255)},${Math.round(n*255)},${Math.round(r*255)})`}offsetHSL(e,t,n){this.getHSL(bn);return this.setHSL(bn.h+e,bn.s+t,bn.l+n)}add(e){this.r+=e.r;this.g+=e.g;this.b+=e.b;return this}addColors(e,t){this.r=e.r+t.r;this.g=e.g+t.g;this.b=e.b+t.b;return this}addScalar(e){this.r+=e;this.g+=e;this.b+=e;return this}sub(e){this.r=Math.max(0,this.r-e.r);this.g=Math.max(0,this.g-e.g);this.b=Math.max(0,this.b-e.b);return this}multiply(e){this.r*=e.r;this.g*=e.g;this.b*=e.b;return this}multiplyScalar(e){this.r*=e;this.g*=e;this.b*=e;return this}lerp(e,t){this.r+=(e.r-this.r)*t;this.g+=(e.g-this.g)*t;this.b+=(e.b-this.b)*t;return this}lerpColors(e,t,n){this.r=e.r+(t.r-e.r)*n;this.g=e.g+(t.g-e.g)*n;this.b=e.b+(t.b-e.b)*n;return this}lerpHSL(e,t){this.getHSL(bn);e.getHSL(is);const n=da(bn.h,is.h,t);const r=da(bn.s,is.s,t);const s=da(bn.l,is.l,t);this.setHSL(n,r,s);return this}setFromVector3(e){this.r=e.x;this.g=e.y;this.b=e.z;return this}applyMatrix3(e){const t=this.r,n=this.g,r=this.b;const s=e.elements;this.r=s[0]*t+s[3]*n+s[6]*r;this.g=s[1]*t+s[4]*n+s[7]*r;this.b=s[2]*t+s[5]*n+s[8]*r;return this}equals(e){return e.r===this.r&&e.g===this.g&&e.b===this.b}fromArray(e,t=0){this.r=e[t];this.g=e[t+1];this.b=e[t+2];return this}toArray(e=[],t=0){e[t]=this.r;e[t+1]=this.g;e[t+2]=this.b;return e}fromBufferAttribute(e,t){this.r=e.getX(t);this.g=e.getY(t);this.b=e.getZ(t);return this}toJSON(){return this.getHex()}*[Symbol.iterator](){yield this.r;yield this.g;yield this.b}}const vt=new Ve;Ve.NAMES=Cu;let Wd=0;class nr extends tr{constructor(){super();this.isMaterial=true;Object.defineProperty(this,"id",{value:Wd++});this.uuid=Or();this.name="";this.type="Material";this.blending=Ni;this.side=On;this.vertexColors=false;this.opacity=1;this.transparent=false;this.alphaHash=false;this.blendSrc=eo;this.blendDst=to;this.blendEquation=Jn;this.blendSrcAlpha=null;this.blendDstAlpha=null;this.blendEquationAlpha=null;this.blendColor=new Ve(0,0,0);this.blendAlpha=0;this.depthFunc=ws;this.depthTest=true;this.depthWrite=true;this.stencilWriteMask=255;this.stencilFunc=Rl;this.stencilRef=0;this.stencilFuncMask=255;this.stencilFail=hi;this.stencilZFail=hi;this.stencilZPass=hi;this.stencilWrite=false;this.clippingPlanes=null;this.clipIntersection=false;this.clipShadows=false;this.shadowSide=null;this.colorWrite=true;this.precision=null;this.polygonOffset=false;this.polygonOffsetFactor=0;this.polygonOffsetUnits=0;this.dithering=false;this.alphaToCoverage=false;this.premultipliedAlpha=false;this.forceSinglePass=false;this.visible=true;this.toneMapped=true;this.userData={};this.version=0;this._alphaTest=0}get alphaTest(){return this._alphaTest}set alphaTest(e){if(this._alphaTest>0!==e>0){this.version++}this._alphaTest=e}onBuild(){}onBeforeRender(){}onBeforeCompile(){}customProgramCacheKey(){return this.onBeforeCompile.toString()}setValues(e){if(e===void 0)return;for(const t in e){const n=e[t];if(n===void 0){console.warn(`THREE.Material: parameter '${t}' has value of undefined.`);continue}const r=this[t];if(r===void 0){console.warn(`THREE.Material: '${t}' is not a property of THREE.${this.type}.`);continue}if(r&&r.isColor){r.set(n)}else if(r&&r.isVector3&&(n&&n.isVector3)){r.copy(n)}else{this[t]=n}}}toJSON(e){const t=e===void 0||typeof e==="string";if(t){e={textures:{},images:{}}}const n={metadata:{version:4.6,type:"Material",generator:"Material.toJSON"}};n.uuid=this.uuid;n.type=this.type;if(this.name!=="")n.name=this.name;if(this.color&&this.color.isColor)n.color=this.color.getHex();if(this.roughness!==void 0)n.roughness=this.roughness;if(this.metalness!==void 0)n.metalness=this.metalness;if(this.sheen!==void 0)n.sheen=this.sheen;if(this.sheenColor&&this.sheenColor.isColor)n.sheenColor=this.sheenColor.getHex();if(this.sheenRoughness!==void 0)n.sheenRoughness=this.sheenRoughness;if(this.emissive&&this.emissive.isColor)n.emissive=this.emissive.getHex();if(this.emissiveIntensity!==void 0&&this.emissiveIntensity!==1)n.emissiveIntensity=this.emissiveIntensity;if(this.specular&&this.specular.isColor)n.specular=this.specular.getHex();if(this.specularIntensity!==void 0)n.specularIntensity=this.specularIntensity;if(this.specularColor&&this.specularColor.isColor)n.specularColor=this.specularColor.getHex();if(this.shininess!==void 0)n.shininess=this.shininess;if(this.clearcoat!==void 0)n.clearcoat=this.clearcoat;if(this.clearcoatRoughness!==void 0)n.clearcoatRoughness=this.clearcoatRoughness;if(this.clearcoatMap&&this.clearcoatMap.isTexture){n.clearcoatMap=this.clearcoatMap.toJSON(e).uuid}if(this.clearcoatRoughnessMap&&this.clearcoatRoughnessMap.isTexture){n.clearcoatRoughnessMap=this.clearcoatRoughnessMap.toJSON(e).uuid}if(this.clearcoatNormalMap&&this.clearcoatNormalMap.isTexture){n.clearcoatNormalMap=this.clearcoatNormalMap.toJSON(e).uuid;n.clearcoatNormalScale=this.clearcoatNormalScale.toArray()}if(this.iridescence!==void 0)n.iridescence=this.iridescence;if(this.iridescenceIOR!==void 0)n.iridescenceIOR=this.iridescenceIOR;if(this.iridescenceThicknessRange!==void 0)n.iridescenceThicknessRange=this.iridescenceThicknessRange;if(this.iridescenceMap&&this.iridescenceMap.isTexture){n.iridescenceMap=this.iridescenceMap.toJSON(e).uuid}if(this.iridescenceThicknessMap&&this.iridescenceThicknessMap.isTexture){n.iridescenceThicknessMap=this.iridescenceThicknessMap.toJSON(e).uuid}if(this.anisotropy!==void 0)n.anisotropy=this.anisotropy;if(this.anisotropyRotation!==void 0)n.anisotropyRotation=this.anisotropyRotation;if(this.anisotropyMap&&this.anisotropyMap.isTexture){n.anisotropyMap=this.anisotropyMap.toJSON(e).uuid}if(this.map&&this.map.isTexture)n.map=this.map.toJSON(e).uuid;if(this.matcap&&this.matcap.isTexture)n.matcap=this.matcap.toJSON(e).uuid;if(this.alphaMap&&this.alphaMap.isTexture)n.alphaMap=this.alphaMap.toJSON(e).uuid;if(this.lightMap&&this.lightMap.isTexture){n.lightMap=this.lightMap.toJSON(e).uuid;n.lightMapIntensity=this.lightMapIntensity}if(this.aoMap&&this.aoMap.isTexture){n.aoMap=this.aoMap.toJSON(e).uuid;n.aoMapIntensity=this.aoMapIntensity}if(this.bumpMap&&this.bumpMap.isTexture){n.bumpMap=this.bumpMap.toJSON(e).uuid;n.bumpScale=this.bumpScale}if(this.normalMap&&this.normalMap.isTexture){n.normalMap=this.normalMap.toJSON(e).uuid;n.normalMapType=this.normalMapType;n.normalScale=this.normalScale.toArray()}if(this.displacementMap&&this.displacementMap.isTexture){n.displacementMap=this.displacementMap.toJSON(e).uuid;n.displacementScale=this.displacementScale;n.displacementBias=this.displacementBias}if(this.roughnessMap&&this.roughnessMap.isTexture)n.roughnessMap=this.roughnessMap.toJSON(e).uuid;if(this.metalnessMap&&this.metalnessMap.isTexture)n.metalnessMap=this.metalnessMap.toJSON(e).uuid;if(this.emissiveMap&&this.emissiveMap.isTexture)n.emissiveMap=this.emissiveMap.toJSON(e).uuid;if(this.specularMap&&this.specularMap.isTexture)n.specularMap=this.specularMap.toJSON(e).uuid;if(this.specularIntensityMap&&this.specularIntensityMap.isTexture)n.specularIntensityMap=this.specularIntensityMap.toJSON(e).uuid;if(this.specularColorMap&&this.specularColorMap.isTexture)n.specularColorMap=this.specularColorMap.toJSON(e).uuid;if(this.envMap&&this.envMap.isTexture){n.envMap=this.envMap.toJSON(e).uuid;if(this.combine!==void 0)n.combine=this.combine}if(this.envMapRotation!==void 0)n.envMapRotation=this.envMapRotation.toArray();if(this.envMapIntensity!==void 0)n.envMapIntensity=this.envMapIntensity;if(this.reflectivity!==void 0)n.reflectivity=this.reflectivity;if(this.refractionRatio!==void 0)n.refractionRatio=this.refractionRatio;if(this.gradientMap&&this.gradientMap.isTexture){n.gradientMap=this.gradientMap.toJSON(e).uuid}if(this.transmission!==void 0)n.transmission=this.transmission;if(this.transmissionMap&&this.transmissionMap.isTexture)n.transmissionMap=this.transmissionMap.toJSON(e).uuid;if(this.thickness!==void 0)n.thickness=this.thickness;if(this.thicknessMap&&this.thicknessMap.isTexture)n.thicknessMap=this.thicknessMap.toJSON(e).uuid;if(this.attenuationDistance!==void 0&&this.attenuationDistance!==Infinity)n.attenuationDistance=this.attenuationDistance;if(this.attenuationColor!==void 0)n.attenuationColor=this.attenuationColor.getHex();if(this.size!==void 0)n.size=this.size;if(this.shadowSide!==null)n.shadowSide=this.shadowSide;if(this.sizeAttenuation!==void 0)n.sizeAttenuation=this.sizeAttenuation;if(this.blending!==Ni)n.blending=this.blending;if(this.side!==On)n.side=this.side;if(this.vertexColors===true)n.vertexColors=true;if(this.opacity<1)n.opacity=this.opacity;if(this.transparent===true)n.transparent=true;if(this.blendSrc!==eo)n.blendSrc=this.blendSrc;if(this.blendDst!==to)n.blendDst=this.blendDst;if(this.blendEquation!==Jn)n.blendEquation=this.blendEquation;if(this.blendSrcAlpha!==null)n.blendSrcAlpha=this.blendSrcAlpha;if(this.blendDstAlpha!==null)n.blendDstAlpha=this.blendDstAlpha;if(this.blendEquationAlpha!==null)n.blendEquationAlpha=this.blendEquationAlpha;if(this.blendColor&&this.blendColor.isColor)n.blendColor=this.blendColor.getHex();if(this.blendAlpha!==0)n.blendAlpha=this.blendAlpha;if(this.depthFunc!==ws)n.depthFunc=this.depthFunc;if(this.depthTest===false)n.depthTest=this.depthTest;if(this.depthWrite===false)n.depthWrite=this.depthWrite;if(this.colorWrite===false)n.colorWrite=this.colorWrite;if(this.stencilWriteMask!==255)n.stencilWriteMask=this.stencilWriteMask;if(this.stencilFunc!==Rl)n.stencilFunc=this.stencilFunc;if(this.stencilRef!==0)n.stencilRef=this.stencilRef;if(this.stencilFuncMask!==255)n.stencilFuncMask=this.stencilFuncMask;if(this.stencilFail!==hi)n.stencilFail=this.stencilFail;if(this.stencilZFail!==hi)n.stencilZFail=this.stencilZFail;if(this.stencilZPass!==hi)n.stencilZPass=this.stencilZPass;if(this.stencilWrite===true)n.stencilWrite=this.stencilWrite;if(this.rotation!==void 0&&this.rotation!==0)n.rotation=this.rotation;if(this.polygonOffset===true)n.polygonOffset=true;if(this.polygonOffsetFactor!==0)n.polygonOffsetFactor=this.polygonOffsetFactor;if(this.polygonOffsetUnits!==0)n.polygonOffsetUnits=this.polygonOffsetUnits;if(this.linewidth!==void 0&&this.linewidth!==1)n.linewidth=this.linewidth;if(this.dashSize!==void 0)n.dashSize=this.dashSize;if(this.gapSize!==void 0)n.gapSize=this.gapSize;if(this.scale!==void 0)n.scale=this.scale;if(this.dithering===true)n.dithering=true;if(this.alphaTest>0)n.alphaTest=this.alphaTest;if(this.alphaHash===true)n.alphaHash=true;if(this.alphaToCoverage===true)n.alphaToCoverage=true;if(this.premultipliedAlpha===true)n.premultipliedAlpha=true;if(this.forceSinglePass===true)n.forceSinglePass=true;if(this.wireframe===true)n.wireframe=true;if(this.wireframeLinewidth>1)n.wireframeLinewidth=this.wireframeLinewidth;if(this.wireframeLinecap!=="round")n.wireframeLinecap=this.wireframeLinecap;if(this.wireframeLinejoin!=="round")n.wireframeLinejoin=this.wireframeLinejoin;if(this.flatShading===true)n.flatShading=true;if(this.visible===false)n.visible=false;if(this.toneMapped===false)n.toneMapped=false;if(this.fog===false)n.fog=false;if(Object.keys(this.userData).length>0)n.userData=this.userData;function r(s){const o=[];for(const a in s){const l=s[a];delete l.metadata;o.push(l)}return o}if(t){const s=r(e.textures);const o=r(e.images);if(s.length>0)n.textures=s;if(o.length>0)n.images=o}return n}clone(){return new this.constructor().copy(this)}copy(e){this.name=e.name;this.blending=e.blending;this.side=e.side;this.vertexColors=e.vertexColors;this.opacity=e.opacity;this.transparent=e.transparent;this.blendSrc=e.blendSrc;this.blendDst=e.blendDst;this.blendEquation=e.blendEquation;this.blendSrcAlpha=e.blendSrcAlpha;this.blendDstAlpha=e.blendDstAlpha;this.blendEquationAlpha=e.blendEquationAlpha;this.blendColor.copy(e.blendColor);this.blendAlpha=e.blendAlpha;this.depthFunc=e.depthFunc;this.depthTest=e.depthTest;this.depthWrite=e.depthWrite;this.stencilWriteMask=e.stencilWriteMask;this.stencilFunc=e.stencilFunc;this.stencilRef=e.stencilRef;this.stencilFuncMask=e.stencilFuncMask;this.stencilFail=e.stencilFail;this.stencilZFail=e.stencilZFail;this.stencilZPass=e.stencilZPass;this.stencilWrite=e.stencilWrite;const t=e.clippingPlanes;let n=null;if(t!==null){const r=t.length;n=new Array(r);for(let s=0;s!==r;++s){n[s]=t[s].clone()}}this.clippingPlanes=n;this.clipIntersection=e.clipIntersection;this.clipShadows=e.clipShadows;this.shadowSide=e.shadowSide;this.colorWrite=e.colorWrite;this.precision=e.precision;this.polygonOffset=e.polygonOffset;this.polygonOffsetFactor=e.polygonOffsetFactor;this.polygonOffsetUnits=e.polygonOffsetUnits;this.dithering=e.dithering;this.alphaTest=e.alphaTest;this.alphaHash=e.alphaHash;this.alphaToCoverage=e.alphaToCoverage;this.premultipliedAlpha=e.premultipliedAlpha;this.forceSinglePass=e.forceSinglePass;this.visible=e.visible;this.toneMapped=e.toneMapped;this.userData=JSON.parse(JSON.stringify(e.userData));return this}dispose(){this.dispatchEvent({type:"dispose"})}set needsUpdate(e){if(e===true)this.version++}}class wu extends nr{constructor(e){super();this.isMeshBasicMaterial=true;this.type="MeshBasicMaterial";this.color=new Ve(16777215);this.map=null;this.lightMap=null;this.lightMapIntensity=1;this.aoMap=null;this.aoMapIntensity=1;this.specularMap=null;this.alphaMap=null;this.envMap=null;this.envMapRotation=new nn;this.combine=Ao;this.reflectivity=1;this.refractionRatio=.98;this.wireframe=false;this.wireframeLinewidth=1;this.wireframeLinecap="round";this.wireframeLinejoin="round";this.fog=true;this.setValues(e)}copy(e){super.copy(e);this.color.copy(e.color);this.map=e.map;this.lightMap=e.lightMap;this.lightMapIntensity=e.lightMapIntensity;this.aoMap=e.aoMap;this.aoMapIntensity=e.aoMapIntensity;this.specularMap=e.specularMap;this.alphaMap=e.alphaMap;this.envMap=e.envMap;this.envMapRotation.copy(e.envMapRotation);this.combine=e.combine;this.reflectivity=e.reflectivity;this.refractionRatio=e.refractionRatio;this.wireframe=e.wireframe;this.wireframeLinewidth=e.wireframeLinewidth;this.wireframeLinecap=e.wireframeLinecap;this.wireframeLinejoin=e.wireframeLinejoin;this.fog=e.fog;return this}}const ot=new L;const rs=new Pe;class en{constructor(e,t,n=false){if(Array.isArray(e)){throw new TypeError("THREE.BufferAttribute: array should be a Typed Array.")}this.isBufferAttribute=true;this.name="";this.array=e;this.itemSize=t;this.count=e!==void 0?e.length/t:0;this.normalized=n;this.usage=Ll;this._updateRange={offset:0,count:-1};this.updateRanges=[];this.gpuType=gn;this.version=0}onUploadCallback(){}set needsUpdate(e){if(e===true)this.version++}get updateRange(){Ld("THREE.BufferAttribute: updateRange() is deprecated and will be removed in r169. Use addUpdateRange() instead.");return this._updateRange}setUsage(e){this.usage=e;return this}addUpdateRange(e,t){this.updateRanges.push({start:e,count:t})}clearUpdateRanges(){this.updateRanges.length=0}copy(e){this.name=e.name;this.array=new e.array.constructor(e.array);this.itemSize=e.itemSize;this.count=e.count;this.normalized=e.normalized;this.usage=e.usage;this.gpuType=e.gpuType;return this}copyAt(e,t,n){e*=this.itemSize;n*=t.itemSize;for(let r=0,s=this.itemSize;r<s;r++){this.array[e+r]=t.array[n+r]}return this}copyArray(e){this.array.set(e);return this}applyMatrix3(e){if(this.itemSize===2){for(let t=0,n=this.count;t<n;t++){rs.fromBufferAttribute(this,t);rs.applyMatrix3(e);this.setXY(t,rs.x,rs.y)}}else if(this.itemSize===3){for(let t=0,n=this.count;t<n;t++){ot.fromBufferAttribute(this,t);ot.applyMatrix3(e);this.setXYZ(t,ot.x,ot.y,ot.z)}}return this}applyMatrix4(e){for(let t=0,n=this.count;t<n;t++){ot.fromBufferAttribute(this,t);ot.applyMatrix4(e);this.setXYZ(t,ot.x,ot.y,ot.z)}return this}applyNormalMatrix(e){for(let t=0,n=this.count;t<n;t++){ot.fromBufferAttribute(this,t);ot.applyNormalMatrix(e);this.setXYZ(t,ot.x,ot.y,ot.z)}return this}transformDirection(e){for(let t=0,n=this.count;t<n;t++){ot.fromBufferAttribute(this,t);ot.transformDirection(e);this.setXYZ(t,ot.x,ot.y,ot.z)}return this}set(e,t=0){this.array.set(e,t);return this}getComponent(e,t){let n=this.array[e*this.itemSize+t];if(this.normalized)n=or(n,this.array);return n}setComponent(e,t,n){if(this.normalized)n=At(n,this.array);this.array[e*this.itemSize+t]=n;return this}getX(e){let t=this.array[e*this.itemSize];if(this.normalized)t=or(t,this.array);return t}setX(e,t){if(this.normalized)t=At(t,this.array);this.array[e*this.itemSize]=t;return this}getY(e){let t=this.array[e*this.itemSize+1];if(this.normalized)t=or(t,this.array);return t}setY(e,t){if(this.normalized)t=At(t,this.array);this.array[e*this.itemSize+1]=t;return this}getZ(e){let t=this.array[e*this.itemSize+2];if(this.normalized)t=or(t,this.array);return t}setZ(e,t){if(this.normalized)t=At(t,this.array);this.array[e*this.itemSize+2]=t;return this}getW(e){let t=this.array[e*this.itemSize+3];if(this.normalized)t=or(t,this.array);return t}setW(e,t){if(this.normalized)t=At(t,this.array);this.array[e*this.itemSize+3]=t;return this}setXY(e,t,n){e*=this.itemSize;if(this.normalized){t=At(t,this.array);n=At(n,this.array)}this.array[e+0]=t;this.array[e+1]=n;return this}setXYZ(e,t,n,r){e*=this.itemSize;if(this.normalized){t=At(t,this.array);n=At(n,this.array);r=At(r,this.array)}this.array[e+0]=t;this.array[e+1]=n;this.array[e+2]=r;return this}setXYZW(e,t,n,r,s){e*=this.itemSize;if(this.normalized){t=At(t,this.array);n=At(n,this.array);r=At(r,this.array);s=At(s,this.array)}this.array[e+0]=t;this.array[e+1]=n;this.array[e+2]=r;this.array[e+3]=s;return this}onUpload(e){this.onUploadCallback=e;return this}clone(){return new this.constructor(this.array,this.itemSize).copy(this)}toJSON(){const e={itemSize:this.itemSize,type:this.array.constructor.name,array:Array.from(this.array),normalized:this.normalized};if(this.name!=="")e.name=this.name;if(this.usage!==Ll)e.usage=this.usage;return e}}class Ru extends en{constructor(e,t,n){super(new Uint16Array(e),t,n)}}class Lu extends en{constructor(e,t,n){super(new Uint32Array(e),t,n)}}class Tt extends en{constructor(e,t,n){super(new Float32Array(e),t,n)}}let Xd=0;const Ft=new nt;const Ra=new mt;const Si=new L;const Pt=new zr;const hr=new zr;const ht=new L;class Ut extends tr{constructor(){super();this.isBufferGeometry=true;Object.defineProperty(this,"id",{value:Xd++});this.uuid=Or();this.name="";this.type="BufferGeometry";this.index=null;this.attributes={};this.morphAttributes={};this.morphTargetsRelative=false;this.groups=[];this.boundingBox=null;this.boundingSphere=null;this.drawRange={start:0,count:Infinity};this.userData={}}getIndex(){return this.index}setIndex(e){if(Array.isArray(e)){this.index=new(Mu(e)?Lu:Ru)(e,1)}else{this.index=e}return this}getAttribute(e){return this.attributes[e]}setAttribute(e,t){this.attributes[e]=t;return this}deleteAttribute(e){delete this.attributes[e];return this}hasAttribute(e){return this.attributes[e]!==void 0}addGroup(e,t,n=0){this.groups.push({start:e,count:t,materialIndex:n})}clearGroups(){this.groups=[]}setDrawRange(e,t){this.drawRange.start=e;this.drawRange.count=t}applyMatrix4(e){const t=this.attributes.position;if(t!==void 0){t.applyMatrix4(e);t.needsUpdate=true}const n=this.attributes.normal;if(n!==void 0){const s=new Be().getNormalMatrix(e);n.applyNormalMatrix(s);n.needsUpdate=true}const r=this.attributes.tangent;if(r!==void 0){r.transformDirection(e);r.needsUpdate=true}if(this.boundingBox!==null){this.computeBoundingBox()}if(this.boundingSphere!==null){this.computeBoundingSphere()}return this}applyQuaternion(e){Ft.makeRotationFromQuaternion(e);this.applyMatrix4(Ft);return this}rotateX(e){Ft.makeRotationX(e);this.applyMatrix4(Ft);return this}rotateY(e){Ft.makeRotationY(e);this.applyMatrix4(Ft);return this}rotateZ(e){Ft.makeRotationZ(e);this.applyMatrix4(Ft);return this}translate(e,t,n){Ft.makeTranslation(e,t,n);this.applyMatrix4(Ft);return this}scale(e,t,n){Ft.makeScale(e,t,n);this.applyMatrix4(Ft);return this}lookAt(e){Ra.lookAt(e);Ra.updateMatrix();this.applyMatrix4(Ra.matrix);return this}center(){this.computeBoundingBox();this.boundingBox.getCenter(Si).negate();this.translate(Si.x,Si.y,Si.z);return this}setFromPoints(e){const t=[];for(let n=0,r=e.length;n<r;n++){const s=e[n];t.push(s.x,s.y,s.z||0)}this.setAttribute("position",new Tt(t,3));return this}computeBoundingBox(){if(this.boundingBox===null){this.boundingBox=new zr}const e=this.attributes.position;const t=this.morphAttributes.position;if(e&&e.isGLBufferAttribute){console.error("THREE.BufferGeometry.computeBoundingBox(): GLBufferAttribute requires a manual bounding box.",this);this.boundingBox.set(new L(-Infinity,-Infinity,-Infinity),new L(Infinity,Infinity,Infinity));return}if(e!==void 0){this.boundingBox.setFromBufferAttribute(e);if(t){for(let n=0,r=t.length;n<r;n++){const s=t[n];Pt.setFromBufferAttribute(s);if(this.morphTargetsRelative){ht.addVectors(this.boundingBox.min,Pt.min);this.boundingBox.expandByPoint(ht);ht.addVectors(this.boundingBox.max,Pt.max);this.boundingBox.expandByPoint(ht)}else{this.boundingBox.expandByPoint(Pt.min);this.boundingBox.expandByPoint(Pt.max)}}}}else{this.boundingBox.makeEmpty()}if(isNaN(this.boundingBox.min.x)||isNaN(this.boundingBox.min.y)||isNaN(this.boundingBox.min.z)){console.error('THREE.BufferGeometry.computeBoundingBox(): Computed min/max have NaN values. The "position" attribute is likely to have NaN values.',this)}}computeBoundingSphere(){if(this.boundingSphere===null){this.boundingSphere=new Ys}const e=this.attributes.position;const t=this.morphAttributes.position;if(e&&e.isGLBufferAttribute){console.error("THREE.BufferGeometry.computeBoundingSphere(): GLBufferAttribute requires a manual bounding sphere.",this);this.boundingSphere.set(new L,Infinity);return}if(e){const n=this.boundingSphere.center;Pt.setFromBufferAttribute(e);if(t){for(let s=0,o=t.length;s<o;s++){const a=t[s];hr.setFromBufferAttribute(a);if(this.morphTargetsRelative){ht.addVectors(Pt.min,hr.min);Pt.expandByPoint(ht);ht.addVectors(Pt.max,hr.max);Pt.expandByPoint(ht)}else{Pt.expandByPoint(hr.min);Pt.expandByPoint(hr.max)}}}Pt.getCenter(n);let r=0;for(let s=0,o=e.count;s<o;s++){ht.fromBufferAttribute(e,s);r=Math.max(r,n.distanceToSquared(ht))}if(t){for(let s=0,o=t.length;s<o;s++){const a=t[s];const l=this.morphTargetsRelative;for(let c=0,u=a.count;c<u;c++){ht.fromBufferAttribute(a,c);if(l){Si.fromBufferAttribute(e,c);ht.add(Si)}r=Math.max(r,n.distanceToSquared(ht))}}}this.boundingSphere.radius=Math.sqrt(r);if(isNaN(this.boundingSphere.radius)){console.error('THREE.BufferGeometry.computeBoundingSphere(): Computed radius is NaN. The "position" attribute is likely to have NaN values.',this)}}}computeTangents(){const e=this.index;const t=this.attributes;if(e===null||t.position===void 0||t.normal===void 0||t.uv===void 0){console.error("THREE.BufferGeometry: .computeTangents() failed. Missing required attributes (index, position, normal or uv)");return}const n=t.position;const r=t.normal;const s=t.uv;if(this.hasAttribute("tangent")===false){this.setAttribute("tangent",new en(new Float32Array(4*n.count),4))}const o=this.getAttribute("tangent");const a=[],l=[];for(let z=0;z<n.count;z++){a[z]=new L;l[z]=new L}const c=new L,u=new L,h=new L,p=new Pe,m=new Pe,g=new Pe,S=new L,f=new L;function d(z,ee,v){c.fromBufferAttribute(n,z);u.fromBufferAttribute(n,ee);h.fromBufferAttribute(n,v);p.fromBufferAttribute(s,z);m.fromBufferAttribute(s,ee);g.fromBufferAttribute(s,v);u.sub(c);h.sub(c);m.sub(p);g.sub(p);const y=1/(m.x*g.y-g.x*m.y);if(!isFinite(y))return;S.copy(u).multiplyScalar(g.y).addScaledVector(h,-m.y).multiplyScalar(y);f.copy(h).multiplyScalar(m.x).addScaledVector(u,-g.x).multiplyScalar(y);a[z].add(S);a[ee].add(S);a[v].add(S);l[z].add(f);l[ee].add(f);l[v].add(f)}let A=this.groups;if(A.length===0){A=[{start:0,count:e.count}]}for(let z=0,ee=A.length;z<ee;++z){const v=A[z];const y=v.start;const te=v.count;for(let J=y,R=y+te;J<R;J+=3){d(e.getX(J+0),e.getX(J+1),e.getX(J+2))}}const M=new L,T=new L;const D=new L,C=new L;function b(z){D.fromBufferAttribute(r,z);C.copy(D);const ee=a[z];M.copy(ee);M.sub(D.multiplyScalar(D.dot(ee))).normalize();T.crossVectors(C,ee);const v=T.dot(l[z]);const y=v<0?-1:1;o.setXYZW(z,M.x,M.y,M.z,y)}for(let z=0,ee=A.length;z<ee;++z){const v=A[z];const y=v.start;const te=v.count;for(let J=y,R=y+te;J<R;J+=3){b(e.getX(J+0));b(e.getX(J+1));b(e.getX(J+2))}}}computeVertexNormals(){const e=this.index;const t=this.getAttribute("position");if(t!==void 0){let n=this.getAttribute("normal");if(n===void 0){n=new en(new Float32Array(t.count*3),3);this.setAttribute("normal",n)}else{for(let p=0,m=n.count;p<m;p++){n.setXYZ(p,0,0,0)}}const r=new L,s=new L,o=new L;const a=new L,l=new L,c=new L;const u=new L,h=new L;if(e){for(let p=0,m=e.count;p<m;p+=3){const g=e.getX(p+0);const S=e.getX(p+1);const f=e.getX(p+2);r.fromBufferAttribute(t,g);s.fromBufferAttribute(t,S);o.fromBufferAttribute(t,f);u.subVectors(o,s);h.subVectors(r,s);u.cross(h);a.fromBufferAttribute(n,g);l.fromBufferAttribute(n,S);c.fromBufferAttribute(n,f);a.add(u);l.add(u);c.add(u);n.setXYZ(g,a.x,a.y,a.z);n.setXYZ(S,l.x,l.y,l.z);n.setXYZ(f,c.x,c.y,c.z)}}else{for(let p=0,m=t.count;p<m;p+=3){r.fromBufferAttribute(t,p+0);s.fromBufferAttribute(t,p+1);o.fromBufferAttribute(t,p+2);u.subVectors(o,s);h.subVectors(r,s);u.cross(h);n.setXYZ(p+0,u.x,u.y,u.z);n.setXYZ(p+1,u.x,u.y,u.z);n.setXYZ(p+2,u.x,u.y,u.z)}}this.normalizeNormals();n.needsUpdate=true}}normalizeNormals(){const e=this.attributes.normal;for(let t=0,n=e.count;t<n;t++){ht.fromBufferAttribute(e,t);ht.normalize();e.setXYZ(t,ht.x,ht.y,ht.z)}}toNonIndexed(){function e(a,l){const c=a.array;const u=a.itemSize;const h=a.normalized;const p=new c.constructor(l.length*u);let m=0,g=0;for(let S=0,f=l.length;S<f;S++){if(a.isInterleavedBufferAttribute){m=l[S]*a.data.stride+a.offset}else{m=l[S]*u}for(let d=0;d<u;d++){p[g++]=c[m++]}}return new en(p,u,h)}if(this.index===null){console.warn("THREE.BufferGeometry.toNonIndexed(): BufferGeometry is already non-indexed.");return this}const t=new Ut;const n=this.index.array;const r=this.attributes;for(const a in r){const l=r[a];const c=e(l,n);t.setAttribute(a,c)}const s=this.morphAttributes;for(const a in s){const l=[];const c=s[a];for(let u=0,h=c.length;u<h;u++){const p=c[u];const m=e(p,n);l.push(m)}t.morphAttributes[a]=l}t.morphTargetsRelative=this.morphTargetsRelative;const o=this.groups;for(let a=0,l=o.length;a<l;a++){const c=o[a];t.addGroup(c.start,c.count,c.materialIndex)}return t}toJSON(){const e={metadata:{version:4.6,type:"BufferGeometry",generator:"BufferGeometry.toJSON"}};e.uuid=this.uuid;e.type=this.type;if(this.name!=="")e.name=this.name;if(Object.keys(this.userData).length>0)e.userData=this.userData;if(this.parameters!==void 0){const l=this.parameters;for(const c in l){if(l[c]!==void 0)e[c]=l[c]}return e}e.data={attributes:{}};const t=this.index;if(t!==null){e.data.index={type:t.array.constructor.name,array:Array.prototype.slice.call(t.array)}}const n=this.attributes;for(const l in n){const c=n[l];e.data.attributes[l]=c.toJSON(e.data)}const r={};let s=false;for(const l in this.morphAttributes){const c=this.morphAttributes[l];const u=[];for(let h=0,p=c.length;h<p;h++){const m=c[h];u.push(m.toJSON(e.data))}if(u.length>0){r[l]=u;s=true}}if(s){e.data.morphAttributes=r;e.data.morphTargetsRelative=this.morphTargetsRelative}const o=this.groups;if(o.length>0){e.data.groups=JSON.parse(JSON.stringify(o))}const a=this.boundingSphere;if(a!==null){e.data.boundingSphere={center:a.center.toArray(),radius:a.radius}}return e}clone(){return new this.constructor().copy(this)}copy(e){this.index=null;this.attributes={};this.morphAttributes={};this.groups=[];this.boundingBox=null;this.boundingSphere=null;const t={};this.name=e.name;const n=e.index;if(n!==null){this.setIndex(n.clone(t))}const r=e.attributes;for(const c in r){const u=r[c];this.setAttribute(c,u.clone(t))}const s=e.morphAttributes;for(const c in s){const u=[];const h=s[c];for(let p=0,m=h.length;p<m;p++){u.push(h[p].clone(t))}this.morphAttributes[c]=u}this.morphTargetsRelative=e.morphTargetsRelative;const o=e.groups;for(let c=0,u=o.length;c<u;c++){const h=o[c];this.addGroup(h.start,h.count,h.materialIndex)}const a=e.boundingBox;if(a!==null){this.boundingBox=a.clone()}const l=e.boundingSphere;if(l!==null){this.boundingSphere=l.clone()}this.drawRange.start=e.drawRange.start;this.drawRange.count=e.drawRange.count;this.userData=e.userData;return this}dispose(){this.dispatchEvent({type:"dispose"})}}const Wl=new nt;const qn=new Au;const ss=new Ys;const Xl=new L;const Mi=new L;const Ei=new L;const yi=new L;const La=new L;const as=new L;const os=new Pe;const ls=new Pe;const cs=new Pe;const ql=new L;const jl=new L;const Yl=new L;const us=new L;const hs=new L;class qt extends mt{constructor(e=new Ut,t=new wu){super();this.isMesh=true;this.type="Mesh";this.geometry=e;this.material=t;this.updateMorphTargets()}copy(e,t){super.copy(e,t);if(e.morphTargetInfluences!==void 0){this.morphTargetInfluences=e.morphTargetInfluences.slice()}if(e.morphTargetDictionary!==void 0){this.morphTargetDictionary=Object.assign({},e.morphTargetDictionary)}this.material=Array.isArray(e.material)?e.material.slice():e.material;this.geometry=e.geometry;return this}updateMorphTargets(){const e=this.geometry;const t=e.morphAttributes;const n=Object.keys(t);if(n.length>0){const r=t[n[0]];if(r!==void 0){this.morphTargetInfluences=[];this.morphTargetDictionary={};for(let s=0,o=r.length;s<o;s++){const a=r[s].name||String(s);this.morphTargetInfluences.push(0);this.morphTargetDictionary[a]=s}}}}getVertexPosition(e,t){const n=this.geometry;const r=n.attributes.position;const s=n.morphAttributes.position;const o=n.morphTargetsRelative;t.fromBufferAttribute(r,e);const a=this.morphTargetInfluences;if(s&&a){as.set(0,0,0);for(let l=0,c=s.length;l<c;l++){const u=a[l];const h=s[l];if(u===0)continue;La.fromBufferAttribute(h,e);if(o){as.addScaledVector(La,u)}else{as.addScaledVector(La.sub(t),u)}}t.add(as)}return t}raycast(e,t){const n=this.geometry;const r=this.material;const s=this.matrixWorld;if(r===void 0)return;if(n.boundingSphere===null)n.computeBoundingSphere();ss.copy(n.boundingSphere);ss.applyMatrix4(s);qn.copy(e.ray).recast(e.near);if(ss.containsPoint(qn.origin)===false){if(qn.intersectSphere(ss,Xl)===null)return;if(qn.origin.distanceToSquared(Xl)>(e.far-e.near)**2)return}Wl.copy(s).invert();qn.copy(e.ray).applyMatrix4(Wl);if(n.boundingBox!==null){if(qn.intersectsBox(n.boundingBox)===false)return}this._computeIntersections(e,t,qn)}_computeIntersections(e,t,n){let r;const s=this.geometry;const o=this.material;const a=s.index;const l=s.attributes.position;const c=s.attributes.uv;const u=s.attributes.uv1;const h=s.attributes.normal;const p=s.groups;const m=s.drawRange;if(a!==null){if(Array.isArray(o)){for(let g=0,S=p.length;g<S;g++){const f=p[g];const d=o[f.materialIndex];const A=Math.max(f.start,m.start);const M=Math.min(a.count,Math.min(f.start+f.count,m.start+m.count));for(let T=A,D=M;T<D;T+=3){const C=a.getX(T);const b=a.getX(T+1);const z=a.getX(T+2);r=ds(this,d,e,n,c,u,h,C,b,z);if(r){r.faceIndex=Math.floor(T/3);r.face.materialIndex=f.materialIndex;t.push(r)}}}}else{const g=Math.max(0,m.start);const S=Math.min(a.count,m.start+m.count);for(let f=g,d=S;f<d;f+=3){const A=a.getX(f);const M=a.getX(f+1);const T=a.getX(f+2);r=ds(this,o,e,n,c,u,h,A,M,T);if(r){r.faceIndex=Math.floor(f/3);t.push(r)}}}}else if(l!==void 0){if(Array.isArray(o)){for(let g=0,S=p.length;g<S;g++){const f=p[g];const d=o[f.materialIndex];const A=Math.max(f.start,m.start);const M=Math.min(l.count,Math.min(f.start+f.count,m.start+m.count));for(let T=A,D=M;T<D;T+=3){const C=T;const b=T+1;const z=T+2;r=ds(this,d,e,n,c,u,h,C,b,z);if(r){r.faceIndex=Math.floor(T/3);r.face.materialIndex=f.materialIndex;t.push(r)}}}}else{const g=Math.max(0,m.start);const S=Math.min(l.count,m.start+m.count);for(let f=g,d=S;f<d;f+=3){const A=f;const M=f+1;const T=f+2;r=ds(this,o,e,n,c,u,h,A,M,T);if(r){r.faceIndex=Math.floor(f/3);t.push(r)}}}}}}function qd(i,e,t,n,r,s,o,a){let l;if(e.side===wt){l=n.intersectTriangle(o,s,r,true,a)}else{l=n.intersectTriangle(r,s,o,e.side===On,a)}if(l===null)return null;hs.copy(a);hs.applyMatrix4(i.matrixWorld);const c=t.ray.origin.distanceTo(hs);if(c<t.near||c>t.far)return null;return{distance:c,point:hs.clone(),object:i}}function ds(i,e,t,n,r,s,o,a,l,c){i.getVertexPosition(a,Mi);i.getVertexPosition(l,Ei);i.getVertexPosition(c,yi);const u=qd(i,e,t,n,Mi,Ei,yi,us);if(u){if(r){os.fromBufferAttribute(r,a);ls.fromBufferAttribute(r,l);cs.fromBufferAttribute(r,c);u.uv=Qt.getInterpolation(us,Mi,Ei,yi,os,ls,cs,new Pe)}if(s){os.fromBufferAttribute(s,a);ls.fromBufferAttribute(s,l);cs.fromBufferAttribute(s,c);u.uv1=Qt.getInterpolation(us,Mi,Ei,yi,os,ls,cs,new Pe)}if(o){ql.fromBufferAttribute(o,a);jl.fromBufferAttribute(o,l);Yl.fromBufferAttribute(o,c);u.normal=Qt.getInterpolation(us,Mi,Ei,yi,ql,jl,Yl,new L);if(u.normal.dot(n.direction)>0){u.normal.multiplyScalar(-1)}}const h={a,b:l,c,normal:new L,materialIndex:0};Qt.getNormal(Mi,Ei,yi,h.normal);u.face=h}return u}class Gr extends Ut{constructor(e=1,t=1,n=1,r=1,s=1,o=1){super();this.type="BoxGeometry";this.parameters={width:e,height:t,depth:n,widthSegments:r,heightSegments:s,depthSegments:o};const a=this;r=Math.floor(r);s=Math.floor(s);o=Math.floor(o);const l=[];const c=[];const u=[];const h=[];let p=0;let m=0;g("z","y","x",-1,-1,n,t,e,o,s,0);g("z","y","x",1,-1,n,t,-e,o,s,1);g("x","z","y",1,1,e,n,t,r,o,2);g("x","z","y",1,-1,e,n,-t,r,o,3);g("x","y","z",1,-1,e,t,n,r,s,4);g("x","y","z",-1,-1,e,t,-n,r,s,5);this.setIndex(l);this.setAttribute("position",new Tt(c,3));this.setAttribute("normal",new Tt(u,3));this.setAttribute("uv",new Tt(h,2));function g(S,f,d,A,M,T,D,C,b,z,ee){const v=T/b;const y=D/z;const te=T/2;const J=D/2;const R=C/2;const k=b+1;const H=z+1;let j=0;let V=0;const X=new L;for(let Y=0;Y<H;Y++){const se=Y*y-J;for(let de=0;de<k;de++){const Re=de*v-te;X[S]=Re*A;X[f]=se*M;X[d]=R;c.push(X.x,X.y,X.z);X[S]=0;X[f]=0;X[d]=C>0?1:-1;u.push(X.x,X.y,X.z);h.push(de/b);h.push(1-Y/z);j+=1}}for(let Y=0;Y<z;Y++){for(let se=0;se<b;se++){const de=p+se+k*Y;const Re=p+se+k*(Y+1);const B=p+(se+1)+k*(Y+1);const K=p+(se+1)+k*Y;l.push(de,Re,K);l.push(Re,B,K);V+=6}}a.addGroup(m,V,ee);m+=V;p+=j}}copy(e){super.copy(e);this.parameters=Object.assign({},e.parameters);return this}static fromJSON(e){return new Gr(e.width,e.height,e.depth,e.widthSegments,e.heightSegments,e.depthSegments)}}function er(i){const e={};for(const t in i){e[t]={};for(const n in i[t]){const r=i[t][n];if(r&&(r.isColor||r.isMatrix3||r.isMatrix4||r.isVector2||r.isVector3||r.isVector4||r.isTexture||r.isQuaternion)){if(r.isRenderTargetTexture){console.warn("UniformsUtils: Textures of render targets cannot be cloned via cloneUniforms() or mergeUniforms().");e[t][n]=null}else{e[t][n]=r.clone()}}else if(Array.isArray(r)){e[t][n]=r.slice()}else{e[t][n]=r}}}return e}function Mt(i){const e={};for(let t=0;t<i.length;t++){const n=er(i[t]);for(const r in n){e[r]=n[r]}}return e}function jd(i){const e=[];for(let t=0;t<i.length;t++){e.push(i[t].clone())}return e}function Pu(i){if(i.getRenderTarget()===null){return i.outputColorSpace}return $e.workingColorSpace}const vr={clone:er,merge:Mt};var Yd="void main() {\n	gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n}";var $d="void main() {\n	gl_FragColor = vec4( 1.0, 0.0, 0.0, 1.0 );\n}";class Dt extends nr{constructor(e){super();this.isShaderMaterial=true;this.type="ShaderMaterial";this.defines={};this.uniforms={};this.uniformsGroups=[];this.vertexShader=Yd;this.fragmentShader=$d;this.linewidth=1;this.wireframe=false;this.wireframeLinewidth=1;this.fog=false;this.lights=false;this.clipping=false;this.forceSinglePass=true;this.extensions={derivatives:false,fragDepth:false,drawBuffers:false,shaderTextureLOD:false,clipCullDistance:false,multiDraw:false};this.defaultAttributeValues={"color":[1,1,1],"uv":[0,0],"uv1":[0,0]};this.index0AttributeName=void 0;this.uniformsNeedUpdate=false;this.glslVersion=null;if(e!==void 0){this.setValues(e)}}copy(e){super.copy(e);this.fragmentShader=e.fragmentShader;this.vertexShader=e.vertexShader;this.uniforms=er(e.uniforms);this.uniformsGroups=jd(e.uniformsGroups);this.defines=Object.assign({},e.defines);this.wireframe=e.wireframe;this.wireframeLinewidth=e.wireframeLinewidth;this.fog=e.fog;this.lights=e.lights;this.clipping=e.clipping;this.extensions=Object.assign({},e.extensions);this.glslVersion=e.glslVersion;return this}toJSON(e){const t=super.toJSON(e);t.glslVersion=this.glslVersion;t.uniforms={};for(const r in this.uniforms){const s=this.uniforms[r];const o=s.value;if(o&&o.isTexture){t.uniforms[r]={type:"t",value:o.toJSON(e).uuid}}else if(o&&o.isColor){t.uniforms[r]={type:"c",value:o.getHex()}}else if(o&&o.isVector2){t.uniforms[r]={type:"v2",value:o.toArray()}}else if(o&&o.isVector3){t.uniforms[r]={type:"v3",value:o.toArray()}}else if(o&&o.isVector4){t.uniforms[r]={type:"v4",value:o.toArray()}}else if(o&&o.isMatrix3){t.uniforms[r]={type:"m3",value:o.toArray()}}else if(o&&o.isMatrix4){t.uniforms[r]={type:"m4",value:o.toArray()}}else{t.uniforms[r]={value:o}}}if(Object.keys(this.defines).length>0)t.defines=this.defines;t.vertexShader=this.vertexShader;t.fragmentShader=this.fragmentShader;t.lights=this.lights;t.clipping=this.clipping;const n={};for(const r in this.extensions){if(this.extensions[r]===true)n[r]=true}if(Object.keys(n).length>0)t.extensions=n;return t}}class Du extends mt{constructor(){super();this.isCamera=true;this.type="Camera";this.matrixWorldInverse=new nt;this.projectionMatrix=new nt;this.projectionMatrixInverse=new nt;this.coordinateSystem=vn}copy(e,t){super.copy(e,t);this.matrixWorldInverse.copy(e.matrixWorldInverse);this.projectionMatrix.copy(e.projectionMatrix);this.projectionMatrixInverse.copy(e.projectionMatrixInverse);this.coordinateSystem=e.coordinateSystem;return this}getWorldDirection(e){return super.getWorldDirection(e).negate()}updateMatrixWorld(e){super.updateMatrixWorld(e);this.matrixWorldInverse.copy(this.matrixWorld).invert()}updateWorldMatrix(e,t){super.updateWorldMatrix(e,t);this.matrixWorldInverse.copy(this.matrixWorld).invert()}clone(){return new this.constructor().copy(this)}}const Cn=new L;const $l=new Pe;const Kl=new Pe;class zt extends Du{constructor(e=50,t=1,n=.1,r=2e3){super();this.isPerspectiveCamera=true;this.type="PerspectiveCamera";this.fov=e;this.zoom=1;this.near=n;this.far=r;this.focus=10;this.aspect=t;this.view=null;this.filmGauge=35;this.filmOffset=0;this.updateProjectionMatrix()}copy(e,t){super.copy(e,t);this.fov=e.fov;this.zoom=e.zoom;this.near=e.near;this.far=e.far;this.focus=e.focus;this.aspect=e.aspect;this.view=e.view===null?null:Object.assign({},e.view);this.filmGauge=e.filmGauge;this.filmOffset=e.filmOffset;return this}setFocalLength(e){const t=.5*this.getFilmHeight()/e;this.fov=oo*2*Math.atan(t);this.updateProjectionMatrix()}getFocalLength(){const e=Math.tan(ha*.5*this.fov);return .5*this.getFilmHeight()/e}getEffectiveFOV(){return oo*2*Math.atan(Math.tan(ha*.5*this.fov)/this.zoom)}getFilmWidth(){return this.filmGauge*Math.min(this.aspect,1)}getFilmHeight(){return this.filmGauge/Math.max(this.aspect,1)}getViewBounds(e,t,n){Cn.set(-1,-1,.5).applyMatrix4(this.projectionMatrixInverse);t.set(Cn.x,Cn.y).multiplyScalar(-e/Cn.z);Cn.set(1,1,.5).applyMatrix4(this.projectionMatrixInverse);n.set(Cn.x,Cn.y).multiplyScalar(-e/Cn.z)}getViewSize(e,t){this.getViewBounds(e,$l,Kl);return t.subVectors(Kl,$l)}setViewOffset(e,t,n,r,s,o){this.aspect=e/t;if(this.view===null){this.view={enabled:true,fullWidth:1,fullHeight:1,offsetX:0,offsetY:0,width:1,height:1}}this.view.enabled=true;this.view.fullWidth=e;this.view.fullHeight=t;this.view.offsetX=n;this.view.offsetY=r;this.view.width=s;this.view.height=o;this.updateProjectionMatrix()}clearViewOffset(){if(this.view!==null){this.view.enabled=false}this.updateProjectionMatrix()}updateProjectionMatrix(){const e=this.near;let t=e*Math.tan(ha*.5*this.fov)/this.zoom;let n=2*t;let r=this.aspect*n;let s=-.5*r;const o=this.view;if(this.view!==null&&this.view.enabled){const l=o.fullWidth,c=o.fullHeight;s+=o.offsetX*r/l;t-=o.offsetY*n/c;r*=o.width/l;n*=o.height/c}const a=this.filmOffset;if(a!==0)s+=e*a/this.getFilmWidth();this.projectionMatrix.makePerspective(s,s+r,t,t-n,e,this.far,this.coordinateSystem);this.projectionMatrixInverse.copy(this.projectionMatrix).invert()}toJSON(e){const t=super.toJSON(e);t.object.fov=this.fov;t.object.zoom=this.zoom;t.object.near=this.near;t.object.far=this.far;t.object.focus=this.focus;t.object.aspect=this.aspect;if(this.view!==null)t.object.view=Object.assign({},this.view);t.object.filmGauge=this.filmGauge;t.object.filmOffset=this.filmOffset;return t}}const Ti=-90;const Ai=1;class Kd extends mt{constructor(e,t,n){super();this.type="CubeCamera";this.renderTarget=n;this.coordinateSystem=null;this.activeMipmapLevel=0;const r=new zt(Ti,Ai,e,t);r.layers=this.layers;this.add(r);const s=new zt(Ti,Ai,e,t);s.layers=this.layers;this.add(s);const o=new zt(Ti,Ai,e,t);o.layers=this.layers;this.add(o);const a=new zt(Ti,Ai,e,t);a.layers=this.layers;this.add(a);const l=new zt(Ti,Ai,e,t);l.layers=this.layers;this.add(l);const c=new zt(Ti,Ai,e,t);c.layers=this.layers;this.add(c)}updateCoordinateSystem(){const e=this.coordinateSystem;const t=this.children.concat();const[n,r,s,o,a,l]=t;for(const c of t)this.remove(c);if(e===vn){n.up.set(0,1,0);n.lookAt(1,0,0);r.up.set(0,1,0);r.lookAt(-1,0,0);s.up.set(0,0,-1);s.lookAt(0,1,0);o.up.set(0,0,1);o.lookAt(0,-1,0);a.up.set(0,1,0);a.lookAt(0,0,1);l.up.set(0,1,0);l.lookAt(0,0,-1)}else if(e===Ds){n.up.set(0,-1,0);n.lookAt(-1,0,0);r.up.set(0,-1,0);r.lookAt(1,0,0);s.up.set(0,0,1);s.lookAt(0,1,0);o.up.set(0,0,-1);o.lookAt(0,-1,0);a.up.set(0,-1,0);a.lookAt(0,0,1);l.up.set(0,-1,0);l.lookAt(0,0,-1)}else{throw new Error("THREE.CubeCamera.updateCoordinateSystem(): Invalid coordinate system: "+e)}for(const c of t){this.add(c);c.updateMatrixWorld()}}update(e,t){if(this.parent===null)this.updateMatrixWorld();const{renderTarget:n,activeMipmapLevel:r}=this;if(this.coordinateSystem!==e.coordinateSystem){this.coordinateSystem=e.coordinateSystem;this.updateCoordinateSystem()}const[s,o,a,l,c,u]=this.children;const h=e.getRenderTarget();const p=e.getActiveCubeFace();const m=e.getActiveMipmapLevel();const g=e.xr.enabled;e.xr.enabled=false;const S=n.texture.generateMipmaps;n.texture.generateMipmaps=false;e.setRenderTarget(n,0,r);e.render(t,s);e.setRenderTarget(n,1,r);e.render(t,o);e.setRenderTarget(n,2,r);e.render(t,a);e.setRenderTarget(n,3,r);e.render(t,l);e.setRenderTarget(n,4,r);e.render(t,c);n.texture.generateMipmaps=S;e.setRenderTarget(n,5,r);e.render(t,u);e.setRenderTarget(h,p,m);e.xr.enabled=g;n.texture.needsPMREMUpdate=true}}class Uu extends yt{constructor(e,t,n,r,s,o,a,l,c,u){e=e!==void 0?e:[];t=t!==void 0?t:Zi;super(e,t,n,r,s,o,a,l,c,u);this.isCubeTexture=true;this.flipY=false}get images(){return this.image}set images(e){this.image=e}}class Zd extends tn{constructor(e=1,t={}){super(e,e,t);this.isWebGLCubeRenderTarget=true;const n={width:e,height:e,depth:1};const r=[n,n,n,n,n,n];this.texture=new Uu(r,t.mapping,t.wrapS,t.wrapT,t.magFilter,t.minFilter,t.format,t.type,t.anisotropy,t.colorSpace);this.texture.isRenderTargetTexture=true;this.texture.generateMipmaps=t.generateMipmaps!==void 0?t.generateMipmaps:false;this.texture.minFilter=t.minFilter!==void 0?t.minFilter:Ct}fromEquirectangularTexture(e,t){this.texture.type=t.type;this.texture.colorSpace=t.colorSpace;this.texture.generateMipmaps=t.generateMipmaps;this.texture.minFilter=t.minFilter;this.texture.magFilter=t.magFilter;const n={uniforms:{tEquirect:{value:null}},vertexShader:`

				varying vec3 vWorldDirection;

				vec3 transformDirection( in vec3 dir, in mat4 matrix ) {

					return normalize( ( matrix * vec4( dir, 0.0 ) ).xyz );

				}

				void main() {

					vWorldDirection = transformDirection( position, modelMatrix );

					#include <begin_vertex>
					#include <project_vertex>

				}
			`,fragmentShader:`

				uniform sampler2D tEquirect;

				varying vec3 vWorldDirection;

				#include <common>

				void main() {

					vec3 direction = normalize( vWorldDirection );

					vec2 sampleUV = equirectUv( direction );

					gl_FragColor = texture2D( tEquirect, sampleUV );

				}
			`};const r=new Gr(5,5,5);const s=new Dt({name:"CubemapFromEquirect",uniforms:er(n.uniforms),vertexShader:n.vertexShader,fragmentShader:n.fragmentShader,side:wt,blending:Sn});s.uniforms.tEquirect.value=t;const o=new qt(r,s);const a=t.minFilter;if(t.minFilter===ei)t.minFilter=Ct;const l=new Kd(1,10,this);l.update(e,o);t.minFilter=a;o.geometry.dispose();o.material.dispose();return this}clear(e,t,n,r){const s=e.getRenderTarget();for(let o=0;o<6;o++){e.setRenderTarget(this,o);e.clear(t,n,r)}e.setRenderTarget(s)}}const Pa=new L;const Jd=new L;const Qd=new Be;class Kn{constructor(e=new L(1,0,0),t=0){this.isPlane=true;this.normal=e;this.constant=t}set(e,t){this.normal.copy(e);this.constant=t;return this}setComponents(e,t,n,r){this.normal.set(e,t,n);this.constant=r;return this}setFromNormalAndCoplanarPoint(e,t){this.normal.copy(e);this.constant=-t.dot(this.normal);return this}setFromCoplanarPoints(e,t,n){const r=Pa.subVectors(n,t).cross(Jd.subVectors(e,t)).normalize();this.setFromNormalAndCoplanarPoint(r,e);return this}copy(e){this.normal.copy(e.normal);this.constant=e.constant;return this}normalize(){const e=1/this.normal.length();this.normal.multiplyScalar(e);this.constant*=e;return this}negate(){this.constant*=-1;this.normal.negate();return this}distanceToPoint(e){return this.normal.dot(e)+this.constant}distanceToSphere(e){return this.distanceToPoint(e.center)-e.radius}projectPoint(e,t){return t.copy(e).addScaledVector(this.normal,-this.distanceToPoint(e))}intersectLine(e,t){const n=e.delta(Pa);const r=this.normal.dot(n);if(r===0){if(this.distanceToPoint(e.start)===0){return t.copy(e.start)}return null}const s=-(e.start.dot(this.normal)+this.constant)/r;if(s<0||s>1){return null}return t.copy(e.start).addScaledVector(n,s)}intersectsLine(e){const t=this.distanceToPoint(e.start);const n=this.distanceToPoint(e.end);return t<0&&n>0||n<0&&t>0}intersectsBox(e){return e.intersectsPlane(this)}intersectsSphere(e){return e.intersectsPlane(this)}coplanarPoint(e){return e.copy(this.normal).multiplyScalar(-this.constant)}applyMatrix4(e,t){const n=t||Qd.getNormalMatrix(e);const r=this.coplanarPoint(Pa).applyMatrix4(e);const s=this.normal.applyMatrix3(n).normalize();this.constant=-r.dot(s);return this}translate(e){this.constant-=e.dot(this.normal);return this}equals(e){return e.normal.equals(this.normal)&&e.constant===this.constant}clone(){return new this.constructor().copy(this)}}const jn=new Ys;const fs=new L;class wo{constructor(e=new Kn,t=new Kn,n=new Kn,r=new Kn,s=new Kn,o=new Kn){this.planes=[e,t,n,r,s,o]}set(e,t,n,r,s,o){const a=this.planes;a[0].copy(e);a[1].copy(t);a[2].copy(n);a[3].copy(r);a[4].copy(s);a[5].copy(o);return this}copy(e){const t=this.planes;for(let n=0;n<6;n++){t[n].copy(e.planes[n])}return this}setFromProjectionMatrix(e,t=vn){const n=this.planes;const r=e.elements;const s=r[0],o=r[1],a=r[2],l=r[3];const c=r[4],u=r[5],h=r[6],p=r[7];const m=r[8],g=r[9],S=r[10],f=r[11];const d=r[12],A=r[13],M=r[14],T=r[15];n[0].setComponents(l-s,p-c,f-m,T-d).normalize();n[1].setComponents(l+s,p+c,f+m,T+d).normalize();n[2].setComponents(l+o,p+u,f+g,T+A).normalize();n[3].setComponents(l-o,p-u,f-g,T-A).normalize();n[4].setComponents(l-a,p-h,f-S,T-M).normalize();if(t===vn){n[5].setComponents(l+a,p+h,f+S,T+M).normalize()}else if(t===Ds){n[5].setComponents(a,h,S,M).normalize()}else{throw new Error("THREE.Frustum.setFromProjectionMatrix(): Invalid coordinate system: "+t)}return this}intersectsObject(e){if(e.boundingSphere!==void 0){if(e.boundingSphere===null)e.computeBoundingSphere();jn.copy(e.boundingSphere).applyMatrix4(e.matrixWorld)}else{const t=e.geometry;if(t.boundingSphere===null)t.computeBoundingSphere();jn.copy(t.boundingSphere).applyMatrix4(e.matrixWorld)}return this.intersectsSphere(jn)}intersectsSprite(e){jn.center.set(0,0,0);jn.radius=.7071067811865476;jn.applyMatrix4(e.matrixWorld);return this.intersectsSphere(jn)}intersectsSphere(e){const t=this.planes;const n=e.center;const r=-e.radius;for(let s=0;s<6;s++){const o=t[s].distanceToPoint(n);if(o<r){return false}}return true}intersectsBox(e){const t=this.planes;for(let n=0;n<6;n++){const r=t[n];fs.x=r.normal.x>0?e.max.x:e.min.x;fs.y=r.normal.y>0?e.max.y:e.min.y;fs.z=r.normal.z>0?e.max.z:e.min.z;if(r.distanceToPoint(fs)<0){return false}}return true}containsPoint(e){const t=this.planes;for(let n=0;n<6;n++){if(t[n].distanceToPoint(e)<0){return false}}return true}clone(){return new this.constructor().copy(this)}}function Nu(){let i=null;let e=false;let t=null;let n=null;function r(s,o){t(s,o);n=i.requestAnimationFrame(r)}return{start:function(){if(e===true)return;if(t===null)return;n=i.requestAnimationFrame(r);e=true},stop:function(){i.cancelAnimationFrame(n);e=false},setAnimationLoop:function(s){t=s},setContext:function(s){i=s}}}function ef(i,e){const t=e.isWebGL2;const n=new WeakMap;function r(c,u){const h=c.array;const p=c.usage;const m=h.byteLength;const g=i.createBuffer();i.bindBuffer(u,g);i.bufferData(u,h,p);c.onUploadCallback();let S;if(h instanceof Float32Array){S=i.FLOAT}else if(h instanceof Uint16Array){if(c.isFloat16BufferAttribute){if(t){S=i.HALF_FLOAT}else{throw new Error("THREE.WebGLAttributes: Usage of Float16BufferAttribute requires WebGL2.")}}else{S=i.UNSIGNED_SHORT}}else if(h instanceof Int16Array){S=i.SHORT}else if(h instanceof Uint32Array){S=i.UNSIGNED_INT}else if(h instanceof Int32Array){S=i.INT}else if(h instanceof Int8Array){S=i.BYTE}else if(h instanceof Uint8Array){S=i.UNSIGNED_BYTE}else if(h instanceof Uint8ClampedArray){S=i.UNSIGNED_BYTE}else{throw new Error("THREE.WebGLAttributes: Unsupported buffer data format: "+h)}return{buffer:g,type:S,bytesPerElement:h.BYTES_PER_ELEMENT,version:c.version,size:m}}function s(c,u,h){const p=u.array;const m=u._updateRange;const g=u.updateRanges;i.bindBuffer(h,c);if(m.count===-1&&g.length===0){i.bufferSubData(h,0,p)}if(g.length!==0){for(let S=0,f=g.length;S<f;S++){const d=g[S];if(t){i.bufferSubData(h,d.start*p.BYTES_PER_ELEMENT,p,d.start,d.count)}else{i.bufferSubData(h,d.start*p.BYTES_PER_ELEMENT,p.subarray(d.start,d.start+d.count))}}u.clearUpdateRanges()}if(m.count!==-1){if(t){i.bufferSubData(h,m.offset*p.BYTES_PER_ELEMENT,p,m.offset,m.count)}else{i.bufferSubData(h,m.offset*p.BYTES_PER_ELEMENT,p.subarray(m.offset,m.offset+m.count))}m.count=-1}u.onUploadCallback()}function o(c){if(c.isInterleavedBufferAttribute)c=c.data;return n.get(c)}function a(c){if(c.isInterleavedBufferAttribute)c=c.data;const u=n.get(c);if(u){i.deleteBuffer(u.buffer);n.delete(c)}}function l(c,u){if(c.isGLBufferAttribute){const p=n.get(c);if(!p||p.version<c.version){n.set(c,{buffer:c.buffer,type:c.type,bytesPerElement:c.elementSize,version:c.version})}return}if(c.isInterleavedBufferAttribute)c=c.data;const h=n.get(c);if(h===void 0){n.set(c,r(c,u))}else if(h.version<c.version){if(h.size!==c.array.byteLength){throw new Error("THREE.WebGLAttributes: The size of the buffer attribute's array buffer does not match the original size. Resizing buffer attributes is not supported.")}s(h.buffer,c,u);h.version=c.version}}return{get:o,remove:a,update:l}}class Hr extends Ut{constructor(e=1,t=1,n=1,r=1){super();this.type="PlaneGeometry";this.parameters={width:e,height:t,widthSegments:n,heightSegments:r};const s=e/2;const o=t/2;const a=Math.floor(n);const l=Math.floor(r);const c=a+1;const u=l+1;const h=e/a;const p=t/l;const m=[];const g=[];const S=[];const f=[];for(let d=0;d<u;d++){const A=d*p-o;for(let M=0;M<c;M++){const T=M*h-s;g.push(T,-A,0);S.push(0,0,1);f.push(M/a);f.push(1-d/l)}}for(let d=0;d<l;d++){for(let A=0;A<a;A++){const M=A+c*d;const T=A+c*(d+1);const D=A+1+c*(d+1);const C=A+1+c*d;m.push(M,T,C);m.push(T,D,C)}}this.setIndex(m);this.setAttribute("position",new Tt(g,3));this.setAttribute("normal",new Tt(S,3));this.setAttribute("uv",new Tt(f,2))}copy(e){super.copy(e);this.parameters=Object.assign({},e.parameters);return this}static fromJSON(e){return new Hr(e.width,e.height,e.widthSegments,e.heightSegments)}}var tf="#ifdef USE_ALPHAHASH\n	if ( diffuseColor.a < getAlphaHashThreshold( vPosition ) ) discard;\n#endif";var nf="#ifdef USE_ALPHAHASH\n	const float ALPHA_HASH_SCALE = 0.05;\n	float hash2D( vec2 value ) {\n		return fract( 1.0e4 * sin( 17.0 * value.x + 0.1 * value.y ) * ( 0.1 + abs( sin( 13.0 * value.y + value.x ) ) ) );\n	}\n	float hash3D( vec3 value ) {\n		return hash2D( vec2( hash2D( value.xy ), value.z ) );\n	}\n	float getAlphaHashThreshold( vec3 position ) {\n		float maxDeriv = max(\n			length( dFdx( position.xyz ) ),\n			length( dFdy( position.xyz ) )\n		);\n		float pixScale = 1.0 / ( ALPHA_HASH_SCALE * maxDeriv );\n		vec2 pixScales = vec2(\n			exp2( floor( log2( pixScale ) ) ),\n			exp2( ceil( log2( pixScale ) ) )\n		);\n		vec2 alpha = vec2(\n			hash3D( floor( pixScales.x * position.xyz ) ),\n			hash3D( floor( pixScales.y * position.xyz ) )\n		);\n		float lerpFactor = fract( log2( pixScale ) );\n		float x = ( 1.0 - lerpFactor ) * alpha.x + lerpFactor * alpha.y;\n		float a = min( lerpFactor, 1.0 - lerpFactor );\n		vec3 cases = vec3(\n			x * x / ( 2.0 * a * ( 1.0 - a ) ),\n			( x - 0.5 * a ) / ( 1.0 - a ),\n			1.0 - ( ( 1.0 - x ) * ( 1.0 - x ) / ( 2.0 * a * ( 1.0 - a ) ) )\n		);\n		float threshold = ( x < ( 1.0 - a ) )\n			? ( ( x < a ) ? cases.x : cases.y )\n			: cases.z;\n		return clamp( threshold , 1.0e-6, 1.0 );\n	}\n#endif";var rf="#ifdef USE_ALPHAMAP\n	diffuseColor.a *= texture2D( alphaMap, vAlphaMapUv ).g;\n#endif";var sf="#ifdef USE_ALPHAMAP\n	uniform sampler2D alphaMap;\n#endif";var af="#ifdef USE_ALPHATEST\n	#ifdef ALPHA_TO_COVERAGE\n	diffuseColor.a = smoothstep( alphaTest, alphaTest + fwidth( diffuseColor.a ), diffuseColor.a );\n	if ( diffuseColor.a == 0.0 ) discard;\n	#else\n	if ( diffuseColor.a < alphaTest ) discard;\n	#endif\n#endif";var of="#ifdef USE_ALPHATEST\n	uniform float alphaTest;\n#endif";var lf="#ifdef USE_AOMAP\n	float ambientOcclusion = ( texture2D( aoMap, vAoMapUv ).r - 1.0 ) * aoMapIntensity + 1.0;\n	reflectedLight.indirectDiffuse *= ambientOcclusion;\n	#if defined( USE_CLEARCOAT ) \n		clearcoatSpecularIndirect *= ambientOcclusion;\n	#endif\n	#if defined( USE_SHEEN ) \n		sheenSpecularIndirect *= ambientOcclusion;\n	#endif\n	#if defined( USE_ENVMAP ) && defined( STANDARD )\n		float dotNV = saturate( dot( geometryNormal, geometryViewDir ) );\n		reflectedLight.indirectSpecular *= computeSpecularOcclusion( dotNV, ambientOcclusion, material.roughness );\n	#endif\n#endif";var cf="#ifdef USE_AOMAP\n	uniform sampler2D aoMap;\n	uniform float aoMapIntensity;\n#endif";var uf="#ifdef USE_BATCHING\n	attribute float batchId;\n	uniform highp sampler2D batchingTexture;\n	mat4 getBatchingMatrix( const in float i ) {\n		int size = textureSize( batchingTexture, 0 ).x;\n		int j = int( i ) * 4;\n		int x = j % size;\n		int y = j / size;\n		vec4 v1 = texelFetch( batchingTexture, ivec2( x, y ), 0 );\n		vec4 v2 = texelFetch( batchingTexture, ivec2( x + 1, y ), 0 );\n		vec4 v3 = texelFetch( batchingTexture, ivec2( x + 2, y ), 0 );\n		vec4 v4 = texelFetch( batchingTexture, ivec2( x + 3, y ), 0 );\n		return mat4( v1, v2, v3, v4 );\n	}\n#endif";var hf="#ifdef USE_BATCHING\n	mat4 batchingMatrix = getBatchingMatrix( batchId );\n#endif";var df="vec3 transformed = vec3( position );\n#ifdef USE_ALPHAHASH\n	vPosition = vec3( position );\n#endif";var ff="vec3 objectNormal = vec3( normal );\n#ifdef USE_TANGENT\n	vec3 objectTangent = vec3( tangent.xyz );\n#endif";var pf="float G_BlinnPhong_Implicit( ) {\n	return 0.25;\n}\nfloat D_BlinnPhong( const in float shininess, const in float dotNH ) {\n	return RECIPROCAL_PI * ( shininess * 0.5 + 1.0 ) * pow( dotNH, shininess );\n}\nvec3 BRDF_BlinnPhong( const in vec3 lightDir, const in vec3 viewDir, const in vec3 normal, const in vec3 specularColor, const in float shininess ) {\n	vec3 halfDir = normalize( lightDir + viewDir );\n	float dotNH = saturate( dot( normal, halfDir ) );\n	float dotVH = saturate( dot( viewDir, halfDir ) );\n	vec3 F = F_Schlick( specularColor, 1.0, dotVH );\n	float G = G_BlinnPhong_Implicit( );\n	float D = D_BlinnPhong( shininess, dotNH );\n	return F * ( G * D );\n} // validated";var mf="#ifdef USE_IRIDESCENCE\n	const mat3 XYZ_TO_REC709 = mat3(\n		 3.2404542, -0.9692660,  0.0556434,\n		-1.5371385,  1.8760108, -0.2040259,\n		-0.4985314,  0.0415560,  1.0572252\n	);\n	vec3 Fresnel0ToIor( vec3 fresnel0 ) {\n		vec3 sqrtF0 = sqrt( fresnel0 );\n		return ( vec3( 1.0 ) + sqrtF0 ) / ( vec3( 1.0 ) - sqrtF0 );\n	}\n	vec3 IorToFresnel0( vec3 transmittedIor, float incidentIor ) {\n		return pow2( ( transmittedIor - vec3( incidentIor ) ) / ( transmittedIor + vec3( incidentIor ) ) );\n	}\n	float IorToFresnel0( float transmittedIor, float incidentIor ) {\n		return pow2( ( transmittedIor - incidentIor ) / ( transmittedIor + incidentIor ));\n	}\n	vec3 evalSensitivity( float OPD, vec3 shift ) {\n		float phase = 2.0 * PI * OPD * 1.0e-9;\n		vec3 val = vec3( 5.4856e-13, 4.4201e-13, 5.2481e-13 );\n		vec3 pos = vec3( 1.6810e+06, 1.7953e+06, 2.2084e+06 );\n		vec3 var = vec3( 4.3278e+09, 9.3046e+09, 6.6121e+09 );\n		vec3 xyz = val * sqrt( 2.0 * PI * var ) * cos( pos * phase + shift ) * exp( - pow2( phase ) * var );\n		xyz.x += 9.7470e-14 * sqrt( 2.0 * PI * 4.5282e+09 ) * cos( 2.2399e+06 * phase + shift[ 0 ] ) * exp( - 4.5282e+09 * pow2( phase ) );\n		xyz /= 1.0685e-7;\n		vec3 rgb = XYZ_TO_REC709 * xyz;\n		return rgb;\n	}\n	vec3 evalIridescence( float outsideIOR, float eta2, float cosTheta1, float thinFilmThickness, vec3 baseF0 ) {\n		vec3 I;\n		float iridescenceIOR = mix( outsideIOR, eta2, smoothstep( 0.0, 0.03, thinFilmThickness ) );\n		float sinTheta2Sq = pow2( outsideIOR / iridescenceIOR ) * ( 1.0 - pow2( cosTheta1 ) );\n		float cosTheta2Sq = 1.0 - sinTheta2Sq;\n		if ( cosTheta2Sq < 0.0 ) {\n			return vec3( 1.0 );\n		}\n		float cosTheta2 = sqrt( cosTheta2Sq );\n		float R0 = IorToFresnel0( iridescenceIOR, outsideIOR );\n		float R12 = F_Schlick( R0, 1.0, cosTheta1 );\n		float T121 = 1.0 - R12;\n		float phi12 = 0.0;\n		if ( iridescenceIOR < outsideIOR ) phi12 = PI;\n		float phi21 = PI - phi12;\n		vec3 baseIOR = Fresnel0ToIor( clamp( baseF0, 0.0, 0.9999 ) );		vec3 R1 = IorToFresnel0( baseIOR, iridescenceIOR );\n		vec3 R23 = F_Schlick( R1, 1.0, cosTheta2 );\n		vec3 phi23 = vec3( 0.0 );\n		if ( baseIOR[ 0 ] < iridescenceIOR ) phi23[ 0 ] = PI;\n		if ( baseIOR[ 1 ] < iridescenceIOR ) phi23[ 1 ] = PI;\n		if ( baseIOR[ 2 ] < iridescenceIOR ) phi23[ 2 ] = PI;\n		float OPD = 2.0 * iridescenceIOR * thinFilmThickness * cosTheta2;\n		vec3 phi = vec3( phi21 ) + phi23;\n		vec3 R123 = clamp( R12 * R23, 1e-5, 0.9999 );\n		vec3 r123 = sqrt( R123 );\n		vec3 Rs = pow2( T121 ) * R23 / ( vec3( 1.0 ) - R123 );\n		vec3 C0 = R12 + Rs;\n		I = C0;\n		vec3 Cm = Rs - T121;\n		for ( int m = 1; m <= 2; ++ m ) {\n			Cm *= r123;\n			vec3 Sm = 2.0 * evalSensitivity( float( m ) * OPD, float( m ) * phi );\n			I += Cm * Sm;\n		}\n		return max( I, vec3( 0.0 ) );\n	}\n#endif";var _f="#ifdef USE_BUMPMAP\n	uniform sampler2D bumpMap;\n	uniform float bumpScale;\n	vec2 dHdxy_fwd() {\n		vec2 dSTdx = dFdx( vBumpMapUv );\n		vec2 dSTdy = dFdy( vBumpMapUv );\n		float Hll = bumpScale * texture2D( bumpMap, vBumpMapUv ).x;\n		float dBx = bumpScale * texture2D( bumpMap, vBumpMapUv + dSTdx ).x - Hll;\n		float dBy = bumpScale * texture2D( bumpMap, vBumpMapUv + dSTdy ).x - Hll;\n		return vec2( dBx, dBy );\n	}\n	vec3 perturbNormalArb( vec3 surf_pos, vec3 surf_norm, vec2 dHdxy, float faceDirection ) {\n		vec3 vSigmaX = normalize( dFdx( surf_pos.xyz ) );\n		vec3 vSigmaY = normalize( dFdy( surf_pos.xyz ) );\n		vec3 vN = surf_norm;\n		vec3 R1 = cross( vSigmaY, vN );\n		vec3 R2 = cross( vN, vSigmaX );\n		float fDet = dot( vSigmaX, R1 ) * faceDirection;\n		vec3 vGrad = sign( fDet ) * ( dHdxy.x * R1 + dHdxy.y * R2 );\n		return normalize( abs( fDet ) * surf_norm - vGrad );\n	}\n#endif";var gf="#if NUM_CLIPPING_PLANES > 0\n	vec4 plane;\n	#ifdef ALPHA_TO_COVERAGE\n		float distanceToPlane, distanceGradient;\n		float clipOpacity = 1.0;\n		#pragma unroll_loop_start\n		for ( int i = 0; i < UNION_CLIPPING_PLANES; i ++ ) {\n			plane = clippingPlanes[ i ];\n			distanceToPlane = - dot( vClipPosition, plane.xyz ) + plane.w;\n			distanceGradient = fwidth( distanceToPlane ) / 2.0;\n			clipOpacity *= smoothstep( - distanceGradient, distanceGradient, distanceToPlane );\n			if ( clipOpacity == 0.0 ) discard;\n		}\n		#pragma unroll_loop_end\n		#if UNION_CLIPPING_PLANES < NUM_CLIPPING_PLANES\n			float unionClipOpacity = 1.0;\n			#pragma unroll_loop_start\n			for ( int i = UNION_CLIPPING_PLANES; i < NUM_CLIPPING_PLANES; i ++ ) {\n				plane = clippingPlanes[ i ];\n				distanceToPlane = - dot( vClipPosition, plane.xyz ) + plane.w;\n				distanceGradient = fwidth( distanceToPlane ) / 2.0;\n				unionClipOpacity *= 1.0 - smoothstep( - distanceGradient, distanceGradient, distanceToPlane );\n			}\n			#pragma unroll_loop_end\n			clipOpacity *= 1.0 - unionClipOpacity;\n		#endif\n		diffuseColor.a *= clipOpacity;\n		if ( diffuseColor.a == 0.0 ) discard;\n	#else\n		#pragma unroll_loop_start\n		for ( int i = 0; i < UNION_CLIPPING_PLANES; i ++ ) {\n			plane = clippingPlanes[ i ];\n			if ( dot( vClipPosition, plane.xyz ) > plane.w ) discard;\n		}\n		#pragma unroll_loop_end\n		#if UNION_CLIPPING_PLANES < NUM_CLIPPING_PLANES\n			bool clipped = true;\n			#pragma unroll_loop_start\n			for ( int i = UNION_CLIPPING_PLANES; i < NUM_CLIPPING_PLANES; i ++ ) {\n				plane = clippingPlanes[ i ];\n				clipped = ( dot( vClipPosition, plane.xyz ) > plane.w ) && clipped;\n			}\n			#pragma unroll_loop_end\n			if ( clipped ) discard;\n		#endif\n	#endif\n#endif";var vf="#if NUM_CLIPPING_PLANES > 0\n	varying vec3 vClipPosition;\n	uniform vec4 clippingPlanes[ NUM_CLIPPING_PLANES ];\n#endif";var xf="#if NUM_CLIPPING_PLANES > 0\n	varying vec3 vClipPosition;\n#endif";var Sf="#if NUM_CLIPPING_PLANES > 0\n	vClipPosition = - mvPosition.xyz;\n#endif";var Mf="#if defined( USE_COLOR_ALPHA )\n	diffuseColor *= vColor;\n#elif defined( USE_COLOR )\n	diffuseColor.rgb *= vColor;\n#endif";var Ef="#if defined( USE_COLOR_ALPHA )\n	varying vec4 vColor;\n#elif defined( USE_COLOR )\n	varying vec3 vColor;\n#endif";var yf="#if defined( USE_COLOR_ALPHA )\n	varying vec4 vColor;\n#elif defined( USE_COLOR ) || defined( USE_INSTANCING_COLOR )\n	varying vec3 vColor;\n#endif";var Tf="#if defined( USE_COLOR_ALPHA )\n	vColor = vec4( 1.0 );\n#elif defined( USE_COLOR ) || defined( USE_INSTANCING_COLOR )\n	vColor = vec3( 1.0 );\n#endif\n#ifdef USE_COLOR\n	vColor *= color;\n#endif\n#ifdef USE_INSTANCING_COLOR\n	vColor.xyz *= instanceColor.xyz;\n#endif";var Af="#define PI 3.141592653589793\n#define PI2 6.283185307179586\n#define PI_HALF 1.5707963267948966\n#define RECIPROCAL_PI 0.3183098861837907\n#define RECIPROCAL_PI2 0.15915494309189535\n#define EPSILON 1e-6\n#ifndef saturate\n#define saturate( a ) clamp( a, 0.0, 1.0 )\n#endif\n#define whiteComplement( a ) ( 1.0 - saturate( a ) )\nfloat pow2( const in float x ) { return x*x; }\nvec3 pow2( const in vec3 x ) { return x*x; }\nfloat pow3( const in float x ) { return x*x*x; }\nfloat pow4( const in float x ) { float x2 = x*x; return x2*x2; }\nfloat max3( const in vec3 v ) { return max( max( v.x, v.y ), v.z ); }\nfloat average( const in vec3 v ) { return dot( v, vec3( 0.3333333 ) ); }\nhighp float rand( const in vec2 uv ) {\n	const highp float a = 12.9898, b = 78.233, c = 43758.5453;\n	highp float dt = dot( uv.xy, vec2( a,b ) ), sn = mod( dt, PI );\n	return fract( sin( sn ) * c );\n}\n#ifdef HIGH_PRECISION\n	float precisionSafeLength( vec3 v ) { return length( v ); }\n#else\n	float precisionSafeLength( vec3 v ) {\n		float maxComponent = max3( abs( v ) );\n		return length( v / maxComponent ) * maxComponent;\n	}\n#endif\nstruct IncidentLight {\n	vec3 color;\n	vec3 direction;\n	bool visible;\n};\nstruct ReflectedLight {\n	vec3 directDiffuse;\n	vec3 directSpecular;\n	vec3 indirectDiffuse;\n	vec3 indirectSpecular;\n};\n#ifdef USE_ALPHAHASH\n	varying vec3 vPosition;\n#endif\nvec3 transformDirection( in vec3 dir, in mat4 matrix ) {\n	return normalize( ( matrix * vec4( dir, 0.0 ) ).xyz );\n}\nvec3 inverseTransformDirection( in vec3 dir, in mat4 matrix ) {\n	return normalize( ( vec4( dir, 0.0 ) * matrix ).xyz );\n}\nmat3 transposeMat3( const in mat3 m ) {\n	mat3 tmp;\n	tmp[ 0 ] = vec3( m[ 0 ].x, m[ 1 ].x, m[ 2 ].x );\n	tmp[ 1 ] = vec3( m[ 0 ].y, m[ 1 ].y, m[ 2 ].y );\n	tmp[ 2 ] = vec3( m[ 0 ].z, m[ 1 ].z, m[ 2 ].z );\n	return tmp;\n}\nfloat luminance( const in vec3 rgb ) {\n	const vec3 weights = vec3( 0.2126729, 0.7151522, 0.0721750 );\n	return dot( weights, rgb );\n}\nbool isPerspectiveMatrix( mat4 m ) {\n	return m[ 2 ][ 3 ] == - 1.0;\n}\nvec2 equirectUv( in vec3 dir ) {\n	float u = atan( dir.z, dir.x ) * RECIPROCAL_PI2 + 0.5;\n	float v = asin( clamp( dir.y, - 1.0, 1.0 ) ) * RECIPROCAL_PI + 0.5;\n	return vec2( u, v );\n}\nvec3 BRDF_Lambert( const in vec3 diffuseColor ) {\n	return RECIPROCAL_PI * diffuseColor;\n}\nvec3 F_Schlick( const in vec3 f0, const in float f90, const in float dotVH ) {\n	float fresnel = exp2( ( - 5.55473 * dotVH - 6.98316 ) * dotVH );\n	return f0 * ( 1.0 - fresnel ) + ( f90 * fresnel );\n}\nfloat F_Schlick( const in float f0, const in float f90, const in float dotVH ) {\n	float fresnel = exp2( ( - 5.55473 * dotVH - 6.98316 ) * dotVH );\n	return f0 * ( 1.0 - fresnel ) + ( f90 * fresnel );\n} // validated";var bf="#ifdef ENVMAP_TYPE_CUBE_UV\n	#define cubeUV_minMipLevel 4.0\n	#define cubeUV_minTileSize 16.0\n	float getFace( vec3 direction ) {\n		vec3 absDirection = abs( direction );\n		float face = - 1.0;\n		if ( absDirection.x > absDirection.z ) {\n			if ( absDirection.x > absDirection.y )\n				face = direction.x > 0.0 ? 0.0 : 3.0;\n			else\n				face = direction.y > 0.0 ? 1.0 : 4.0;\n		} else {\n			if ( absDirection.z > absDirection.y )\n				face = direction.z > 0.0 ? 2.0 : 5.0;\n			else\n				face = direction.y > 0.0 ? 1.0 : 4.0;\n		}\n		return face;\n	}\n	vec2 getUV( vec3 direction, float face ) {\n		vec2 uv;\n		if ( face == 0.0 ) {\n			uv = vec2( direction.z, direction.y ) / abs( direction.x );\n		} else if ( face == 1.0 ) {\n			uv = vec2( - direction.x, - direction.z ) / abs( direction.y );\n		} else if ( face == 2.0 ) {\n			uv = vec2( - direction.x, direction.y ) / abs( direction.z );\n		} else if ( face == 3.0 ) {\n			uv = vec2( - direction.z, direction.y ) / abs( direction.x );\n		} else if ( face == 4.0 ) {\n			uv = vec2( - direction.x, direction.z ) / abs( direction.y );\n		} else {\n			uv = vec2( direction.x, direction.y ) / abs( direction.z );\n		}\n		return 0.5 * ( uv + 1.0 );\n	}\n	vec3 bilinearCubeUV( sampler2D envMap, vec3 direction, float mipInt ) {\n		float face = getFace( direction );\n		float filterInt = max( cubeUV_minMipLevel - mipInt, 0.0 );\n		mipInt = max( mipInt, cubeUV_minMipLevel );\n		float faceSize = exp2( mipInt );\n		highp vec2 uv = getUV( direction, face ) * ( faceSize - 2.0 ) + 1.0;\n		if ( face > 2.0 ) {\n			uv.y += faceSize;\n			face -= 3.0;\n		}\n		uv.x += face * faceSize;\n		uv.x += filterInt * 3.0 * cubeUV_minTileSize;\n		uv.y += 4.0 * ( exp2( CUBEUV_MAX_MIP ) - faceSize );\n		uv.x *= CUBEUV_TEXEL_WIDTH;\n		uv.y *= CUBEUV_TEXEL_HEIGHT;\n		#ifdef texture2DGradEXT\n			return texture2DGradEXT( envMap, uv, vec2( 0.0 ), vec2( 0.0 ) ).rgb;\n		#else\n			return texture2D( envMap, uv ).rgb;\n		#endif\n	}\n	#define cubeUV_r0 1.0\n	#define cubeUV_m0 - 2.0\n	#define cubeUV_r1 0.8\n	#define cubeUV_m1 - 1.0\n	#define cubeUV_r4 0.4\n	#define cubeUV_m4 2.0\n	#define cubeUV_r5 0.305\n	#define cubeUV_m5 3.0\n	#define cubeUV_r6 0.21\n	#define cubeUV_m6 4.0\n	float roughnessToMip( float roughness ) {\n		float mip = 0.0;\n		if ( roughness >= cubeUV_r1 ) {\n			mip = ( cubeUV_r0 - roughness ) * ( cubeUV_m1 - cubeUV_m0 ) / ( cubeUV_r0 - cubeUV_r1 ) + cubeUV_m0;\n		} else if ( roughness >= cubeUV_r4 ) {\n			mip = ( cubeUV_r1 - roughness ) * ( cubeUV_m4 - cubeUV_m1 ) / ( cubeUV_r1 - cubeUV_r4 ) + cubeUV_m1;\n		} else if ( roughness >= cubeUV_r5 ) {\n			mip = ( cubeUV_r4 - roughness ) * ( cubeUV_m5 - cubeUV_m4 ) / ( cubeUV_r4 - cubeUV_r5 ) + cubeUV_m4;\n		} else if ( roughness >= cubeUV_r6 ) {\n			mip = ( cubeUV_r5 - roughness ) * ( cubeUV_m6 - cubeUV_m5 ) / ( cubeUV_r5 - cubeUV_r6 ) + cubeUV_m5;\n		} else {\n			mip = - 2.0 * log2( 1.16 * roughness );		}\n		return mip;\n	}\n	vec4 textureCubeUV( sampler2D envMap, vec3 sampleDir, float roughness ) {\n		float mip = clamp( roughnessToMip( roughness ), cubeUV_m0, CUBEUV_MAX_MIP );\n		float mipF = fract( mip );\n		float mipInt = floor( mip );\n		vec3 color0 = bilinearCubeUV( envMap, sampleDir, mipInt );\n		if ( mipF == 0.0 ) {\n			return vec4( color0, 1.0 );\n		} else {\n			vec3 color1 = bilinearCubeUV( envMap, sampleDir, mipInt + 1.0 );\n			return vec4( mix( color0, color1, mipF ), 1.0 );\n		}\n	}\n#endif";var Cf="vec3 transformedNormal = objectNormal;\n#ifdef USE_TANGENT\n	vec3 transformedTangent = objectTangent;\n#endif\n#ifdef USE_BATCHING\n	mat3 bm = mat3( batchingMatrix );\n	transformedNormal /= vec3( dot( bm[ 0 ], bm[ 0 ] ), dot( bm[ 1 ], bm[ 1 ] ), dot( bm[ 2 ], bm[ 2 ] ) );\n	transformedNormal = bm * transformedNormal;\n	#ifdef USE_TANGENT\n		transformedTangent = bm * transformedTangent;\n	#endif\n#endif\n#ifdef USE_INSTANCING\n	mat3 im = mat3( instanceMatrix );\n	transformedNormal /= vec3( dot( im[ 0 ], im[ 0 ] ), dot( im[ 1 ], im[ 1 ] ), dot( im[ 2 ], im[ 2 ] ) );\n	transformedNormal = im * transformedNormal;\n	#ifdef USE_TANGENT\n		transformedTangent = im * transformedTangent;\n	#endif\n#endif\ntransformedNormal = normalMatrix * transformedNormal;\n#ifdef FLIP_SIDED\n	transformedNormal = - transformedNormal;\n#endif\n#ifdef USE_TANGENT\n	transformedTangent = ( modelViewMatrix * vec4( transformedTangent, 0.0 ) ).xyz;\n	#ifdef FLIP_SIDED\n		transformedTangent = - transformedTangent;\n	#endif\n#endif";var wf="#ifdef USE_DISPLACEMENTMAP\n	uniform sampler2D displacementMap;\n	uniform float displacementScale;\n	uniform float displacementBias;\n#endif";var Rf="#ifdef USE_DISPLACEMENTMAP\n	transformed += normalize( objectNormal ) * ( texture2D( displacementMap, vDisplacementMapUv ).x * displacementScale + displacementBias );\n#endif";var Lf="#ifdef USE_EMISSIVEMAP\n	vec4 emissiveColor = texture2D( emissiveMap, vEmissiveMapUv );\n	totalEmissiveRadiance *= emissiveColor.rgb;\n#endif";var Pf="#ifdef USE_EMISSIVEMAP\n	uniform sampler2D emissiveMap;\n#endif";var Df="gl_FragColor = linearToOutputTexel( gl_FragColor );";var Uf="\nconst mat3 LINEAR_SRGB_TO_LINEAR_DISPLAY_P3 = mat3(\n	vec3( 0.8224621, 0.177538, 0.0 ),\n	vec3( 0.0331941, 0.9668058, 0.0 ),\n	vec3( 0.0170827, 0.0723974, 0.9105199 )\n);\nconst mat3 LINEAR_DISPLAY_P3_TO_LINEAR_SRGB = mat3(\n	vec3( 1.2249401, - 0.2249404, 0.0 ),\n	vec3( - 0.0420569, 1.0420571, 0.0 ),\n	vec3( - 0.0196376, - 0.0786361, 1.0982735 )\n);\nvec4 LinearSRGBToLinearDisplayP3( in vec4 value ) {\n	return vec4( value.rgb * LINEAR_SRGB_TO_LINEAR_DISPLAY_P3, value.a );\n}\nvec4 LinearDisplayP3ToLinearSRGB( in vec4 value ) {\n	return vec4( value.rgb * LINEAR_DISPLAY_P3_TO_LINEAR_SRGB, value.a );\n}\nvec4 LinearTransferOETF( in vec4 value ) {\n	return value;\n}\nvec4 sRGBTransferOETF( in vec4 value ) {\n	return vec4( mix( pow( value.rgb, vec3( 0.41666 ) ) * 1.055 - vec3( 0.055 ), value.rgb * 12.92, vec3( lessThanEqual( value.rgb, vec3( 0.0031308 ) ) ) ), value.a );\n}\nvec4 LinearToLinear( in vec4 value ) {\n	return value;\n}\nvec4 LinearTosRGB( in vec4 value ) {\n	return sRGBTransferOETF( value );\n}";var Nf="#ifdef USE_ENVMAP\n	#ifdef ENV_WORLDPOS\n		vec3 cameraToFrag;\n		if ( isOrthographic ) {\n			cameraToFrag = normalize( vec3( - viewMatrix[ 0 ][ 2 ], - viewMatrix[ 1 ][ 2 ], - viewMatrix[ 2 ][ 2 ] ) );\n		} else {\n			cameraToFrag = normalize( vWorldPosition - cameraPosition );\n		}\n		vec3 worldNormal = inverseTransformDirection( normal, viewMatrix );\n		#ifdef ENVMAP_MODE_REFLECTION\n			vec3 reflectVec = reflect( cameraToFrag, worldNormal );\n		#else\n			vec3 reflectVec = refract( cameraToFrag, worldNormal, refractionRatio );\n		#endif\n	#else\n		vec3 reflectVec = vReflect;\n	#endif\n	#ifdef ENVMAP_TYPE_CUBE\n		vec4 envColor = textureCube( envMap, envMapRotation * vec3( flipEnvMap * reflectVec.x, reflectVec.yz ) );\n	#else\n		vec4 envColor = vec4( 0.0 );\n	#endif\n	#ifdef ENVMAP_BLENDING_MULTIPLY\n		outgoingLight = mix( outgoingLight, outgoingLight * envColor.xyz, specularStrength * reflectivity );\n	#elif defined( ENVMAP_BLENDING_MIX )\n		outgoingLight = mix( outgoingLight, envColor.xyz, specularStrength * reflectivity );\n	#elif defined( ENVMAP_BLENDING_ADD )\n		outgoingLight += envColor.xyz * specularStrength * reflectivity;\n	#endif\n#endif";var If="#ifdef USE_ENVMAP\n	uniform float envMapIntensity;\n	uniform float flipEnvMap;\n	uniform mat3 envMapRotation;\n	#ifdef ENVMAP_TYPE_CUBE\n		uniform samplerCube envMap;\n	#else\n		uniform sampler2D envMap;\n	#endif\n	\n#endif";var Ff="#ifdef USE_ENVMAP\n	uniform float reflectivity;\n	#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG ) || defined( LAMBERT )\n		#define ENV_WORLDPOS\n	#endif\n	#ifdef ENV_WORLDPOS\n		varying vec3 vWorldPosition;\n		uniform float refractionRatio;\n	#else\n		varying vec3 vReflect;\n	#endif\n#endif";var Of="#ifdef USE_ENVMAP\n	#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG ) || defined( LAMBERT )\n		#define ENV_WORLDPOS\n	#endif\n	#ifdef ENV_WORLDPOS\n		\n		varying vec3 vWorldPosition;\n	#else\n		varying vec3 vReflect;\n		uniform float refractionRatio;\n	#endif\n#endif";var Bf="#ifdef USE_ENVMAP\n	#ifdef ENV_WORLDPOS\n		vWorldPosition = worldPosition.xyz;\n	#else\n		vec3 cameraToVertex;\n		if ( isOrthographic ) {\n			cameraToVertex = normalize( vec3( - viewMatrix[ 0 ][ 2 ], - viewMatrix[ 1 ][ 2 ], - viewMatrix[ 2 ][ 2 ] ) );\n		} else {\n			cameraToVertex = normalize( worldPosition.xyz - cameraPosition );\n		}\n		vec3 worldNormal = inverseTransformDirection( transformedNormal, viewMatrix );\n		#ifdef ENVMAP_MODE_REFLECTION\n			vReflect = reflect( cameraToVertex, worldNormal );\n		#else\n			vReflect = refract( cameraToVertex, worldNormal, refractionRatio );\n		#endif\n	#endif\n#endif";var zf="#ifdef USE_FOG\n	vFogDepth = - mvPosition.z;\n#endif";var Gf="#ifdef USE_FOG\n	varying float vFogDepth;\n#endif";var Hf="#ifdef USE_FOG\n	#ifdef FOG_EXP2\n		float fogFactor = 1.0 - exp( - fogDensity * fogDensity * vFogDepth * vFogDepth );\n	#else\n		float fogFactor = smoothstep( fogNear, fogFar, vFogDepth );\n	#endif\n	gl_FragColor.rgb = mix( gl_FragColor.rgb, fogColor, fogFactor );\n#endif";var Vf="#ifdef USE_FOG\n	uniform vec3 fogColor;\n	varying float vFogDepth;\n	#ifdef FOG_EXP2\n		uniform float fogDensity;\n	#else\n		uniform float fogNear;\n		uniform float fogFar;\n	#endif\n#endif";var kf="#ifdef USE_GRADIENTMAP\n	uniform sampler2D gradientMap;\n#endif\nvec3 getGradientIrradiance( vec3 normal, vec3 lightDirection ) {\n	float dotNL = dot( normal, lightDirection );\n	vec2 coord = vec2( dotNL * 0.5 + 0.5, 0.0 );\n	#ifdef USE_GRADIENTMAP\n		return vec3( texture2D( gradientMap, coord ).r );\n	#else\n		vec2 fw = fwidth( coord ) * 0.5;\n		return mix( vec3( 0.7 ), vec3( 1.0 ), smoothstep( 0.7 - fw.x, 0.7 + fw.x, coord.x ) );\n	#endif\n}";var Wf="#ifdef USE_LIGHTMAP\n	vec4 lightMapTexel = texture2D( lightMap, vLightMapUv );\n	vec3 lightMapIrradiance = lightMapTexel.rgb * lightMapIntensity;\n	reflectedLight.indirectDiffuse += lightMapIrradiance;\n#endif";var Xf="#ifdef USE_LIGHTMAP\n	uniform sampler2D lightMap;\n	uniform float lightMapIntensity;\n#endif";var qf="LambertMaterial material;\nmaterial.diffuseColor = diffuseColor.rgb;\nmaterial.specularStrength = specularStrength;";var jf="varying vec3 vViewPosition;\nstruct LambertMaterial {\n	vec3 diffuseColor;\n	float specularStrength;\n};\nvoid RE_Direct_Lambert( const in IncidentLight directLight, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in LambertMaterial material, inout ReflectedLight reflectedLight ) {\n	float dotNL = saturate( dot( geometryNormal, directLight.direction ) );\n	vec3 irradiance = dotNL * directLight.color;\n	reflectedLight.directDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\n}\nvoid RE_IndirectDiffuse_Lambert( const in vec3 irradiance, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in LambertMaterial material, inout ReflectedLight reflectedLight ) {\n	reflectedLight.indirectDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\n}\n#define RE_Direct				RE_Direct_Lambert\n#define RE_IndirectDiffuse		RE_IndirectDiffuse_Lambert";var Yf="uniform bool receiveShadow;\nuniform vec3 ambientLightColor;\n#if defined( USE_LIGHT_PROBES )\n	uniform vec3 lightProbe[ 9 ];\n#endif\nvec3 shGetIrradianceAt( in vec3 normal, in vec3 shCoefficients[ 9 ] ) {\n	float x = normal.x, y = normal.y, z = normal.z;\n	vec3 result = shCoefficients[ 0 ] * 0.886227;\n	result += shCoefficients[ 1 ] * 2.0 * 0.511664 * y;\n	result += shCoefficients[ 2 ] * 2.0 * 0.511664 * z;\n	result += shCoefficients[ 3 ] * 2.0 * 0.511664 * x;\n	result += shCoefficients[ 4 ] * 2.0 * 0.429043 * x * y;\n	result += shCoefficients[ 5 ] * 2.0 * 0.429043 * y * z;\n	result += shCoefficients[ 6 ] * ( 0.743125 * z * z - 0.247708 );\n	result += shCoefficients[ 7 ] * 2.0 * 0.429043 * x * z;\n	result += shCoefficients[ 8 ] * 0.429043 * ( x * x - y * y );\n	return result;\n}\nvec3 getLightProbeIrradiance( const in vec3 lightProbe[ 9 ], const in vec3 normal ) {\n	vec3 worldNormal = inverseTransformDirection( normal, viewMatrix );\n	vec3 irradiance = shGetIrradianceAt( worldNormal, lightProbe );\n	return irradiance;\n}\nvec3 getAmbientLightIrradiance( const in vec3 ambientLightColor ) {\n	vec3 irradiance = ambientLightColor;\n	return irradiance;\n}\nfloat getDistanceAttenuation( const in float lightDistance, const in float cutoffDistance, const in float decayExponent ) {\n	#if defined ( LEGACY_LIGHTS )\n		if ( cutoffDistance > 0.0 && decayExponent > 0.0 ) {\n			return pow( saturate( - lightDistance / cutoffDistance + 1.0 ), decayExponent );\n		}\n		return 1.0;\n	#else\n		float distanceFalloff = 1.0 / max( pow( lightDistance, decayExponent ), 0.01 );\n		if ( cutoffDistance > 0.0 ) {\n			distanceFalloff *= pow2( saturate( 1.0 - pow4( lightDistance / cutoffDistance ) ) );\n		}\n		return distanceFalloff;\n	#endif\n}\nfloat getSpotAttenuation( const in float coneCosine, const in float penumbraCosine, const in float angleCosine ) {\n	return smoothstep( coneCosine, penumbraCosine, angleCosine );\n}\n#if NUM_DIR_LIGHTS > 0\n	struct DirectionalLight {\n		vec3 direction;\n		vec3 color;\n	};\n	uniform DirectionalLight directionalLights[ NUM_DIR_LIGHTS ];\n	void getDirectionalLightInfo( const in DirectionalLight directionalLight, out IncidentLight light ) {\n		light.color = directionalLight.color;\n		light.direction = directionalLight.direction;\n		light.visible = true;\n	}\n#endif\n#if NUM_POINT_LIGHTS > 0\n	struct PointLight {\n		vec3 position;\n		vec3 color;\n		float distance;\n		float decay;\n	};\n	uniform PointLight pointLights[ NUM_POINT_LIGHTS ];\n	void getPointLightInfo( const in PointLight pointLight, const in vec3 geometryPosition, out IncidentLight light ) {\n		vec3 lVector = pointLight.position - geometryPosition;\n		light.direction = normalize( lVector );\n		float lightDistance = length( lVector );\n		light.color = pointLight.color;\n		light.color *= getDistanceAttenuation( lightDistance, pointLight.distance, pointLight.decay );\n		light.visible = ( light.color != vec3( 0.0 ) );\n	}\n#endif\n#if NUM_SPOT_LIGHTS > 0\n	struct SpotLight {\n		vec3 position;\n		vec3 direction;\n		vec3 color;\n		float distance;\n		float decay;\n		float coneCos;\n		float penumbraCos;\n	};\n	uniform SpotLight spotLights[ NUM_SPOT_LIGHTS ];\n	void getSpotLightInfo( const in SpotLight spotLight, const in vec3 geometryPosition, out IncidentLight light ) {\n		vec3 lVector = spotLight.position - geometryPosition;\n		light.direction = normalize( lVector );\n		float angleCos = dot( light.direction, spotLight.direction );\n		float spotAttenuation = getSpotAttenuation( spotLight.coneCos, spotLight.penumbraCos, angleCos );\n		if ( spotAttenuation > 0.0 ) {\n			float lightDistance = length( lVector );\n			light.color = spotLight.color * spotAttenuation;\n			light.color *= getDistanceAttenuation( lightDistance, spotLight.distance, spotLight.decay );\n			light.visible = ( light.color != vec3( 0.0 ) );\n		} else {\n			light.color = vec3( 0.0 );\n			light.visible = false;\n		}\n	}\n#endif\n#if NUM_RECT_AREA_LIGHTS > 0\n	struct RectAreaLight {\n		vec3 color;\n		vec3 position;\n		vec3 halfWidth;\n		vec3 halfHeight;\n	};\n	uniform sampler2D ltc_1;	uniform sampler2D ltc_2;\n	uniform RectAreaLight rectAreaLights[ NUM_RECT_AREA_LIGHTS ];\n#endif\n#if NUM_HEMI_LIGHTS > 0\n	struct HemisphereLight {\n		vec3 direction;\n		vec3 skyColor;\n		vec3 groundColor;\n	};\n	uniform HemisphereLight hemisphereLights[ NUM_HEMI_LIGHTS ];\n	vec3 getHemisphereLightIrradiance( const in HemisphereLight hemiLight, const in vec3 normal ) {\n		float dotNL = dot( normal, hemiLight.direction );\n		float hemiDiffuseWeight = 0.5 * dotNL + 0.5;\n		vec3 irradiance = mix( hemiLight.groundColor, hemiLight.skyColor, hemiDiffuseWeight );\n		return irradiance;\n	}\n#endif";var $f="#ifdef USE_ENVMAP\n	vec3 getIBLIrradiance( const in vec3 normal ) {\n		#ifdef ENVMAP_TYPE_CUBE_UV\n			vec3 worldNormal = inverseTransformDirection( normal, viewMatrix );\n			vec4 envMapColor = textureCubeUV( envMap, envMapRotation * worldNormal, 1.0 );\n			return PI * envMapColor.rgb * envMapIntensity;\n		#else\n			return vec3( 0.0 );\n		#endif\n	}\n	vec3 getIBLRadiance( const in vec3 viewDir, const in vec3 normal, const in float roughness ) {\n		#ifdef ENVMAP_TYPE_CUBE_UV\n			vec3 reflectVec = reflect( - viewDir, normal );\n			reflectVec = normalize( mix( reflectVec, normal, roughness * roughness) );\n			reflectVec = inverseTransformDirection( reflectVec, viewMatrix );\n			vec4 envMapColor = textureCubeUV( envMap, envMapRotation * reflectVec, roughness );\n			return envMapColor.rgb * envMapIntensity;\n		#else\n			return vec3( 0.0 );\n		#endif\n	}\n	#ifdef USE_ANISOTROPY\n		vec3 getIBLAnisotropyRadiance( const in vec3 viewDir, const in vec3 normal, const in float roughness, const in vec3 bitangent, const in float anisotropy ) {\n			#ifdef ENVMAP_TYPE_CUBE_UV\n				vec3 bentNormal = cross( bitangent, viewDir );\n				bentNormal = normalize( cross( bentNormal, bitangent ) );\n				bentNormal = normalize( mix( bentNormal, normal, pow2( pow2( 1.0 - anisotropy * ( 1.0 - roughness ) ) ) ) );\n				return getIBLRadiance( viewDir, bentNormal, roughness );\n			#else\n				return vec3( 0.0 );\n			#endif\n		}\n	#endif\n#endif";var Kf="ToonMaterial material;\nmaterial.diffuseColor = diffuseColor.rgb;";var Zf="varying vec3 vViewPosition;\nstruct ToonMaterial {\n	vec3 diffuseColor;\n};\nvoid RE_Direct_Toon( const in IncidentLight directLight, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in ToonMaterial material, inout ReflectedLight reflectedLight ) {\n	vec3 irradiance = getGradientIrradiance( geometryNormal, directLight.direction ) * directLight.color;\n	reflectedLight.directDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\n}\nvoid RE_IndirectDiffuse_Toon( const in vec3 irradiance, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in ToonMaterial material, inout ReflectedLight reflectedLight ) {\n	reflectedLight.indirectDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\n}\n#define RE_Direct				RE_Direct_Toon\n#define RE_IndirectDiffuse		RE_IndirectDiffuse_Toon";var Jf="BlinnPhongMaterial material;\nmaterial.diffuseColor = diffuseColor.rgb;\nmaterial.specularColor = specular;\nmaterial.specularShininess = shininess;\nmaterial.specularStrength = specularStrength;";var Qf="varying vec3 vViewPosition;\nstruct BlinnPhongMaterial {\n	vec3 diffuseColor;\n	vec3 specularColor;\n	float specularShininess;\n	float specularStrength;\n};\nvoid RE_Direct_BlinnPhong( const in IncidentLight directLight, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {\n	float dotNL = saturate( dot( geometryNormal, directLight.direction ) );\n	vec3 irradiance = dotNL * directLight.color;\n	reflectedLight.directDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\n	reflectedLight.directSpecular += irradiance * BRDF_BlinnPhong( directLight.direction, geometryViewDir, geometryNormal, material.specularColor, material.specularShininess ) * material.specularStrength;\n}\nvoid RE_IndirectDiffuse_BlinnPhong( const in vec3 irradiance, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {\n	reflectedLight.indirectDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\n}\n#define RE_Direct				RE_Direct_BlinnPhong\n#define RE_IndirectDiffuse		RE_IndirectDiffuse_BlinnPhong";var ep="PhysicalMaterial material;\nmaterial.diffuseColor = diffuseColor.rgb * ( 1.0 - metalnessFactor );\nvec3 dxy = max( abs( dFdx( nonPerturbedNormal ) ), abs( dFdy( nonPerturbedNormal ) ) );\nfloat geometryRoughness = max( max( dxy.x, dxy.y ), dxy.z );\nmaterial.roughness = max( roughnessFactor, 0.0525 );material.roughness += geometryRoughness;\nmaterial.roughness = min( material.roughness, 1.0 );\n#ifdef IOR\n	material.ior = ior;\n	#ifdef USE_SPECULAR\n		float specularIntensityFactor = specularIntensity;\n		vec3 specularColorFactor = specularColor;\n		#ifdef USE_SPECULAR_COLORMAP\n			specularColorFactor *= texture2D( specularColorMap, vSpecularColorMapUv ).rgb;\n		#endif\n		#ifdef USE_SPECULAR_INTENSITYMAP\n			specularIntensityFactor *= texture2D( specularIntensityMap, vSpecularIntensityMapUv ).a;\n		#endif\n		material.specularF90 = mix( specularIntensityFactor, 1.0, metalnessFactor );\n	#else\n		float specularIntensityFactor = 1.0;\n		vec3 specularColorFactor = vec3( 1.0 );\n		material.specularF90 = 1.0;\n	#endif\n	material.specularColor = mix( min( pow2( ( material.ior - 1.0 ) / ( material.ior + 1.0 ) ) * specularColorFactor, vec3( 1.0 ) ) * specularIntensityFactor, diffuseColor.rgb, metalnessFactor );\n#else\n	material.specularColor = mix( vec3( 0.04 ), diffuseColor.rgb, metalnessFactor );\n	material.specularF90 = 1.0;\n#endif\n#ifdef USE_CLEARCOAT\n	material.clearcoat = clearcoat;\n	material.clearcoatRoughness = clearcoatRoughness;\n	material.clearcoatF0 = vec3( 0.04 );\n	material.clearcoatF90 = 1.0;\n	#ifdef USE_CLEARCOATMAP\n		material.clearcoat *= texture2D( clearcoatMap, vClearcoatMapUv ).x;\n	#endif\n	#ifdef USE_CLEARCOAT_ROUGHNESSMAP\n		material.clearcoatRoughness *= texture2D( clearcoatRoughnessMap, vClearcoatRoughnessMapUv ).y;\n	#endif\n	material.clearcoat = saturate( material.clearcoat );	material.clearcoatRoughness = max( material.clearcoatRoughness, 0.0525 );\n	material.clearcoatRoughness += geometryRoughness;\n	material.clearcoatRoughness = min( material.clearcoatRoughness, 1.0 );\n#endif\n#ifdef USE_IRIDESCENCE\n	material.iridescence = iridescence;\n	material.iridescenceIOR = iridescenceIOR;\n	#ifdef USE_IRIDESCENCEMAP\n		material.iridescence *= texture2D( iridescenceMap, vIridescenceMapUv ).r;\n	#endif\n	#ifdef USE_IRIDESCENCE_THICKNESSMAP\n		material.iridescenceThickness = (iridescenceThicknessMaximum - iridescenceThicknessMinimum) * texture2D( iridescenceThicknessMap, vIridescenceThicknessMapUv ).g + iridescenceThicknessMinimum;\n	#else\n		material.iridescenceThickness = iridescenceThicknessMaximum;\n	#endif\n#endif\n#ifdef USE_SHEEN\n	material.sheenColor = sheenColor;\n	#ifdef USE_SHEEN_COLORMAP\n		material.sheenColor *= texture2D( sheenColorMap, vSheenColorMapUv ).rgb;\n	#endif\n	material.sheenRoughness = clamp( sheenRoughness, 0.07, 1.0 );\n	#ifdef USE_SHEEN_ROUGHNESSMAP\n		material.sheenRoughness *= texture2D( sheenRoughnessMap, vSheenRoughnessMapUv ).a;\n	#endif\n#endif\n#ifdef USE_ANISOTROPY\n	#ifdef USE_ANISOTROPYMAP\n		mat2 anisotropyMat = mat2( anisotropyVector.x, anisotropyVector.y, - anisotropyVector.y, anisotropyVector.x );\n		vec3 anisotropyPolar = texture2D( anisotropyMap, vAnisotropyMapUv ).rgb;\n		vec2 anisotropyV = anisotropyMat * normalize( 2.0 * anisotropyPolar.rg - vec2( 1.0 ) ) * anisotropyPolar.b;\n	#else\n		vec2 anisotropyV = anisotropyVector;\n	#endif\n	material.anisotropy = length( anisotropyV );\n	if( material.anisotropy == 0.0 ) {\n		anisotropyV = vec2( 1.0, 0.0 );\n	} else {\n		anisotropyV /= material.anisotropy;\n		material.anisotropy = saturate( material.anisotropy );\n	}\n	material.alphaT = mix( pow2( material.roughness ), 1.0, pow2( material.anisotropy ) );\n	material.anisotropyT = tbn[ 0 ] * anisotropyV.x + tbn[ 1 ] * anisotropyV.y;\n	material.anisotropyB = tbn[ 1 ] * anisotropyV.x - tbn[ 0 ] * anisotropyV.y;\n#endif";var tp="struct PhysicalMaterial {\n	vec3 diffuseColor;\n	float roughness;\n	vec3 specularColor;\n	float specularF90;\n	#ifdef USE_CLEARCOAT\n		float clearcoat;\n		float clearcoatRoughness;\n		vec3 clearcoatF0;\n		float clearcoatF90;\n	#endif\n	#ifdef USE_IRIDESCENCE\n		float iridescence;\n		float iridescenceIOR;\n		float iridescenceThickness;\n		vec3 iridescenceFresnel;\n		vec3 iridescenceF0;\n	#endif\n	#ifdef USE_SHEEN\n		vec3 sheenColor;\n		float sheenRoughness;\n	#endif\n	#ifdef IOR\n		float ior;\n	#endif\n	#ifdef USE_TRANSMISSION\n		float transmission;\n		float transmissionAlpha;\n		float thickness;\n		float attenuationDistance;\n		vec3 attenuationColor;\n	#endif\n	#ifdef USE_ANISOTROPY\n		float anisotropy;\n		float alphaT;\n		vec3 anisotropyT;\n		vec3 anisotropyB;\n	#endif\n};\nvec3 clearcoatSpecularDirect = vec3( 0.0 );\nvec3 clearcoatSpecularIndirect = vec3( 0.0 );\nvec3 sheenSpecularDirect = vec3( 0.0 );\nvec3 sheenSpecularIndirect = vec3(0.0 );\nvec3 Schlick_to_F0( const in vec3 f, const in float f90, const in float dotVH ) {\n    float x = clamp( 1.0 - dotVH, 0.0, 1.0 );\n    float x2 = x * x;\n    float x5 = clamp( x * x2 * x2, 0.0, 0.9999 );\n    return ( f - vec3( f90 ) * x5 ) / ( 1.0 - x5 );\n}\nfloat V_GGX_SmithCorrelated( const in float alpha, const in float dotNL, const in float dotNV ) {\n	float a2 = pow2( alpha );\n	float gv = dotNL * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNV ) );\n	float gl = dotNV * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNL ) );\n	return 0.5 / max( gv + gl, EPSILON );\n}\nfloat D_GGX( const in float alpha, const in float dotNH ) {\n	float a2 = pow2( alpha );\n	float denom = pow2( dotNH ) * ( a2 - 1.0 ) + 1.0;\n	return RECIPROCAL_PI * a2 / pow2( denom );\n}\n#ifdef USE_ANISOTROPY\n	float V_GGX_SmithCorrelated_Anisotropic( const in float alphaT, const in float alphaB, const in float dotTV, const in float dotBV, const in float dotTL, const in float dotBL, const in float dotNV, const in float dotNL ) {\n		float gv = dotNL * length( vec3( alphaT * dotTV, alphaB * dotBV, dotNV ) );\n		float gl = dotNV * length( vec3( alphaT * dotTL, alphaB * dotBL, dotNL ) );\n		float v = 0.5 / ( gv + gl );\n		return saturate(v);\n	}\n	float D_GGX_Anisotropic( const in float alphaT, const in float alphaB, const in float dotNH, const in float dotTH, const in float dotBH ) {\n		float a2 = alphaT * alphaB;\n		highp vec3 v = vec3( alphaB * dotTH, alphaT * dotBH, a2 * dotNH );\n		highp float v2 = dot( v, v );\n		float w2 = a2 / v2;\n		return RECIPROCAL_PI * a2 * pow2 ( w2 );\n	}\n#endif\n#ifdef USE_CLEARCOAT\n	vec3 BRDF_GGX_Clearcoat( const in vec3 lightDir, const in vec3 viewDir, const in vec3 normal, const in PhysicalMaterial material) {\n		vec3 f0 = material.clearcoatF0;\n		float f90 = material.clearcoatF90;\n		float roughness = material.clearcoatRoughness;\n		float alpha = pow2( roughness );\n		vec3 halfDir = normalize( lightDir + viewDir );\n		float dotNL = saturate( dot( normal, lightDir ) );\n		float dotNV = saturate( dot( normal, viewDir ) );\n		float dotNH = saturate( dot( normal, halfDir ) );\n		float dotVH = saturate( dot( viewDir, halfDir ) );\n		vec3 F = F_Schlick( f0, f90, dotVH );\n		float V = V_GGX_SmithCorrelated( alpha, dotNL, dotNV );\n		float D = D_GGX( alpha, dotNH );\n		return F * ( V * D );\n	}\n#endif\nvec3 BRDF_GGX( const in vec3 lightDir, const in vec3 viewDir, const in vec3 normal, const in PhysicalMaterial material ) {\n	vec3 f0 = material.specularColor;\n	float f90 = material.specularF90;\n	float roughness = material.roughness;\n	float alpha = pow2( roughness );\n	vec3 halfDir = normalize( lightDir + viewDir );\n	float dotNL = saturate( dot( normal, lightDir ) );\n	float dotNV = saturate( dot( normal, viewDir ) );\n	float dotNH = saturate( dot( normal, halfDir ) );\n	float dotVH = saturate( dot( viewDir, halfDir ) );\n	vec3 F = F_Schlick( f0, f90, dotVH );\n	#ifdef USE_IRIDESCENCE\n		F = mix( F, material.iridescenceFresnel, material.iridescence );\n	#endif\n	#ifdef USE_ANISOTROPY\n		float dotTL = dot( material.anisotropyT, lightDir );\n		float dotTV = dot( material.anisotropyT, viewDir );\n		float dotTH = dot( material.anisotropyT, halfDir );\n		float dotBL = dot( material.anisotropyB, lightDir );\n		float dotBV = dot( material.anisotropyB, viewDir );\n		float dotBH = dot( material.anisotropyB, halfDir );\n		float V = V_GGX_SmithCorrelated_Anisotropic( material.alphaT, alpha, dotTV, dotBV, dotTL, dotBL, dotNV, dotNL );\n		float D = D_GGX_Anisotropic( material.alphaT, alpha, dotNH, dotTH, dotBH );\n	#else\n		float V = V_GGX_SmithCorrelated( alpha, dotNL, dotNV );\n		float D = D_GGX( alpha, dotNH );\n	#endif\n	return F * ( V * D );\n}\nvec2 LTC_Uv( const in vec3 N, const in vec3 V, const in float roughness ) {\n	const float LUT_SIZE = 64.0;\n	const float LUT_SCALE = ( LUT_SIZE - 1.0 ) / LUT_SIZE;\n	const float LUT_BIAS = 0.5 / LUT_SIZE;\n	float dotNV = saturate( dot( N, V ) );\n	vec2 uv = vec2( roughness, sqrt( 1.0 - dotNV ) );\n	uv = uv * LUT_SCALE + LUT_BIAS;\n	return uv;\n}\nfloat LTC_ClippedSphereFormFactor( const in vec3 f ) {\n	float l = length( f );\n	return max( ( l * l + f.z ) / ( l + 1.0 ), 0.0 );\n}\nvec3 LTC_EdgeVectorFormFactor( const in vec3 v1, const in vec3 v2 ) {\n	float x = dot( v1, v2 );\n	float y = abs( x );\n	float a = 0.8543985 + ( 0.4965155 + 0.0145206 * y ) * y;\n	float b = 3.4175940 + ( 4.1616724 + y ) * y;\n	float v = a / b;\n	float theta_sintheta = ( x > 0.0 ) ? v : 0.5 * inversesqrt( max( 1.0 - x * x, 1e-7 ) ) - v;\n	return cross( v1, v2 ) * theta_sintheta;\n}\nvec3 LTC_Evaluate( const in vec3 N, const in vec3 V, const in vec3 P, const in mat3 mInv, const in vec3 rectCoords[ 4 ] ) {\n	vec3 v1 = rectCoords[ 1 ] - rectCoords[ 0 ];\n	vec3 v2 = rectCoords[ 3 ] - rectCoords[ 0 ];\n	vec3 lightNormal = cross( v1, v2 );\n	if( dot( lightNormal, P - rectCoords[ 0 ] ) < 0.0 ) return vec3( 0.0 );\n	vec3 T1, T2;\n	T1 = normalize( V - N * dot( V, N ) );\n	T2 = - cross( N, T1 );\n	mat3 mat = mInv * transposeMat3( mat3( T1, T2, N ) );\n	vec3 coords[ 4 ];\n	coords[ 0 ] = mat * ( rectCoords[ 0 ] - P );\n	coords[ 1 ] = mat * ( rectCoords[ 1 ] - P );\n	coords[ 2 ] = mat * ( rectCoords[ 2 ] - P );\n	coords[ 3 ] = mat * ( rectCoords[ 3 ] - P );\n	coords[ 0 ] = normalize( coords[ 0 ] );\n	coords[ 1 ] = normalize( coords[ 1 ] );\n	coords[ 2 ] = normalize( coords[ 2 ] );\n	coords[ 3 ] = normalize( coords[ 3 ] );\n	vec3 vectorFormFactor = vec3( 0.0 );\n	vectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 0 ], coords[ 1 ] );\n	vectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 1 ], coords[ 2 ] );\n	vectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 2 ], coords[ 3 ] );\n	vectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 3 ], coords[ 0 ] );\n	float result = LTC_ClippedSphereFormFactor( vectorFormFactor );\n	return vec3( result );\n}\n#if defined( USE_SHEEN )\nfloat D_Charlie( float roughness, float dotNH ) {\n	float alpha = pow2( roughness );\n	float invAlpha = 1.0 / alpha;\n	float cos2h = dotNH * dotNH;\n	float sin2h = max( 1.0 - cos2h, 0.0078125 );\n	return ( 2.0 + invAlpha ) * pow( sin2h, invAlpha * 0.5 ) / ( 2.0 * PI );\n}\nfloat V_Neubelt( float dotNV, float dotNL ) {\n	return saturate( 1.0 / ( 4.0 * ( dotNL + dotNV - dotNL * dotNV ) ) );\n}\nvec3 BRDF_Sheen( const in vec3 lightDir, const in vec3 viewDir, const in vec3 normal, vec3 sheenColor, const in float sheenRoughness ) {\n	vec3 halfDir = normalize( lightDir + viewDir );\n	float dotNL = saturate( dot( normal, lightDir ) );\n	float dotNV = saturate( dot( normal, viewDir ) );\n	float dotNH = saturate( dot( normal, halfDir ) );\n	float D = D_Charlie( sheenRoughness, dotNH );\n	float V = V_Neubelt( dotNV, dotNL );\n	return sheenColor * ( D * V );\n}\n#endif\nfloat IBLSheenBRDF( const in vec3 normal, const in vec3 viewDir, const in float roughness ) {\n	float dotNV = saturate( dot( normal, viewDir ) );\n	float r2 = roughness * roughness;\n	float a = roughness < 0.25 ? -339.2 * r2 + 161.4 * roughness - 25.9 : -8.48 * r2 + 14.3 * roughness - 9.95;\n	float b = roughness < 0.25 ? 44.0 * r2 - 23.7 * roughness + 3.26 : 1.97 * r2 - 3.27 * roughness + 0.72;\n	float DG = exp( a * dotNV + b ) + ( roughness < 0.25 ? 0.0 : 0.1 * ( roughness - 0.25 ) );\n	return saturate( DG * RECIPROCAL_PI );\n}\nvec2 DFGApprox( const in vec3 normal, const in vec3 viewDir, const in float roughness ) {\n	float dotNV = saturate( dot( normal, viewDir ) );\n	const vec4 c0 = vec4( - 1, - 0.0275, - 0.572, 0.022 );\n	const vec4 c1 = vec4( 1, 0.0425, 1.04, - 0.04 );\n	vec4 r = roughness * c0 + c1;\n	float a004 = min( r.x * r.x, exp2( - 9.28 * dotNV ) ) * r.x + r.y;\n	vec2 fab = vec2( - 1.04, 1.04 ) * a004 + r.zw;\n	return fab;\n}\nvec3 EnvironmentBRDF( const in vec3 normal, const in vec3 viewDir, const in vec3 specularColor, const in float specularF90, const in float roughness ) {\n	vec2 fab = DFGApprox( normal, viewDir, roughness );\n	return specularColor * fab.x + specularF90 * fab.y;\n}\n#ifdef USE_IRIDESCENCE\nvoid computeMultiscatteringIridescence( const in vec3 normal, const in vec3 viewDir, const in vec3 specularColor, const in float specularF90, const in float iridescence, const in vec3 iridescenceF0, const in float roughness, inout vec3 singleScatter, inout vec3 multiScatter ) {\n#else\nvoid computeMultiscattering( const in vec3 normal, const in vec3 viewDir, const in vec3 specularColor, const in float specularF90, const in float roughness, inout vec3 singleScatter, inout vec3 multiScatter ) {\n#endif\n	vec2 fab = DFGApprox( normal, viewDir, roughness );\n	#ifdef USE_IRIDESCENCE\n		vec3 Fr = mix( specularColor, iridescenceF0, iridescence );\n	#else\n		vec3 Fr = specularColor;\n	#endif\n	vec3 FssEss = Fr * fab.x + specularF90 * fab.y;\n	float Ess = fab.x + fab.y;\n	float Ems = 1.0 - Ess;\n	vec3 Favg = Fr + ( 1.0 - Fr ) * 0.047619;	vec3 Fms = FssEss * Favg / ( 1.0 - Ems * Favg );\n	singleScatter += FssEss;\n	multiScatter += Fms * Ems;\n}\n#if NUM_RECT_AREA_LIGHTS > 0\n	void RE_Direct_RectArea_Physical( const in RectAreaLight rectAreaLight, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\n		vec3 normal = geometryNormal;\n		vec3 viewDir = geometryViewDir;\n		vec3 position = geometryPosition;\n		vec3 lightPos = rectAreaLight.position;\n		vec3 halfWidth = rectAreaLight.halfWidth;\n		vec3 halfHeight = rectAreaLight.halfHeight;\n		vec3 lightColor = rectAreaLight.color;\n		float roughness = material.roughness;\n		vec3 rectCoords[ 4 ];\n		rectCoords[ 0 ] = lightPos + halfWidth - halfHeight;		rectCoords[ 1 ] = lightPos - halfWidth - halfHeight;\n		rectCoords[ 2 ] = lightPos - halfWidth + halfHeight;\n		rectCoords[ 3 ] = lightPos + halfWidth + halfHeight;\n		vec2 uv = LTC_Uv( normal, viewDir, roughness );\n		vec4 t1 = texture2D( ltc_1, uv );\n		vec4 t2 = texture2D( ltc_2, uv );\n		mat3 mInv = mat3(\n			vec3( t1.x, 0, t1.y ),\n			vec3(    0, 1,    0 ),\n			vec3( t1.z, 0, t1.w )\n		);\n		vec3 fresnel = ( material.specularColor * t2.x + ( vec3( 1.0 ) - material.specularColor ) * t2.y );\n		reflectedLight.directSpecular += lightColor * fresnel * LTC_Evaluate( normal, viewDir, position, mInv, rectCoords );\n		reflectedLight.directDiffuse += lightColor * material.diffuseColor * LTC_Evaluate( normal, viewDir, position, mat3( 1.0 ), rectCoords );\n	}\n#endif\nvoid RE_Direct_Physical( const in IncidentLight directLight, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\n	float dotNL = saturate( dot( geometryNormal, directLight.direction ) );\n	vec3 irradiance = dotNL * directLight.color;\n	#ifdef USE_CLEARCOAT\n		float dotNLcc = saturate( dot( geometryClearcoatNormal, directLight.direction ) );\n		vec3 ccIrradiance = dotNLcc * directLight.color;\n		clearcoatSpecularDirect += ccIrradiance * BRDF_GGX_Clearcoat( directLight.direction, geometryViewDir, geometryClearcoatNormal, material );\n	#endif\n	#ifdef USE_SHEEN\n		sheenSpecularDirect += irradiance * BRDF_Sheen( directLight.direction, geometryViewDir, geometryNormal, material.sheenColor, material.sheenRoughness );\n	#endif\n	reflectedLight.directSpecular += irradiance * BRDF_GGX( directLight.direction, geometryViewDir, geometryNormal, material );\n	reflectedLight.directDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\n}\nvoid RE_IndirectDiffuse_Physical( const in vec3 irradiance, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\n	reflectedLight.indirectDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\n}\nvoid RE_IndirectSpecular_Physical( const in vec3 radiance, const in vec3 irradiance, const in vec3 clearcoatRadiance, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in PhysicalMaterial material, inout ReflectedLight reflectedLight) {\n	#ifdef USE_CLEARCOAT\n		clearcoatSpecularIndirect += clearcoatRadiance * EnvironmentBRDF( geometryClearcoatNormal, geometryViewDir, material.clearcoatF0, material.clearcoatF90, material.clearcoatRoughness );\n	#endif\n	#ifdef USE_SHEEN\n		sheenSpecularIndirect += irradiance * material.sheenColor * IBLSheenBRDF( geometryNormal, geometryViewDir, material.sheenRoughness );\n	#endif\n	vec3 singleScattering = vec3( 0.0 );\n	vec3 multiScattering = vec3( 0.0 );\n	vec3 cosineWeightedIrradiance = irradiance * RECIPROCAL_PI;\n	#ifdef USE_IRIDESCENCE\n		computeMultiscatteringIridescence( geometryNormal, geometryViewDir, material.specularColor, material.specularF90, material.iridescence, material.iridescenceFresnel, material.roughness, singleScattering, multiScattering );\n	#else\n		computeMultiscattering( geometryNormal, geometryViewDir, material.specularColor, material.specularF90, material.roughness, singleScattering, multiScattering );\n	#endif\n	vec3 totalScattering = singleScattering + multiScattering;\n	vec3 diffuse = material.diffuseColor * ( 1.0 - max( max( totalScattering.r, totalScattering.g ), totalScattering.b ) );\n	reflectedLight.indirectSpecular += radiance * singleScattering;\n	reflectedLight.indirectSpecular += multiScattering * cosineWeightedIrradiance;\n	reflectedLight.indirectDiffuse += diffuse * cosineWeightedIrradiance;\n}\n#define RE_Direct				RE_Direct_Physical\n#define RE_Direct_RectArea		RE_Direct_RectArea_Physical\n#define RE_IndirectDiffuse		RE_IndirectDiffuse_Physical\n#define RE_IndirectSpecular		RE_IndirectSpecular_Physical\nfloat computeSpecularOcclusion( const in float dotNV, const in float ambientOcclusion, const in float roughness ) {\n	return saturate( pow( dotNV + ambientOcclusion, exp2( - 16.0 * roughness - 1.0 ) ) - 1.0 + ambientOcclusion );\n}";var np="\nvec3 geometryPosition = - vViewPosition;\nvec3 geometryNormal = normal;\nvec3 geometryViewDir = ( isOrthographic ) ? vec3( 0, 0, 1 ) : normalize( vViewPosition );\nvec3 geometryClearcoatNormal = vec3( 0.0 );\n#ifdef USE_CLEARCOAT\n	geometryClearcoatNormal = clearcoatNormal;\n#endif\n#ifdef USE_IRIDESCENCE\n	float dotNVi = saturate( dot( normal, geometryViewDir ) );\n	if ( material.iridescenceThickness == 0.0 ) {\n		material.iridescence = 0.0;\n	} else {\n		material.iridescence = saturate( material.iridescence );\n	}\n	if ( material.iridescence > 0.0 ) {\n		material.iridescenceFresnel = evalIridescence( 1.0, material.iridescenceIOR, dotNVi, material.iridescenceThickness, material.specularColor );\n		material.iridescenceF0 = Schlick_to_F0( material.iridescenceFresnel, 1.0, dotNVi );\n	}\n#endif\nIncidentLight directLight;\n#if ( NUM_POINT_LIGHTS > 0 ) && defined( RE_Direct )\n	PointLight pointLight;\n	#if defined( USE_SHADOWMAP ) && NUM_POINT_LIGHT_SHADOWS > 0\n	PointLightShadow pointLightShadow;\n	#endif\n	#pragma unroll_loop_start\n	for ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\n		pointLight = pointLights[ i ];\n		getPointLightInfo( pointLight, geometryPosition, directLight );\n		#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_POINT_LIGHT_SHADOWS )\n		pointLightShadow = pointLightShadows[ i ];\n		directLight.color *= ( directLight.visible && receiveShadow ) ? getPointShadow( pointShadowMap[ i ], pointLightShadow.shadowMapSize, pointLightShadow.shadowBias, pointLightShadow.shadowRadius, vPointShadowCoord[ i ], pointLightShadow.shadowCameraNear, pointLightShadow.shadowCameraFar ) : 1.0;\n		#endif\n		RE_Direct( directLight, geometryPosition, geometryNormal, geometryViewDir, geometryClearcoatNormal, material, reflectedLight );\n	}\n	#pragma unroll_loop_end\n#endif\n#if ( NUM_SPOT_LIGHTS > 0 ) && defined( RE_Direct )\n	SpotLight spotLight;\n	vec4 spotColor;\n	vec3 spotLightCoord;\n	bool inSpotLightMap;\n	#if defined( USE_SHADOWMAP ) && NUM_SPOT_LIGHT_SHADOWS > 0\n	SpotLightShadow spotLightShadow;\n	#endif\n	#pragma unroll_loop_start\n	for ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\n		spotLight = spotLights[ i ];\n		getSpotLightInfo( spotLight, geometryPosition, directLight );\n		#if ( UNROLLED_LOOP_INDEX < NUM_SPOT_LIGHT_SHADOWS_WITH_MAPS )\n		#define SPOT_LIGHT_MAP_INDEX UNROLLED_LOOP_INDEX\n		#elif ( UNROLLED_LOOP_INDEX < NUM_SPOT_LIGHT_SHADOWS )\n		#define SPOT_LIGHT_MAP_INDEX NUM_SPOT_LIGHT_MAPS\n		#else\n		#define SPOT_LIGHT_MAP_INDEX ( UNROLLED_LOOP_INDEX - NUM_SPOT_LIGHT_SHADOWS + NUM_SPOT_LIGHT_SHADOWS_WITH_MAPS )\n		#endif\n		#if ( SPOT_LIGHT_MAP_INDEX < NUM_SPOT_LIGHT_MAPS )\n			spotLightCoord = vSpotLightCoord[ i ].xyz / vSpotLightCoord[ i ].w;\n			inSpotLightMap = all( lessThan( abs( spotLightCoord * 2. - 1. ), vec3( 1.0 ) ) );\n			spotColor = texture2D( spotLightMap[ SPOT_LIGHT_MAP_INDEX ], spotLightCoord.xy );\n			directLight.color = inSpotLightMap ? directLight.color * spotColor.rgb : directLight.color;\n		#endif\n		#undef SPOT_LIGHT_MAP_INDEX\n		#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_SPOT_LIGHT_SHADOWS )\n		spotLightShadow = spotLightShadows[ i ];\n		directLight.color *= ( directLight.visible && receiveShadow ) ? getShadow( spotShadowMap[ i ], spotLightShadow.shadowMapSize, spotLightShadow.shadowBias, spotLightShadow.shadowRadius, vSpotLightCoord[ i ] ) : 1.0;\n		#endif\n		RE_Direct( directLight, geometryPosition, geometryNormal, geometryViewDir, geometryClearcoatNormal, material, reflectedLight );\n	}\n	#pragma unroll_loop_end\n#endif\n#if ( NUM_DIR_LIGHTS > 0 ) && defined( RE_Direct )\n	DirectionalLight directionalLight;\n	#if defined( USE_SHADOWMAP ) && NUM_DIR_LIGHT_SHADOWS > 0\n	DirectionalLightShadow directionalLightShadow;\n	#endif\n	#pragma unroll_loop_start\n	for ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\n		directionalLight = directionalLights[ i ];\n		getDirectionalLightInfo( directionalLight, directLight );\n		#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_DIR_LIGHT_SHADOWS )\n		directionalLightShadow = directionalLightShadows[ i ];\n		directLight.color *= ( directLight.visible && receiveShadow ) ? getShadow( directionalShadowMap[ i ], directionalLightShadow.shadowMapSize, directionalLightShadow.shadowBias, directionalLightShadow.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;\n		#endif\n		RE_Direct( directLight, geometryPosition, geometryNormal, geometryViewDir, geometryClearcoatNormal, material, reflectedLight );\n	}\n	#pragma unroll_loop_end\n#endif\n#if ( NUM_RECT_AREA_LIGHTS > 0 ) && defined( RE_Direct_RectArea )\n	RectAreaLight rectAreaLight;\n	#pragma unroll_loop_start\n	for ( int i = 0; i < NUM_RECT_AREA_LIGHTS; i ++ ) {\n		rectAreaLight = rectAreaLights[ i ];\n		RE_Direct_RectArea( rectAreaLight, geometryPosition, geometryNormal, geometryViewDir, geometryClearcoatNormal, material, reflectedLight );\n	}\n	#pragma unroll_loop_end\n#endif\n#if defined( RE_IndirectDiffuse )\n	vec3 iblIrradiance = vec3( 0.0 );\n	vec3 irradiance = getAmbientLightIrradiance( ambientLightColor );\n	#if defined( USE_LIGHT_PROBES )\n		irradiance += getLightProbeIrradiance( lightProbe, geometryNormal );\n	#endif\n	#if ( NUM_HEMI_LIGHTS > 0 )\n		#pragma unroll_loop_start\n		for ( int i = 0; i < NUM_HEMI_LIGHTS; i ++ ) {\n			irradiance += getHemisphereLightIrradiance( hemisphereLights[ i ], geometryNormal );\n		}\n		#pragma unroll_loop_end\n	#endif\n#endif\n#if defined( RE_IndirectSpecular )\n	vec3 radiance = vec3( 0.0 );\n	vec3 clearcoatRadiance = vec3( 0.0 );\n#endif";var ip="#if defined( RE_IndirectDiffuse )\n	#ifdef USE_LIGHTMAP\n		vec4 lightMapTexel = texture2D( lightMap, vLightMapUv );\n		vec3 lightMapIrradiance = lightMapTexel.rgb * lightMapIntensity;\n		irradiance += lightMapIrradiance;\n	#endif\n	#if defined( USE_ENVMAP ) && defined( STANDARD ) && defined( ENVMAP_TYPE_CUBE_UV )\n		iblIrradiance += getIBLIrradiance( geometryNormal );\n	#endif\n#endif\n#if defined( USE_ENVMAP ) && defined( RE_IndirectSpecular )\n	#ifdef USE_ANISOTROPY\n		radiance += getIBLAnisotropyRadiance( geometryViewDir, geometryNormal, material.roughness, material.anisotropyB, material.anisotropy );\n	#else\n		radiance += getIBLRadiance( geometryViewDir, geometryNormal, material.roughness );\n	#endif\n	#ifdef USE_CLEARCOAT\n		clearcoatRadiance += getIBLRadiance( geometryViewDir, geometryClearcoatNormal, material.clearcoatRoughness );\n	#endif\n#endif";var rp="#if defined( RE_IndirectDiffuse )\n	RE_IndirectDiffuse( irradiance, geometryPosition, geometryNormal, geometryViewDir, geometryClearcoatNormal, material, reflectedLight );\n#endif\n#if defined( RE_IndirectSpecular )\n	RE_IndirectSpecular( radiance, iblIrradiance, clearcoatRadiance, geometryPosition, geometryNormal, geometryViewDir, geometryClearcoatNormal, material, reflectedLight );\n#endif";var sp="#if defined( USE_LOGDEPTHBUF ) && defined( USE_LOGDEPTHBUF_EXT )\n	gl_FragDepthEXT = vIsPerspective == 0.0 ? gl_FragCoord.z : log2( vFragDepth ) * logDepthBufFC * 0.5;\n#endif";var ap="#if defined( USE_LOGDEPTHBUF ) && defined( USE_LOGDEPTHBUF_EXT )\n	uniform float logDepthBufFC;\n	varying float vFragDepth;\n	varying float vIsPerspective;\n#endif";var op="#ifdef USE_LOGDEPTHBUF\n	#ifdef USE_LOGDEPTHBUF_EXT\n		varying float vFragDepth;\n		varying float vIsPerspective;\n	#else\n		uniform float logDepthBufFC;\n	#endif\n#endif";var lp="#ifdef USE_LOGDEPTHBUF\n	#ifdef USE_LOGDEPTHBUF_EXT\n		vFragDepth = 1.0 + gl_Position.w;\n		vIsPerspective = float( isPerspectiveMatrix( projectionMatrix ) );\n	#else\n		if ( isPerspectiveMatrix( projectionMatrix ) ) {\n			gl_Position.z = log2( max( EPSILON, gl_Position.w + 1.0 ) ) * logDepthBufFC - 1.0;\n			gl_Position.z *= gl_Position.w;\n		}\n	#endif\n#endif";var cp="#ifdef USE_MAP\n	vec4 sampledDiffuseColor = texture2D( map, vMapUv );\n	#ifdef DECODE_VIDEO_TEXTURE\n		sampledDiffuseColor = vec4( mix( pow( sampledDiffuseColor.rgb * 0.9478672986 + vec3( 0.0521327014 ), vec3( 2.4 ) ), sampledDiffuseColor.rgb * 0.0773993808, vec3( lessThanEqual( sampledDiffuseColor.rgb, vec3( 0.04045 ) ) ) ), sampledDiffuseColor.w );\n	\n	#endif\n	diffuseColor *= sampledDiffuseColor;\n#endif";var up="#ifdef USE_MAP\n	uniform sampler2D map;\n#endif";var hp="#if defined( USE_MAP ) || defined( USE_ALPHAMAP )\n	#if defined( USE_POINTS_UV )\n		vec2 uv = vUv;\n	#else\n		vec2 uv = ( uvTransform * vec3( gl_PointCoord.x, 1.0 - gl_PointCoord.y, 1 ) ).xy;\n	#endif\n#endif\n#ifdef USE_MAP\n	diffuseColor *= texture2D( map, uv );\n#endif\n#ifdef USE_ALPHAMAP\n	diffuseColor.a *= texture2D( alphaMap, uv ).g;\n#endif";var dp="#if defined( USE_POINTS_UV )\n	varying vec2 vUv;\n#else\n	#if defined( USE_MAP ) || defined( USE_ALPHAMAP )\n		uniform mat3 uvTransform;\n	#endif\n#endif\n#ifdef USE_MAP\n	uniform sampler2D map;\n#endif\n#ifdef USE_ALPHAMAP\n	uniform sampler2D alphaMap;\n#endif";var fp="float metalnessFactor = metalness;\n#ifdef USE_METALNESSMAP\n	vec4 texelMetalness = texture2D( metalnessMap, vMetalnessMapUv );\n	metalnessFactor *= texelMetalness.b;\n#endif";var pp="#ifdef USE_METALNESSMAP\n	uniform sampler2D metalnessMap;\n#endif";var mp="#ifdef USE_INSTANCING_MORPH\n	float morphTargetInfluences[MORPHTARGETS_COUNT];\n	float morphTargetBaseInfluence = texelFetch( morphTexture, ivec2( 0, gl_InstanceID ), 0 ).r;\n	for ( int i = 0; i < MORPHTARGETS_COUNT; i ++ ) {\n		morphTargetInfluences[i] =  texelFetch( morphTexture, ivec2( i + 1, gl_InstanceID ), 0 ).r;\n	}\n#endif";var _p="#if defined( USE_MORPHCOLORS ) && defined( MORPHTARGETS_TEXTURE )\n	vColor *= morphTargetBaseInfluence;\n	for ( int i = 0; i < MORPHTARGETS_COUNT; i ++ ) {\n		#if defined( USE_COLOR_ALPHA )\n			if ( morphTargetInfluences[ i ] != 0.0 ) vColor += getMorph( gl_VertexID, i, 2 ) * morphTargetInfluences[ i ];\n		#elif defined( USE_COLOR )\n			if ( morphTargetInfluences[ i ] != 0.0 ) vColor += getMorph( gl_VertexID, i, 2 ).rgb * morphTargetInfluences[ i ];\n		#endif\n	}\n#endif";var gp="#ifdef USE_MORPHNORMALS\n	objectNormal *= morphTargetBaseInfluence;\n	#ifdef MORPHTARGETS_TEXTURE\n		for ( int i = 0; i < MORPHTARGETS_COUNT; i ++ ) {\n			if ( morphTargetInfluences[ i ] != 0.0 ) objectNormal += getMorph( gl_VertexID, i, 1 ).xyz * morphTargetInfluences[ i ];\n		}\n	#else\n		objectNormal += morphNormal0 * morphTargetInfluences[ 0 ];\n		objectNormal += morphNormal1 * morphTargetInfluences[ 1 ];\n		objectNormal += morphNormal2 * morphTargetInfluences[ 2 ];\n		objectNormal += morphNormal3 * morphTargetInfluences[ 3 ];\n	#endif\n#endif";var vp="#ifdef USE_MORPHTARGETS\n	#ifndef USE_INSTANCING_MORPH\n		uniform float morphTargetBaseInfluence;\n	#endif\n	#ifdef MORPHTARGETS_TEXTURE\n		#ifndef USE_INSTANCING_MORPH\n			uniform float morphTargetInfluences[ MORPHTARGETS_COUNT ];\n		#endif\n		uniform sampler2DArray morphTargetsTexture;\n		uniform ivec2 morphTargetsTextureSize;\n		vec4 getMorph( const in int vertexIndex, const in int morphTargetIndex, const in int offset ) {\n			int texelIndex = vertexIndex * MORPHTARGETS_TEXTURE_STRIDE + offset;\n			int y = texelIndex / morphTargetsTextureSize.x;\n			int x = texelIndex - y * morphTargetsTextureSize.x;\n			ivec3 morphUV = ivec3( x, y, morphTargetIndex );\n			return texelFetch( morphTargetsTexture, morphUV, 0 );\n		}\n	#else\n		#ifndef USE_MORPHNORMALS\n			uniform float morphTargetInfluences[ 8 ];\n		#else\n			uniform float morphTargetInfluences[ 4 ];\n		#endif\n	#endif\n#endif";var xp="#ifdef USE_MORPHTARGETS\n	transformed *= morphTargetBaseInfluence;\n	#ifdef MORPHTARGETS_TEXTURE\n		for ( int i = 0; i < MORPHTARGETS_COUNT; i ++ ) {\n			if ( morphTargetInfluences[ i ] != 0.0 ) transformed += getMorph( gl_VertexID, i, 0 ).xyz * morphTargetInfluences[ i ];\n		}\n	#else\n		transformed += morphTarget0 * morphTargetInfluences[ 0 ];\n		transformed += morphTarget1 * morphTargetInfluences[ 1 ];\n		transformed += morphTarget2 * morphTargetInfluences[ 2 ];\n		transformed += morphTarget3 * morphTargetInfluences[ 3 ];\n		#ifndef USE_MORPHNORMALS\n			transformed += morphTarget4 * morphTargetInfluences[ 4 ];\n			transformed += morphTarget5 * morphTargetInfluences[ 5 ];\n			transformed += morphTarget6 * morphTargetInfluences[ 6 ];\n			transformed += morphTarget7 * morphTargetInfluences[ 7 ];\n		#endif\n	#endif\n#endif";var Sp="float faceDirection = gl_FrontFacing ? 1.0 : - 1.0;\n#ifdef FLAT_SHADED\n	vec3 fdx = dFdx( vViewPosition );\n	vec3 fdy = dFdy( vViewPosition );\n	vec3 normal = normalize( cross( fdx, fdy ) );\n#else\n	vec3 normal = normalize( vNormal );\n	#ifdef DOUBLE_SIDED\n		normal *= faceDirection;\n	#endif\n#endif\n#if defined( USE_NORMALMAP_TANGENTSPACE ) || defined( USE_CLEARCOAT_NORMALMAP ) || defined( USE_ANISOTROPY )\n	#ifdef USE_TANGENT\n		mat3 tbn = mat3( normalize( vTangent ), normalize( vBitangent ), normal );\n	#else\n		mat3 tbn = getTangentFrame( - vViewPosition, normal,\n		#if defined( USE_NORMALMAP )\n			vNormalMapUv\n		#elif defined( USE_CLEARCOAT_NORMALMAP )\n			vClearcoatNormalMapUv\n		#else\n			vUv\n		#endif\n		);\n	#endif\n	#if defined( DOUBLE_SIDED ) && ! defined( FLAT_SHADED )\n		tbn[0] *= faceDirection;\n		tbn[1] *= faceDirection;\n	#endif\n#endif\n#ifdef USE_CLEARCOAT_NORMALMAP\n	#ifdef USE_TANGENT\n		mat3 tbn2 = mat3( normalize( vTangent ), normalize( vBitangent ), normal );\n	#else\n		mat3 tbn2 = getTangentFrame( - vViewPosition, normal, vClearcoatNormalMapUv );\n	#endif\n	#if defined( DOUBLE_SIDED ) && ! defined( FLAT_SHADED )\n		tbn2[0] *= faceDirection;\n		tbn2[1] *= faceDirection;\n	#endif\n#endif\nvec3 nonPerturbedNormal = normal;";var Mp="#ifdef USE_NORMALMAP_OBJECTSPACE\n	normal = texture2D( normalMap, vNormalMapUv ).xyz * 2.0 - 1.0;\n	#ifdef FLIP_SIDED\n		normal = - normal;\n	#endif\n	#ifdef DOUBLE_SIDED\n		normal = normal * faceDirection;\n	#endif\n	normal = normalize( normalMatrix * normal );\n#elif defined( USE_NORMALMAP_TANGENTSPACE )\n	vec3 mapN = texture2D( normalMap, vNormalMapUv ).xyz * 2.0 - 1.0;\n	mapN.xy *= normalScale;\n	normal = normalize( tbn * mapN );\n#elif defined( USE_BUMPMAP )\n	normal = perturbNormalArb( - vViewPosition, normal, dHdxy_fwd(), faceDirection );\n#endif";var Ep="#ifndef FLAT_SHADED\n	varying vec3 vNormal;\n	#ifdef USE_TANGENT\n		varying vec3 vTangent;\n		varying vec3 vBitangent;\n	#endif\n#endif";var yp="#ifndef FLAT_SHADED\n	varying vec3 vNormal;\n	#ifdef USE_TANGENT\n		varying vec3 vTangent;\n		varying vec3 vBitangent;\n	#endif\n#endif";var Tp="#ifndef FLAT_SHADED\n	vNormal = normalize( transformedNormal );\n	#ifdef USE_TANGENT\n		vTangent = normalize( transformedTangent );\n		vBitangent = normalize( cross( vNormal, vTangent ) * tangent.w );\n	#endif\n#endif";var Ap="#ifdef USE_NORMALMAP\n	uniform sampler2D normalMap;\n	uniform vec2 normalScale;\n#endif\n#ifdef USE_NORMALMAP_OBJECTSPACE\n	uniform mat3 normalMatrix;\n#endif\n#if ! defined ( USE_TANGENT ) && ( defined ( USE_NORMALMAP_TANGENTSPACE ) || defined ( USE_CLEARCOAT_NORMALMAP ) || defined( USE_ANISOTROPY ) )\n	mat3 getTangentFrame( vec3 eye_pos, vec3 surf_norm, vec2 uv ) {\n		vec3 q0 = dFdx( eye_pos.xyz );\n		vec3 q1 = dFdy( eye_pos.xyz );\n		vec2 st0 = dFdx( uv.st );\n		vec2 st1 = dFdy( uv.st );\n		vec3 N = surf_norm;\n		vec3 q1perp = cross( q1, N );\n		vec3 q0perp = cross( N, q0 );\n		vec3 T = q1perp * st0.x + q0perp * st1.x;\n		vec3 B = q1perp * st0.y + q0perp * st1.y;\n		float det = max( dot( T, T ), dot( B, B ) );\n		float scale = ( det == 0.0 ) ? 0.0 : inversesqrt( det );\n		return mat3( T * scale, B * scale, N );\n	}\n#endif";var bp="#ifdef USE_CLEARCOAT\n	vec3 clearcoatNormal = nonPerturbedNormal;\n#endif";var Cp="#ifdef USE_CLEARCOAT_NORMALMAP\n	vec3 clearcoatMapN = texture2D( clearcoatNormalMap, vClearcoatNormalMapUv ).xyz * 2.0 - 1.0;\n	clearcoatMapN.xy *= clearcoatNormalScale;\n	clearcoatNormal = normalize( tbn2 * clearcoatMapN );\n#endif";var wp="#ifdef USE_CLEARCOATMAP\n	uniform sampler2D clearcoatMap;\n#endif\n#ifdef USE_CLEARCOAT_NORMALMAP\n	uniform sampler2D clearcoatNormalMap;\n	uniform vec2 clearcoatNormalScale;\n#endif\n#ifdef USE_CLEARCOAT_ROUGHNESSMAP\n	uniform sampler2D clearcoatRoughnessMap;\n#endif";var Rp="#ifdef USE_IRIDESCENCEMAP\n	uniform sampler2D iridescenceMap;\n#endif\n#ifdef USE_IRIDESCENCE_THICKNESSMAP\n	uniform sampler2D iridescenceThicknessMap;\n#endif";var Lp="#ifdef OPAQUE\ndiffuseColor.a = 1.0;\n#endif\n#ifdef USE_TRANSMISSION\ndiffuseColor.a *= material.transmissionAlpha;\n#endif\ngl_FragColor = vec4( outgoingLight, diffuseColor.a );";var Pp="vec3 packNormalToRGB( const in vec3 normal ) {\n	return normalize( normal ) * 0.5 + 0.5;\n}\nvec3 unpackRGBToNormal( const in vec3 rgb ) {\n	return 2.0 * rgb.xyz - 1.0;\n}\nconst float PackUpscale = 256. / 255.;const float UnpackDownscale = 255. / 256.;\nconst vec3 PackFactors = vec3( 256. * 256. * 256., 256. * 256., 256. );\nconst vec4 UnpackFactors = UnpackDownscale / vec4( PackFactors, 1. );\nconst float ShiftRight8 = 1. / 256.;\nvec4 packDepthToRGBA( const in float v ) {\n	vec4 r = vec4( fract( v * PackFactors ), v );\n	r.yzw -= r.xyz * ShiftRight8;	return r * PackUpscale;\n}\nfloat unpackRGBAToDepth( const in vec4 v ) {\n	return dot( v, UnpackFactors );\n}\nvec2 packDepthToRG( in highp float v ) {\n	return packDepthToRGBA( v ).yx;\n}\nfloat unpackRGToDepth( const in highp vec2 v ) {\n	return unpackRGBAToDepth( vec4( v.xy, 0.0, 0.0 ) );\n}\nvec4 pack2HalfToRGBA( vec2 v ) {\n	vec4 r = vec4( v.x, fract( v.x * 255.0 ), v.y, fract( v.y * 255.0 ) );\n	return vec4( r.x - r.y / 255.0, r.y, r.z - r.w / 255.0, r.w );\n}\nvec2 unpackRGBATo2Half( vec4 v ) {\n	return vec2( v.x + ( v.y / 255.0 ), v.z + ( v.w / 255.0 ) );\n}\nfloat viewZToOrthographicDepth( const in float viewZ, const in float near, const in float far ) {\n	return ( viewZ + near ) / ( near - far );\n}\nfloat orthographicDepthToViewZ( const in float depth, const in float near, const in float far ) {\n	return depth * ( near - far ) - near;\n}\nfloat viewZToPerspectiveDepth( const in float viewZ, const in float near, const in float far ) {\n	return ( ( near + viewZ ) * far ) / ( ( far - near ) * viewZ );\n}\nfloat perspectiveDepthToViewZ( const in float depth, const in float near, const in float far ) {\n	return ( near * far ) / ( ( far - near ) * depth - far );\n}";var Dp="#ifdef PREMULTIPLIED_ALPHA\n	gl_FragColor.rgb *= gl_FragColor.a;\n#endif";var Up="vec4 mvPosition = vec4( transformed, 1.0 );\n#ifdef USE_BATCHING\n	mvPosition = batchingMatrix * mvPosition;\n#endif\n#ifdef USE_INSTANCING\n	mvPosition = instanceMatrix * mvPosition;\n#endif\nmvPosition = modelViewMatrix * mvPosition;\ngl_Position = projectionMatrix * mvPosition;";var Np="#ifdef DITHERING\n	gl_FragColor.rgb = dithering( gl_FragColor.rgb );\n#endif";var Ip="#ifdef DITHERING\n	vec3 dithering( vec3 color ) {\n		float grid_position = rand( gl_FragCoord.xy );\n		vec3 dither_shift_RGB = vec3( 0.25 / 255.0, -0.25 / 255.0, 0.25 / 255.0 );\n		dither_shift_RGB = mix( 2.0 * dither_shift_RGB, -2.0 * dither_shift_RGB, grid_position );\n		return color + dither_shift_RGB;\n	}\n#endif";var Fp="float roughnessFactor = roughness;\n#ifdef USE_ROUGHNESSMAP\n	vec4 texelRoughness = texture2D( roughnessMap, vRoughnessMapUv );\n	roughnessFactor *= texelRoughness.g;\n#endif";var Op="#ifdef USE_ROUGHNESSMAP\n	uniform sampler2D roughnessMap;\n#endif";var Bp="#if NUM_SPOT_LIGHT_COORDS > 0\n	varying vec4 vSpotLightCoord[ NUM_SPOT_LIGHT_COORDS ];\n#endif\n#if NUM_SPOT_LIGHT_MAPS > 0\n	uniform sampler2D spotLightMap[ NUM_SPOT_LIGHT_MAPS ];\n#endif\n#ifdef USE_SHADOWMAP\n	#if NUM_DIR_LIGHT_SHADOWS > 0\n		uniform sampler2D directionalShadowMap[ NUM_DIR_LIGHT_SHADOWS ];\n		varying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHT_SHADOWS ];\n		struct DirectionalLightShadow {\n			float shadowBias;\n			float shadowNormalBias;\n			float shadowRadius;\n			vec2 shadowMapSize;\n		};\n		uniform DirectionalLightShadow directionalLightShadows[ NUM_DIR_LIGHT_SHADOWS ];\n	#endif\n	#if NUM_SPOT_LIGHT_SHADOWS > 0\n		uniform sampler2D spotShadowMap[ NUM_SPOT_LIGHT_SHADOWS ];\n		struct SpotLightShadow {\n			float shadowBias;\n			float shadowNormalBias;\n			float shadowRadius;\n			vec2 shadowMapSize;\n		};\n		uniform SpotLightShadow spotLightShadows[ NUM_SPOT_LIGHT_SHADOWS ];\n	#endif\n	#if NUM_POINT_LIGHT_SHADOWS > 0\n		uniform sampler2D pointShadowMap[ NUM_POINT_LIGHT_SHADOWS ];\n		varying vec4 vPointShadowCoord[ NUM_POINT_LIGHT_SHADOWS ];\n		struct PointLightShadow {\n			float shadowBias;\n			float shadowNormalBias;\n			float shadowRadius;\n			vec2 shadowMapSize;\n			float shadowCameraNear;\n			float shadowCameraFar;\n		};\n		uniform PointLightShadow pointLightShadows[ NUM_POINT_LIGHT_SHADOWS ];\n	#endif\n	float texture2DCompare( sampler2D depths, vec2 uv, float compare ) {\n		return step( compare, unpackRGBAToDepth( texture2D( depths, uv ) ) );\n	}\n	vec2 texture2DDistribution( sampler2D shadow, vec2 uv ) {\n		return unpackRGBATo2Half( texture2D( shadow, uv ) );\n	}\n	float VSMShadow (sampler2D shadow, vec2 uv, float compare ){\n		float occlusion = 1.0;\n		vec2 distribution = texture2DDistribution( shadow, uv );\n		float hard_shadow = step( compare , distribution.x );\n		if (hard_shadow != 1.0 ) {\n			float distance = compare - distribution.x ;\n			float variance = max( 0.00000, distribution.y * distribution.y );\n			float softness_probability = variance / (variance + distance * distance );			softness_probability = clamp( ( softness_probability - 0.3 ) / ( 0.95 - 0.3 ), 0.0, 1.0 );			occlusion = clamp( max( hard_shadow, softness_probability ), 0.0, 1.0 );\n		}\n		return occlusion;\n	}\n	float getShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowBias, float shadowRadius, vec4 shadowCoord ) {\n		float shadow = 1.0;\n		shadowCoord.xyz /= shadowCoord.w;\n		shadowCoord.z += shadowBias;\n		bool inFrustum = shadowCoord.x >= 0.0 && shadowCoord.x <= 1.0 && shadowCoord.y >= 0.0 && shadowCoord.y <= 1.0;\n		bool frustumTest = inFrustum && shadowCoord.z <= 1.0;\n		if ( frustumTest ) {\n		#if defined( SHADOWMAP_TYPE_PCF )\n			vec2 texelSize = vec2( 1.0 ) / shadowMapSize;\n			float dx0 = - texelSize.x * shadowRadius;\n			float dy0 = - texelSize.y * shadowRadius;\n			float dx1 = + texelSize.x * shadowRadius;\n			float dy1 = + texelSize.y * shadowRadius;\n			float dx2 = dx0 / 2.0;\n			float dy2 = dy0 / 2.0;\n			float dx3 = dx1 / 2.0;\n			float dy3 = dy1 / 2.0;\n			shadow = (\n				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy0 ), shadowCoord.z ) +\n				texture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy0 ), shadowCoord.z ) +\n				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy0 ), shadowCoord.z ) +\n				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, dy2 ), shadowCoord.z ) +\n				texture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy2 ), shadowCoord.z ) +\n				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, dy2 ), shadowCoord.z ) +\n				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, 0.0 ), shadowCoord.z ) +\n				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, 0.0 ), shadowCoord.z ) +\n				texture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z ) +\n				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, 0.0 ), shadowCoord.z ) +\n				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, 0.0 ), shadowCoord.z ) +\n				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, dy3 ), shadowCoord.z ) +\n				texture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy3 ), shadowCoord.z ) +\n				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, dy3 ), shadowCoord.z ) +\n				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy1 ), shadowCoord.z ) +\n				texture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy1 ), shadowCoord.z ) +\n				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy1 ), shadowCoord.z )\n			) * ( 1.0 / 17.0 );\n		#elif defined( SHADOWMAP_TYPE_PCF_SOFT )\n			vec2 texelSize = vec2( 1.0 ) / shadowMapSize;\n			float dx = texelSize.x;\n			float dy = texelSize.y;\n			vec2 uv = shadowCoord.xy;\n			vec2 f = fract( uv * shadowMapSize + 0.5 );\n			uv -= f * texelSize;\n			shadow = (\n				texture2DCompare( shadowMap, uv, shadowCoord.z ) +\n				texture2DCompare( shadowMap, uv + vec2( dx, 0.0 ), shadowCoord.z ) +\n				texture2DCompare( shadowMap, uv + vec2( 0.0, dy ), shadowCoord.z ) +\n				texture2DCompare( shadowMap, uv + texelSize, shadowCoord.z ) +\n				mix( texture2DCompare( shadowMap, uv + vec2( -dx, 0.0 ), shadowCoord.z ),\n					 texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, 0.0 ), shadowCoord.z ),\n					 f.x ) +\n				mix( texture2DCompare( shadowMap, uv + vec2( -dx, dy ), shadowCoord.z ),\n					 texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, dy ), shadowCoord.z ),\n					 f.x ) +\n				mix( texture2DCompare( shadowMap, uv + vec2( 0.0, -dy ), shadowCoord.z ),\n					 texture2DCompare( shadowMap, uv + vec2( 0.0, 2.0 * dy ), shadowCoord.z ),\n					 f.y ) +\n				mix( texture2DCompare( shadowMap, uv + vec2( dx, -dy ), shadowCoord.z ),\n					 texture2DCompare( shadowMap, uv + vec2( dx, 2.0 * dy ), shadowCoord.z ),\n					 f.y ) +\n				mix( mix( texture2DCompare( shadowMap, uv + vec2( -dx, -dy ), shadowCoord.z ),\n						  texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, -dy ), shadowCoord.z ),\n						  f.x ),\n					 mix( texture2DCompare( shadowMap, uv + vec2( -dx, 2.0 * dy ), shadowCoord.z ),\n						  texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, 2.0 * dy ), shadowCoord.z ),\n						  f.x ),\n					 f.y )\n			) * ( 1.0 / 9.0 );\n		#elif defined( SHADOWMAP_TYPE_VSM )\n			shadow = VSMShadow( shadowMap, shadowCoord.xy, shadowCoord.z );\n		#else\n			shadow = texture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z );\n		#endif\n		}\n		return shadow;\n	}\n	vec2 cubeToUV( vec3 v, float texelSizeY ) {\n		vec3 absV = abs( v );\n		float scaleToCube = 1.0 / max( absV.x, max( absV.y, absV.z ) );\n		absV *= scaleToCube;\n		v *= scaleToCube * ( 1.0 - 2.0 * texelSizeY );\n		vec2 planar = v.xy;\n		float almostATexel = 1.5 * texelSizeY;\n		float almostOne = 1.0 - almostATexel;\n		if ( absV.z >= almostOne ) {\n			if ( v.z > 0.0 )\n				planar.x = 4.0 - v.x;\n		} else if ( absV.x >= almostOne ) {\n			float signX = sign( v.x );\n			planar.x = v.z * signX + 2.0 * signX;\n		} else if ( absV.y >= almostOne ) {\n			float signY = sign( v.y );\n			planar.x = v.x + 2.0 * signY + 2.0;\n			planar.y = v.z * signY - 2.0;\n		}\n		return vec2( 0.125, 0.25 ) * planar + vec2( 0.375, 0.75 );\n	}\n	float getPointShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowBias, float shadowRadius, vec4 shadowCoord, float shadowCameraNear, float shadowCameraFar ) {\n		vec2 texelSize = vec2( 1.0 ) / ( shadowMapSize * vec2( 4.0, 2.0 ) );\n		vec3 lightToPosition = shadowCoord.xyz;\n		float dp = ( length( lightToPosition ) - shadowCameraNear ) / ( shadowCameraFar - shadowCameraNear );		dp += shadowBias;\n		vec3 bd3D = normalize( lightToPosition );\n		#if defined( SHADOWMAP_TYPE_PCF ) || defined( SHADOWMAP_TYPE_PCF_SOFT ) || defined( SHADOWMAP_TYPE_VSM )\n			vec2 offset = vec2( - 1, 1 ) * shadowRadius * texelSize.y;\n			return (\n				texture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyy, texelSize.y ), dp ) +\n				texture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyy, texelSize.y ), dp ) +\n				texture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyx, texelSize.y ), dp ) +\n				texture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyx, texelSize.y ), dp ) +\n				texture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp ) +\n				texture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxy, texelSize.y ), dp ) +\n				texture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxy, texelSize.y ), dp ) +\n				texture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxx, texelSize.y ), dp ) +\n				texture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxx, texelSize.y ), dp )\n			) * ( 1.0 / 9.0 );\n		#else\n			return texture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp );\n		#endif\n	}\n#endif";var zp="#if NUM_SPOT_LIGHT_COORDS > 0\n	uniform mat4 spotLightMatrix[ NUM_SPOT_LIGHT_COORDS ];\n	varying vec4 vSpotLightCoord[ NUM_SPOT_LIGHT_COORDS ];\n#endif\n#ifdef USE_SHADOWMAP\n	#if NUM_DIR_LIGHT_SHADOWS > 0\n		uniform mat4 directionalShadowMatrix[ NUM_DIR_LIGHT_SHADOWS ];\n		varying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHT_SHADOWS ];\n		struct DirectionalLightShadow {\n			float shadowBias;\n			float shadowNormalBias;\n			float shadowRadius;\n			vec2 shadowMapSize;\n		};\n		uniform DirectionalLightShadow directionalLightShadows[ NUM_DIR_LIGHT_SHADOWS ];\n	#endif\n	#if NUM_SPOT_LIGHT_SHADOWS > 0\n		struct SpotLightShadow {\n			float shadowBias;\n			float shadowNormalBias;\n			float shadowRadius;\n			vec2 shadowMapSize;\n		};\n		uniform SpotLightShadow spotLightShadows[ NUM_SPOT_LIGHT_SHADOWS ];\n	#endif\n	#if NUM_POINT_LIGHT_SHADOWS > 0\n		uniform mat4 pointShadowMatrix[ NUM_POINT_LIGHT_SHADOWS ];\n		varying vec4 vPointShadowCoord[ NUM_POINT_LIGHT_SHADOWS ];\n		struct PointLightShadow {\n			float shadowBias;\n			float shadowNormalBias;\n			float shadowRadius;\n			vec2 shadowMapSize;\n			float shadowCameraNear;\n			float shadowCameraFar;\n		};\n		uniform PointLightShadow pointLightShadows[ NUM_POINT_LIGHT_SHADOWS ];\n	#endif\n#endif";var Gp="#if ( defined( USE_SHADOWMAP ) && ( NUM_DIR_LIGHT_SHADOWS > 0 || NUM_POINT_LIGHT_SHADOWS > 0 ) ) || ( NUM_SPOT_LIGHT_COORDS > 0 )\n	vec3 shadowWorldNormal = inverseTransformDirection( transformedNormal, viewMatrix );\n	vec4 shadowWorldPosition;\n#endif\n#if defined( USE_SHADOWMAP )\n	#if NUM_DIR_LIGHT_SHADOWS > 0\n		#pragma unroll_loop_start\n		for ( int i = 0; i < NUM_DIR_LIGHT_SHADOWS; i ++ ) {\n			shadowWorldPosition = worldPosition + vec4( shadowWorldNormal * directionalLightShadows[ i ].shadowNormalBias, 0 );\n			vDirectionalShadowCoord[ i ] = directionalShadowMatrix[ i ] * shadowWorldPosition;\n		}\n		#pragma unroll_loop_end\n	#endif\n	#if NUM_POINT_LIGHT_SHADOWS > 0\n		#pragma unroll_loop_start\n		for ( int i = 0; i < NUM_POINT_LIGHT_SHADOWS; i ++ ) {\n			shadowWorldPosition = worldPosition + vec4( shadowWorldNormal * pointLightShadows[ i ].shadowNormalBias, 0 );\n			vPointShadowCoord[ i ] = pointShadowMatrix[ i ] * shadowWorldPosition;\n		}\n		#pragma unroll_loop_end\n	#endif\n#endif\n#if NUM_SPOT_LIGHT_COORDS > 0\n	#pragma unroll_loop_start\n	for ( int i = 0; i < NUM_SPOT_LIGHT_COORDS; i ++ ) {\n		shadowWorldPosition = worldPosition;\n		#if ( defined( USE_SHADOWMAP ) && UNROLLED_LOOP_INDEX < NUM_SPOT_LIGHT_SHADOWS )\n			shadowWorldPosition.xyz += shadowWorldNormal * spotLightShadows[ i ].shadowNormalBias;\n		#endif\n		vSpotLightCoord[ i ] = spotLightMatrix[ i ] * shadowWorldPosition;\n	}\n	#pragma unroll_loop_end\n#endif";var Hp="float getShadowMask() {\n	float shadow = 1.0;\n	#ifdef USE_SHADOWMAP\n	#if NUM_DIR_LIGHT_SHADOWS > 0\n	DirectionalLightShadow directionalLight;\n	#pragma unroll_loop_start\n	for ( int i = 0; i < NUM_DIR_LIGHT_SHADOWS; i ++ ) {\n		directionalLight = directionalLightShadows[ i ];\n		shadow *= receiveShadow ? getShadow( directionalShadowMap[ i ], directionalLight.shadowMapSize, directionalLight.shadowBias, directionalLight.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;\n	}\n	#pragma unroll_loop_end\n	#endif\n	#if NUM_SPOT_LIGHT_SHADOWS > 0\n	SpotLightShadow spotLight;\n	#pragma unroll_loop_start\n	for ( int i = 0; i < NUM_SPOT_LIGHT_SHADOWS; i ++ ) {\n		spotLight = spotLightShadows[ i ];\n		shadow *= receiveShadow ? getShadow( spotShadowMap[ i ], spotLight.shadowMapSize, spotLight.shadowBias, spotLight.shadowRadius, vSpotLightCoord[ i ] ) : 1.0;\n	}\n	#pragma unroll_loop_end\n	#endif\n	#if NUM_POINT_LIGHT_SHADOWS > 0\n	PointLightShadow pointLight;\n	#pragma unroll_loop_start\n	for ( int i = 0; i < NUM_POINT_LIGHT_SHADOWS; i ++ ) {\n		pointLight = pointLightShadows[ i ];\n		shadow *= receiveShadow ? getPointShadow( pointShadowMap[ i ], pointLight.shadowMapSize, pointLight.shadowBias, pointLight.shadowRadius, vPointShadowCoord[ i ], pointLight.shadowCameraNear, pointLight.shadowCameraFar ) : 1.0;\n	}\n	#pragma unroll_loop_end\n	#endif\n	#endif\n	return shadow;\n}";var Vp="#ifdef USE_SKINNING\n	mat4 boneMatX = getBoneMatrix( skinIndex.x );\n	mat4 boneMatY = getBoneMatrix( skinIndex.y );\n	mat4 boneMatZ = getBoneMatrix( skinIndex.z );\n	mat4 boneMatW = getBoneMatrix( skinIndex.w );\n#endif";var kp="#ifdef USE_SKINNING\n	uniform mat4 bindMatrix;\n	uniform mat4 bindMatrixInverse;\n	uniform highp sampler2D boneTexture;\n	mat4 getBoneMatrix( const in float i ) {\n		int size = textureSize( boneTexture, 0 ).x;\n		int j = int( i ) * 4;\n		int x = j % size;\n		int y = j / size;\n		vec4 v1 = texelFetch( boneTexture, ivec2( x, y ), 0 );\n		vec4 v2 = texelFetch( boneTexture, ivec2( x + 1, y ), 0 );\n		vec4 v3 = texelFetch( boneTexture, ivec2( x + 2, y ), 0 );\n		vec4 v4 = texelFetch( boneTexture, ivec2( x + 3, y ), 0 );\n		return mat4( v1, v2, v3, v4 );\n	}\n#endif";var Wp="#ifdef USE_SKINNING\n	vec4 skinVertex = bindMatrix * vec4( transformed, 1.0 );\n	vec4 skinned = vec4( 0.0 );\n	skinned += boneMatX * skinVertex * skinWeight.x;\n	skinned += boneMatY * skinVertex * skinWeight.y;\n	skinned += boneMatZ * skinVertex * skinWeight.z;\n	skinned += boneMatW * skinVertex * skinWeight.w;\n	transformed = ( bindMatrixInverse * skinned ).xyz;\n#endif";var Xp="#ifdef USE_SKINNING\n	mat4 skinMatrix = mat4( 0.0 );\n	skinMatrix += skinWeight.x * boneMatX;\n	skinMatrix += skinWeight.y * boneMatY;\n	skinMatrix += skinWeight.z * boneMatZ;\n	skinMatrix += skinWeight.w * boneMatW;\n	skinMatrix = bindMatrixInverse * skinMatrix * bindMatrix;\n	objectNormal = vec4( skinMatrix * vec4( objectNormal, 0.0 ) ).xyz;\n	#ifdef USE_TANGENT\n		objectTangent = vec4( skinMatrix * vec4( objectTangent, 0.0 ) ).xyz;\n	#endif\n#endif";var qp="float specularStrength;\n#ifdef USE_SPECULARMAP\n	vec4 texelSpecular = texture2D( specularMap, vSpecularMapUv );\n	specularStrength = texelSpecular.r;\n#else\n	specularStrength = 1.0;\n#endif";var jp="#ifdef USE_SPECULARMAP\n	uniform sampler2D specularMap;\n#endif";var Yp="#if defined( TONE_MAPPING )\n	gl_FragColor.rgb = toneMapping( gl_FragColor.rgb );\n#endif";var $p="#ifndef saturate\n#define saturate( a ) clamp( a, 0.0, 1.0 )\n#endif\nuniform float toneMappingExposure;\nvec3 LinearToneMapping( vec3 color ) {\n	return saturate( toneMappingExposure * color );\n}\nvec3 ReinhardToneMapping( vec3 color ) {\n	color *= toneMappingExposure;\n	return saturate( color / ( vec3( 1.0 ) + color ) );\n}\nvec3 OptimizedCineonToneMapping( vec3 color ) {\n	color *= toneMappingExposure;\n	color = max( vec3( 0.0 ), color - 0.004 );\n	return pow( ( color * ( 6.2 * color + 0.5 ) ) / ( color * ( 6.2 * color + 1.7 ) + 0.06 ), vec3( 2.2 ) );\n}\nvec3 RRTAndODTFit( vec3 v ) {\n	vec3 a = v * ( v + 0.0245786 ) - 0.000090537;\n	vec3 b = v * ( 0.983729 * v + 0.4329510 ) + 0.238081;\n	return a / b;\n}\nvec3 ACESFilmicToneMapping( vec3 color ) {\n	const mat3 ACESInputMat = mat3(\n		vec3( 0.59719, 0.07600, 0.02840 ),		vec3( 0.35458, 0.90834, 0.13383 ),\n		vec3( 0.04823, 0.01566, 0.83777 )\n	);\n	const mat3 ACESOutputMat = mat3(\n		vec3(  1.60475, -0.10208, -0.00327 ),		vec3( -0.53108,  1.10813, -0.07276 ),\n		vec3( -0.07367, -0.00605,  1.07602 )\n	);\n	color *= toneMappingExposure / 0.6;\n	color = ACESInputMat * color;\n	color = RRTAndODTFit( color );\n	color = ACESOutputMat * color;\n	return saturate( color );\n}\nconst mat3 LINEAR_REC2020_TO_LINEAR_SRGB = mat3(\n	vec3( 1.6605, - 0.1246, - 0.0182 ),\n	vec3( - 0.5876, 1.1329, - 0.1006 ),\n	vec3( - 0.0728, - 0.0083, 1.1187 )\n);\nconst mat3 LINEAR_SRGB_TO_LINEAR_REC2020 = mat3(\n	vec3( 0.6274, 0.0691, 0.0164 ),\n	vec3( 0.3293, 0.9195, 0.0880 ),\n	vec3( 0.0433, 0.0113, 0.8956 )\n);\nvec3 agxDefaultContrastApprox( vec3 x ) {\n	vec3 x2 = x * x;\n	vec3 x4 = x2 * x2;\n	return + 15.5 * x4 * x2\n		- 40.14 * x4 * x\n		+ 31.96 * x4\n		- 6.868 * x2 * x\n		+ 0.4298 * x2\n		+ 0.1191 * x\n		- 0.00232;\n}\nvec3 AgXToneMapping( vec3 color ) {\n	const mat3 AgXInsetMatrix = mat3(\n		vec3( 0.856627153315983, 0.137318972929847, 0.11189821299995 ),\n		vec3( 0.0951212405381588, 0.761241990602591, 0.0767994186031903 ),\n		vec3( 0.0482516061458583, 0.101439036467562, 0.811302368396859 )\n	);\n	const mat3 AgXOutsetMatrix = mat3(\n		vec3( 1.1271005818144368, - 0.1413297634984383, - 0.14132976349843826 ),\n		vec3( - 0.11060664309660323, 1.157823702216272, - 0.11060664309660294 ),\n		vec3( - 0.016493938717834573, - 0.016493938717834257, 1.2519364065950405 )\n	);\n	const float AgxMinEv = - 12.47393;	const float AgxMaxEv = 4.026069;\n	color *= toneMappingExposure;\n	color = LINEAR_SRGB_TO_LINEAR_REC2020 * color;\n	color = AgXInsetMatrix * color;\n	color = max( color, 1e-10 );	color = log2( color );\n	color = ( color - AgxMinEv ) / ( AgxMaxEv - AgxMinEv );\n	color = clamp( color, 0.0, 1.0 );\n	color = agxDefaultContrastApprox( color );\n	color = AgXOutsetMatrix * color;\n	color = pow( max( vec3( 0.0 ), color ), vec3( 2.2 ) );\n	color = LINEAR_REC2020_TO_LINEAR_SRGB * color;\n	color = clamp( color, 0.0, 1.0 );\n	return color;\n}\nvec3 NeutralToneMapping( vec3 color ) {\n	float startCompression = 0.8 - 0.04;\n	float desaturation = 0.15;\n	color *= toneMappingExposure;\n	float x = min(color.r, min(color.g, color.b));\n	float offset = x < 0.08 ? x - 6.25 * x * x : 0.04;\n	color -= offset;\n	float peak = max(color.r, max(color.g, color.b));\n	if (peak < startCompression) return color;\n	float d = 1. - startCompression;\n	float newPeak = 1. - d * d / (peak + d - startCompression);\n	color *= newPeak / peak;\n	float g = 1. - 1. / (desaturation * (peak - newPeak) + 1.);\n	return mix(color, vec3(1, 1, 1), g);\n}\nvec3 CustomToneMapping( vec3 color ) { return color; }";var Kp="#ifdef USE_TRANSMISSION\n	material.transmission = transmission;\n	material.transmissionAlpha = 1.0;\n	material.thickness = thickness;\n	material.attenuationDistance = attenuationDistance;\n	material.attenuationColor = attenuationColor;\n	#ifdef USE_TRANSMISSIONMAP\n		material.transmission *= texture2D( transmissionMap, vTransmissionMapUv ).r;\n	#endif\n	#ifdef USE_THICKNESSMAP\n		material.thickness *= texture2D( thicknessMap, vThicknessMapUv ).g;\n	#endif\n	vec3 pos = vWorldPosition;\n	vec3 v = normalize( cameraPosition - pos );\n	vec3 n = inverseTransformDirection( normal, viewMatrix );\n	vec4 transmitted = getIBLVolumeRefraction(\n		n, v, material.roughness, material.diffuseColor, material.specularColor, material.specularF90,\n		pos, modelMatrix, viewMatrix, projectionMatrix, material.ior, material.thickness,\n		material.attenuationColor, material.attenuationDistance );\n	material.transmissionAlpha = mix( material.transmissionAlpha, transmitted.a, material.transmission );\n	totalDiffuse = mix( totalDiffuse, transmitted.rgb, material.transmission );\n#endif";var Zp="#ifdef USE_TRANSMISSION\n	uniform float transmission;\n	uniform float thickness;\n	uniform float attenuationDistance;\n	uniform vec3 attenuationColor;\n	#ifdef USE_TRANSMISSIONMAP\n		uniform sampler2D transmissionMap;\n	#endif\n	#ifdef USE_THICKNESSMAP\n		uniform sampler2D thicknessMap;\n	#endif\n	uniform vec2 transmissionSamplerSize;\n	uniform sampler2D transmissionSamplerMap;\n	uniform mat4 modelMatrix;\n	uniform mat4 projectionMatrix;\n	varying vec3 vWorldPosition;\n	float w0( float a ) {\n		return ( 1.0 / 6.0 ) * ( a * ( a * ( - a + 3.0 ) - 3.0 ) + 1.0 );\n	}\n	float w1( float a ) {\n		return ( 1.0 / 6.0 ) * ( a *  a * ( 3.0 * a - 6.0 ) + 4.0 );\n	}\n	float w2( float a ){\n		return ( 1.0 / 6.0 ) * ( a * ( a * ( - 3.0 * a + 3.0 ) + 3.0 ) + 1.0 );\n	}\n	float w3( float a ) {\n		return ( 1.0 / 6.0 ) * ( a * a * a );\n	}\n	float g0( float a ) {\n		return w0( a ) + w1( a );\n	}\n	float g1( float a ) {\n		return w2( a ) + w3( a );\n	}\n	float h0( float a ) {\n		return - 1.0 + w1( a ) / ( w0( a ) + w1( a ) );\n	}\n	float h1( float a ) {\n		return 1.0 + w3( a ) / ( w2( a ) + w3( a ) );\n	}\n	vec4 bicubic( sampler2D tex, vec2 uv, vec4 texelSize, float lod ) {\n		uv = uv * texelSize.zw + 0.5;\n		vec2 iuv = floor( uv );\n		vec2 fuv = fract( uv );\n		float g0x = g0( fuv.x );\n		float g1x = g1( fuv.x );\n		float h0x = h0( fuv.x );\n		float h1x = h1( fuv.x );\n		float h0y = h0( fuv.y );\n		float h1y = h1( fuv.y );\n		vec2 p0 = ( vec2( iuv.x + h0x, iuv.y + h0y ) - 0.5 ) * texelSize.xy;\n		vec2 p1 = ( vec2( iuv.x + h1x, iuv.y + h0y ) - 0.5 ) * texelSize.xy;\n		vec2 p2 = ( vec2( iuv.x + h0x, iuv.y + h1y ) - 0.5 ) * texelSize.xy;\n		vec2 p3 = ( vec2( iuv.x + h1x, iuv.y + h1y ) - 0.5 ) * texelSize.xy;\n		return g0( fuv.y ) * ( g0x * textureLod( tex, p0, lod ) + g1x * textureLod( tex, p1, lod ) ) +\n			g1( fuv.y ) * ( g0x * textureLod( tex, p2, lod ) + g1x * textureLod( tex, p3, lod ) );\n	}\n	vec4 textureBicubic( sampler2D sampler, vec2 uv, float lod ) {\n		vec2 fLodSize = vec2( textureSize( sampler, int( lod ) ) );\n		vec2 cLodSize = vec2( textureSize( sampler, int( lod + 1.0 ) ) );\n		vec2 fLodSizeInv = 1.0 / fLodSize;\n		vec2 cLodSizeInv = 1.0 / cLodSize;\n		vec4 fSample = bicubic( sampler, uv, vec4( fLodSizeInv, fLodSize ), floor( lod ) );\n		vec4 cSample = bicubic( sampler, uv, vec4( cLodSizeInv, cLodSize ), ceil( lod ) );\n		return mix( fSample, cSample, fract( lod ) );\n	}\n	vec3 getVolumeTransmissionRay( const in vec3 n, const in vec3 v, const in float thickness, const in float ior, const in mat4 modelMatrix ) {\n		vec3 refractionVector = refract( - v, normalize( n ), 1.0 / ior );\n		vec3 modelScale;\n		modelScale.x = length( vec3( modelMatrix[ 0 ].xyz ) );\n		modelScale.y = length( vec3( modelMatrix[ 1 ].xyz ) );\n		modelScale.z = length( vec3( modelMatrix[ 2 ].xyz ) );\n		return normalize( refractionVector ) * thickness * modelScale;\n	}\n	float applyIorToRoughness( const in float roughness, const in float ior ) {\n		return roughness * clamp( ior * 2.0 - 2.0, 0.0, 1.0 );\n	}\n	vec4 getTransmissionSample( const in vec2 fragCoord, const in float roughness, const in float ior ) {\n		float lod = log2( transmissionSamplerSize.x ) * applyIorToRoughness( roughness, ior );\n		return textureBicubic( transmissionSamplerMap, fragCoord.xy, lod );\n	}\n	vec3 volumeAttenuation( const in float transmissionDistance, const in vec3 attenuationColor, const in float attenuationDistance ) {\n		if ( isinf( attenuationDistance ) ) {\n			return vec3( 1.0 );\n		} else {\n			vec3 attenuationCoefficient = -log( attenuationColor ) / attenuationDistance;\n			vec3 transmittance = exp( - attenuationCoefficient * transmissionDistance );			return transmittance;\n		}\n	}\n	vec4 getIBLVolumeRefraction( const in vec3 n, const in vec3 v, const in float roughness, const in vec3 diffuseColor,\n		const in vec3 specularColor, const in float specularF90, const in vec3 position, const in mat4 modelMatrix,\n		const in mat4 viewMatrix, const in mat4 projMatrix, const in float ior, const in float thickness,\n		const in vec3 attenuationColor, const in float attenuationDistance ) {\n		vec3 transmissionRay = getVolumeTransmissionRay( n, v, thickness, ior, modelMatrix );\n		vec3 refractedRayExit = position + transmissionRay;\n		vec4 ndcPos = projMatrix * viewMatrix * vec4( refractedRayExit, 1.0 );\n		vec2 refractionCoords = ndcPos.xy / ndcPos.w;\n		refractionCoords += 1.0;\n		refractionCoords /= 2.0;\n		vec4 transmittedLight = getTransmissionSample( refractionCoords, roughness, ior );\n		vec3 transmittance = diffuseColor * volumeAttenuation( length( transmissionRay ), attenuationColor, attenuationDistance );\n		vec3 attenuatedColor = transmittance * transmittedLight.rgb;\n		vec3 F = EnvironmentBRDF( n, v, specularColor, specularF90, roughness );\n		float transmittanceFactor = ( transmittance.r + transmittance.g + transmittance.b ) / 3.0;\n		return vec4( ( 1.0 - F ) * attenuatedColor, 1.0 - ( 1.0 - transmittedLight.a ) * transmittanceFactor );\n	}\n#endif";var Jp="#if defined( USE_UV ) || defined( USE_ANISOTROPY )\n	varying vec2 vUv;\n#endif\n#ifdef USE_MAP\n	varying vec2 vMapUv;\n#endif\n#ifdef USE_ALPHAMAP\n	varying vec2 vAlphaMapUv;\n#endif\n#ifdef USE_LIGHTMAP\n	varying vec2 vLightMapUv;\n#endif\n#ifdef USE_AOMAP\n	varying vec2 vAoMapUv;\n#endif\n#ifdef USE_BUMPMAP\n	varying vec2 vBumpMapUv;\n#endif\n#ifdef USE_NORMALMAP\n	varying vec2 vNormalMapUv;\n#endif\n#ifdef USE_EMISSIVEMAP\n	varying vec2 vEmissiveMapUv;\n#endif\n#ifdef USE_METALNESSMAP\n	varying vec2 vMetalnessMapUv;\n#endif\n#ifdef USE_ROUGHNESSMAP\n	varying vec2 vRoughnessMapUv;\n#endif\n#ifdef USE_ANISOTROPYMAP\n	varying vec2 vAnisotropyMapUv;\n#endif\n#ifdef USE_CLEARCOATMAP\n	varying vec2 vClearcoatMapUv;\n#endif\n#ifdef USE_CLEARCOAT_NORMALMAP\n	varying vec2 vClearcoatNormalMapUv;\n#endif\n#ifdef USE_CLEARCOAT_ROUGHNESSMAP\n	varying vec2 vClearcoatRoughnessMapUv;\n#endif\n#ifdef USE_IRIDESCENCEMAP\n	varying vec2 vIridescenceMapUv;\n#endif\n#ifdef USE_IRIDESCENCE_THICKNESSMAP\n	varying vec2 vIridescenceThicknessMapUv;\n#endif\n#ifdef USE_SHEEN_COLORMAP\n	varying vec2 vSheenColorMapUv;\n#endif\n#ifdef USE_SHEEN_ROUGHNESSMAP\n	varying vec2 vSheenRoughnessMapUv;\n#endif\n#ifdef USE_SPECULARMAP\n	varying vec2 vSpecularMapUv;\n#endif\n#ifdef USE_SPECULAR_COLORMAP\n	varying vec2 vSpecularColorMapUv;\n#endif\n#ifdef USE_SPECULAR_INTENSITYMAP\n	varying vec2 vSpecularIntensityMapUv;\n#endif\n#ifdef USE_TRANSMISSIONMAP\n	uniform mat3 transmissionMapTransform;\n	varying vec2 vTransmissionMapUv;\n#endif\n#ifdef USE_THICKNESSMAP\n	uniform mat3 thicknessMapTransform;\n	varying vec2 vThicknessMapUv;\n#endif";var Qp="#if defined( USE_UV ) || defined( USE_ANISOTROPY )\n	varying vec2 vUv;\n#endif\n#ifdef USE_MAP\n	uniform mat3 mapTransform;\n	varying vec2 vMapUv;\n#endif\n#ifdef USE_ALPHAMAP\n	uniform mat3 alphaMapTransform;\n	varying vec2 vAlphaMapUv;\n#endif\n#ifdef USE_LIGHTMAP\n	uniform mat3 lightMapTransform;\n	varying vec2 vLightMapUv;\n#endif\n#ifdef USE_AOMAP\n	uniform mat3 aoMapTransform;\n	varying vec2 vAoMapUv;\n#endif\n#ifdef USE_BUMPMAP\n	uniform mat3 bumpMapTransform;\n	varying vec2 vBumpMapUv;\n#endif\n#ifdef USE_NORMALMAP\n	uniform mat3 normalMapTransform;\n	varying vec2 vNormalMapUv;\n#endif\n#ifdef USE_DISPLACEMENTMAP\n	uniform mat3 displacementMapTransform;\n	varying vec2 vDisplacementMapUv;\n#endif\n#ifdef USE_EMISSIVEMAP\n	uniform mat3 emissiveMapTransform;\n	varying vec2 vEmissiveMapUv;\n#endif\n#ifdef USE_METALNESSMAP\n	uniform mat3 metalnessMapTransform;\n	varying vec2 vMetalnessMapUv;\n#endif\n#ifdef USE_ROUGHNESSMAP\n	uniform mat3 roughnessMapTransform;\n	varying vec2 vRoughnessMapUv;\n#endif\n#ifdef USE_ANISOTROPYMAP\n	uniform mat3 anisotropyMapTransform;\n	varying vec2 vAnisotropyMapUv;\n#endif\n#ifdef USE_CLEARCOATMAP\n	uniform mat3 clearcoatMapTransform;\n	varying vec2 vClearcoatMapUv;\n#endif\n#ifdef USE_CLEARCOAT_NORMALMAP\n	uniform mat3 clearcoatNormalMapTransform;\n	varying vec2 vClearcoatNormalMapUv;\n#endif\n#ifdef USE_CLEARCOAT_ROUGHNESSMAP\n	uniform mat3 clearcoatRoughnessMapTransform;\n	varying vec2 vClearcoatRoughnessMapUv;\n#endif\n#ifdef USE_SHEEN_COLORMAP\n	uniform mat3 sheenColorMapTransform;\n	varying vec2 vSheenColorMapUv;\n#endif\n#ifdef USE_SHEEN_ROUGHNESSMAP\n	uniform mat3 sheenRoughnessMapTransform;\n	varying vec2 vSheenRoughnessMapUv;\n#endif\n#ifdef USE_IRIDESCENCEMAP\n	uniform mat3 iridescenceMapTransform;\n	varying vec2 vIridescenceMapUv;\n#endif\n#ifdef USE_IRIDESCENCE_THICKNESSMAP\n	uniform mat3 iridescenceThicknessMapTransform;\n	varying vec2 vIridescenceThicknessMapUv;\n#endif\n#ifdef USE_SPECULARMAP\n	uniform mat3 specularMapTransform;\n	varying vec2 vSpecularMapUv;\n#endif\n#ifdef USE_SPECULAR_COLORMAP\n	uniform mat3 specularColorMapTransform;\n	varying vec2 vSpecularColorMapUv;\n#endif\n#ifdef USE_SPECULAR_INTENSITYMAP\n	uniform mat3 specularIntensityMapTransform;\n	varying vec2 vSpecularIntensityMapUv;\n#endif\n#ifdef USE_TRANSMISSIONMAP\n	uniform mat3 transmissionMapTransform;\n	varying vec2 vTransmissionMapUv;\n#endif\n#ifdef USE_THICKNESSMAP\n	uniform mat3 thicknessMapTransform;\n	varying vec2 vThicknessMapUv;\n#endif";var em="#if defined( USE_UV ) || defined( USE_ANISOTROPY )\n	vUv = vec3( uv, 1 ).xy;\n#endif\n#ifdef USE_MAP\n	vMapUv = ( mapTransform * vec3( MAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_ALPHAMAP\n	vAlphaMapUv = ( alphaMapTransform * vec3( ALPHAMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_LIGHTMAP\n	vLightMapUv = ( lightMapTransform * vec3( LIGHTMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_AOMAP\n	vAoMapUv = ( aoMapTransform * vec3( AOMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_BUMPMAP\n	vBumpMapUv = ( bumpMapTransform * vec3( BUMPMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_NORMALMAP\n	vNormalMapUv = ( normalMapTransform * vec3( NORMALMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_DISPLACEMENTMAP\n	vDisplacementMapUv = ( displacementMapTransform * vec3( DISPLACEMENTMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_EMISSIVEMAP\n	vEmissiveMapUv = ( emissiveMapTransform * vec3( EMISSIVEMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_METALNESSMAP\n	vMetalnessMapUv = ( metalnessMapTransform * vec3( METALNESSMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_ROUGHNESSMAP\n	vRoughnessMapUv = ( roughnessMapTransform * vec3( ROUGHNESSMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_ANISOTROPYMAP\n	vAnisotropyMapUv = ( anisotropyMapTransform * vec3( ANISOTROPYMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_CLEARCOATMAP\n	vClearcoatMapUv = ( clearcoatMapTransform * vec3( CLEARCOATMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_CLEARCOAT_NORMALMAP\n	vClearcoatNormalMapUv = ( clearcoatNormalMapTransform * vec3( CLEARCOAT_NORMALMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_CLEARCOAT_ROUGHNESSMAP\n	vClearcoatRoughnessMapUv = ( clearcoatRoughnessMapTransform * vec3( CLEARCOAT_ROUGHNESSMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_IRIDESCENCEMAP\n	vIridescenceMapUv = ( iridescenceMapTransform * vec3( IRIDESCENCEMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_IRIDESCENCE_THICKNESSMAP\n	vIridescenceThicknessMapUv = ( iridescenceThicknessMapTransform * vec3( IRIDESCENCE_THICKNESSMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_SHEEN_COLORMAP\n	vSheenColorMapUv = ( sheenColorMapTransform * vec3( SHEEN_COLORMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_SHEEN_ROUGHNESSMAP\n	vSheenRoughnessMapUv = ( sheenRoughnessMapTransform * vec3( SHEEN_ROUGHNESSMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_SPECULARMAP\n	vSpecularMapUv = ( specularMapTransform * vec3( SPECULARMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_SPECULAR_COLORMAP\n	vSpecularColorMapUv = ( specularColorMapTransform * vec3( SPECULAR_COLORMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_SPECULAR_INTENSITYMAP\n	vSpecularIntensityMapUv = ( specularIntensityMapTransform * vec3( SPECULAR_INTENSITYMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_TRANSMISSIONMAP\n	vTransmissionMapUv = ( transmissionMapTransform * vec3( TRANSMISSIONMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_THICKNESSMAP\n	vThicknessMapUv = ( thicknessMapTransform * vec3( THICKNESSMAP_UV, 1 ) ).xy;\n#endif";var tm="#if defined( USE_ENVMAP ) || defined( DISTANCE ) || defined ( USE_SHADOWMAP ) || defined ( USE_TRANSMISSION ) || NUM_SPOT_LIGHT_COORDS > 0\n	vec4 worldPosition = vec4( transformed, 1.0 );\n	#ifdef USE_BATCHING\n		worldPosition = batchingMatrix * worldPosition;\n	#endif\n	#ifdef USE_INSTANCING\n		worldPosition = instanceMatrix * worldPosition;\n	#endif\n	worldPosition = modelMatrix * worldPosition;\n#endif";const nm="varying vec2 vUv;\nuniform mat3 uvTransform;\nvoid main() {\n	vUv = ( uvTransform * vec3( uv, 1 ) ).xy;\n	gl_Position = vec4( position.xy, 1.0, 1.0 );\n}";const im="uniform sampler2D t2D;\nuniform float backgroundIntensity;\nvarying vec2 vUv;\nvoid main() {\n	vec4 texColor = texture2D( t2D, vUv );\n	#ifdef DECODE_VIDEO_TEXTURE\n		texColor = vec4( mix( pow( texColor.rgb * 0.9478672986 + vec3( 0.0521327014 ), vec3( 2.4 ) ), texColor.rgb * 0.0773993808, vec3( lessThanEqual( texColor.rgb, vec3( 0.04045 ) ) ) ), texColor.w );\n	#endif\n	texColor.rgb *= backgroundIntensity;\n	gl_FragColor = texColor;\n	#include <tonemapping_fragment>\n	#include <colorspace_fragment>\n}";const rm="varying vec3 vWorldDirection;\n#include <common>\nvoid main() {\n	vWorldDirection = transformDirection( position, modelMatrix );\n	#include <begin_vertex>\n	#include <project_vertex>\n	gl_Position.z = gl_Position.w;\n}";const sm="#ifdef ENVMAP_TYPE_CUBE\n	uniform samplerCube envMap;\n#elif defined( ENVMAP_TYPE_CUBE_UV )\n	uniform sampler2D envMap;\n#endif\nuniform float flipEnvMap;\nuniform float backgroundBlurriness;\nuniform float backgroundIntensity;\nuniform mat3 backgroundRotation;\nvarying vec3 vWorldDirection;\n#include <cube_uv_reflection_fragment>\nvoid main() {\n	#ifdef ENVMAP_TYPE_CUBE\n		vec4 texColor = textureCube( envMap, backgroundRotation * vec3( flipEnvMap * vWorldDirection.x, vWorldDirection.yz ) );\n	#elif defined( ENVMAP_TYPE_CUBE_UV )\n		vec4 texColor = textureCubeUV( envMap, backgroundRotation * vWorldDirection, backgroundBlurriness );\n	#else\n		vec4 texColor = vec4( 0.0, 0.0, 0.0, 1.0 );\n	#endif\n	texColor.rgb *= backgroundIntensity;\n	gl_FragColor = texColor;\n	#include <tonemapping_fragment>\n	#include <colorspace_fragment>\n}";const am="varying vec3 vWorldDirection;\n#include <common>\nvoid main() {\n	vWorldDirection = transformDirection( position, modelMatrix );\n	#include <begin_vertex>\n	#include <project_vertex>\n	gl_Position.z = gl_Position.w;\n}";const om="uniform samplerCube tCube;\nuniform float tFlip;\nuniform float opacity;\nvarying vec3 vWorldDirection;\nvoid main() {\n	vec4 texColor = textureCube( tCube, vec3( tFlip * vWorldDirection.x, vWorldDirection.yz ) );\n	gl_FragColor = texColor;\n	gl_FragColor.a *= opacity;\n	#include <tonemapping_fragment>\n	#include <colorspace_fragment>\n}";const lm="#include <common>\n#include <batching_pars_vertex>\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvarying vec2 vHighPrecisionZW;\nvoid main() {\n	#include <uv_vertex>\n	#include <batching_vertex>\n	#include <skinbase_vertex>\n	#include <morphinstance_vertex>\n	#ifdef USE_DISPLACEMENTMAP\n		#include <beginnormal_vertex>\n		#include <morphnormal_vertex>\n		#include <skinnormal_vertex>\n	#endif\n	#include <begin_vertex>\n	#include <morphtarget_vertex>\n	#include <skinning_vertex>\n	#include <displacementmap_vertex>\n	#include <project_vertex>\n	#include <logdepthbuf_vertex>\n	#include <clipping_planes_vertex>\n	vHighPrecisionZW = gl_Position.zw;\n}";const cm="#if DEPTH_PACKING == 3200\n	uniform float opacity;\n#endif\n#include <common>\n#include <packing>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <alphahash_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvarying vec2 vHighPrecisionZW;\nvoid main() {\n	vec4 diffuseColor = vec4( 1.0 );\n	#include <clipping_planes_fragment>\n	#if DEPTH_PACKING == 3200\n		diffuseColor.a = opacity;\n	#endif\n	#include <map_fragment>\n	#include <alphamap_fragment>\n	#include <alphatest_fragment>\n	#include <alphahash_fragment>\n	#include <logdepthbuf_fragment>\n	float fragCoordZ = 0.5 * vHighPrecisionZW[0] / vHighPrecisionZW[1] + 0.5;\n	#if DEPTH_PACKING == 3200\n		gl_FragColor = vec4( vec3( 1.0 - fragCoordZ ), opacity );\n	#elif DEPTH_PACKING == 3201\n		gl_FragColor = packDepthToRGBA( fragCoordZ );\n	#endif\n}";const um="#define DISTANCE\nvarying vec3 vWorldPosition;\n#include <common>\n#include <batching_pars_vertex>\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n	#include <uv_vertex>\n	#include <batching_vertex>\n	#include <skinbase_vertex>\n	#include <morphinstance_vertex>\n	#ifdef USE_DISPLACEMENTMAP\n		#include <beginnormal_vertex>\n		#include <morphnormal_vertex>\n		#include <skinnormal_vertex>\n	#endif\n	#include <begin_vertex>\n	#include <morphtarget_vertex>\n	#include <skinning_vertex>\n	#include <displacementmap_vertex>\n	#include <project_vertex>\n	#include <worldpos_vertex>\n	#include <clipping_planes_vertex>\n	vWorldPosition = worldPosition.xyz;\n}";const hm="#define DISTANCE\nuniform vec3 referencePosition;\nuniform float nearDistance;\nuniform float farDistance;\nvarying vec3 vWorldPosition;\n#include <common>\n#include <packing>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <alphahash_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main () {\n	vec4 diffuseColor = vec4( 1.0 );\n	#include <clipping_planes_fragment>\n	#include <map_fragment>\n	#include <alphamap_fragment>\n	#include <alphatest_fragment>\n	#include <alphahash_fragment>\n	float dist = length( vWorldPosition - referencePosition );\n	dist = ( dist - nearDistance ) / ( farDistance - nearDistance );\n	dist = saturate( dist );\n	gl_FragColor = packDepthToRGBA( dist );\n}";const dm="varying vec3 vWorldDirection;\n#include <common>\nvoid main() {\n	vWorldDirection = transformDirection( position, modelMatrix );\n	#include <begin_vertex>\n	#include <project_vertex>\n}";const fm="uniform sampler2D tEquirect;\nvarying vec3 vWorldDirection;\n#include <common>\nvoid main() {\n	vec3 direction = normalize( vWorldDirection );\n	vec2 sampleUV = equirectUv( direction );\n	gl_FragColor = texture2D( tEquirect, sampleUV );\n	#include <tonemapping_fragment>\n	#include <colorspace_fragment>\n}";const pm="uniform float scale;\nattribute float lineDistance;\nvarying float vLineDistance;\n#include <common>\n#include <uv_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n	vLineDistance = scale * lineDistance;\n	#include <uv_vertex>\n	#include <color_vertex>\n	#include <morphinstance_vertex>\n	#include <morphcolor_vertex>\n	#include <begin_vertex>\n	#include <morphtarget_vertex>\n	#include <project_vertex>\n	#include <logdepthbuf_vertex>\n	#include <clipping_planes_vertex>\n	#include <fog_vertex>\n}";const mm="uniform vec3 diffuse;\nuniform float opacity;\nuniform float dashSize;\nuniform float totalSize;\nvarying float vLineDistance;\n#include <common>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <fog_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n	vec4 diffuseColor = vec4( diffuse, opacity );\n	#include <clipping_planes_fragment>\n	if ( mod( vLineDistance, totalSize ) > dashSize ) {\n		discard;\n	}\n	vec3 outgoingLight = vec3( 0.0 );\n	#include <logdepthbuf_fragment>\n	#include <map_fragment>\n	#include <color_fragment>\n	outgoingLight = diffuseColor.rgb;\n	#include <opaque_fragment>\n	#include <tonemapping_fragment>\n	#include <colorspace_fragment>\n	#include <fog_fragment>\n	#include <premultiplied_alpha_fragment>\n}";const _m="#include <common>\n#include <batching_pars_vertex>\n#include <uv_pars_vertex>\n#include <envmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n	#include <uv_vertex>\n	#include <color_vertex>\n	#include <morphinstance_vertex>\n	#include <morphcolor_vertex>\n	#include <batching_vertex>\n	#if defined ( USE_ENVMAP ) || defined ( USE_SKINNING )\n		#include <beginnormal_vertex>\n		#include <morphnormal_vertex>\n		#include <skinbase_vertex>\n		#include <skinnormal_vertex>\n		#include <defaultnormal_vertex>\n	#endif\n	#include <begin_vertex>\n	#include <morphtarget_vertex>\n	#include <skinning_vertex>\n	#include <project_vertex>\n	#include <logdepthbuf_vertex>\n	#include <clipping_planes_vertex>\n	#include <worldpos_vertex>\n	#include <envmap_vertex>\n	#include <fog_vertex>\n}";const gm="uniform vec3 diffuse;\nuniform float opacity;\n#ifndef FLAT_SHADED\n	varying vec3 vNormal;\n#endif\n#include <common>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <alphahash_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <envmap_common_pars_fragment>\n#include <envmap_pars_fragment>\n#include <fog_pars_fragment>\n#include <specularmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n	vec4 diffuseColor = vec4( diffuse, opacity );\n	#include <clipping_planes_fragment>\n	#include <logdepthbuf_fragment>\n	#include <map_fragment>\n	#include <color_fragment>\n	#include <alphamap_fragment>\n	#include <alphatest_fragment>\n	#include <alphahash_fragment>\n	#include <specularmap_fragment>\n	ReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n	#ifdef USE_LIGHTMAP\n		vec4 lightMapTexel = texture2D( lightMap, vLightMapUv );\n		reflectedLight.indirectDiffuse += lightMapTexel.rgb * lightMapIntensity * RECIPROCAL_PI;\n	#else\n		reflectedLight.indirectDiffuse += vec3( 1.0 );\n	#endif\n	#include <aomap_fragment>\n	reflectedLight.indirectDiffuse *= diffuseColor.rgb;\n	vec3 outgoingLight = reflectedLight.indirectDiffuse;\n	#include <envmap_fragment>\n	#include <opaque_fragment>\n	#include <tonemapping_fragment>\n	#include <colorspace_fragment>\n	#include <fog_fragment>\n	#include <premultiplied_alpha_fragment>\n	#include <dithering_fragment>\n}";const vm="#define LAMBERT\nvarying vec3 vViewPosition;\n#include <common>\n#include <batching_pars_vertex>\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <envmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <normal_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n	#include <uv_vertex>\n	#include <color_vertex>\n	#include <morphinstance_vertex>\n	#include <morphcolor_vertex>\n	#include <batching_vertex>\n	#include <beginnormal_vertex>\n	#include <morphnormal_vertex>\n	#include <skinbase_vertex>\n	#include <skinnormal_vertex>\n	#include <defaultnormal_vertex>\n	#include <normal_vertex>\n	#include <begin_vertex>\n	#include <morphtarget_vertex>\n	#include <skinning_vertex>\n	#include <displacementmap_vertex>\n	#include <project_vertex>\n	#include <logdepthbuf_vertex>\n	#include <clipping_planes_vertex>\n	vViewPosition = - mvPosition.xyz;\n	#include <worldpos_vertex>\n	#include <envmap_vertex>\n	#include <shadowmap_vertex>\n	#include <fog_vertex>\n}";const xm="#define LAMBERT\nuniform vec3 diffuse;\nuniform vec3 emissive;\nuniform float opacity;\n#include <common>\n#include <packing>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <alphahash_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <envmap_common_pars_fragment>\n#include <envmap_pars_fragment>\n#include <fog_pars_fragment>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <normal_pars_fragment>\n#include <lights_lambert_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <specularmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n	vec4 diffuseColor = vec4( diffuse, opacity );\n	#include <clipping_planes_fragment>\n	ReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n	vec3 totalEmissiveRadiance = emissive;\n	#include <logdepthbuf_fragment>\n	#include <map_fragment>\n	#include <color_fragment>\n	#include <alphamap_fragment>\n	#include <alphatest_fragment>\n	#include <alphahash_fragment>\n	#include <specularmap_fragment>\n	#include <normal_fragment_begin>\n	#include <normal_fragment_maps>\n	#include <emissivemap_fragment>\n	#include <lights_lambert_fragment>\n	#include <lights_fragment_begin>\n	#include <lights_fragment_maps>\n	#include <lights_fragment_end>\n	#include <aomap_fragment>\n	vec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + totalEmissiveRadiance;\n	#include <envmap_fragment>\n	#include <opaque_fragment>\n	#include <tonemapping_fragment>\n	#include <colorspace_fragment>\n	#include <fog_fragment>\n	#include <premultiplied_alpha_fragment>\n	#include <dithering_fragment>\n}";const Sm="#define MATCAP\nvarying vec3 vViewPosition;\n#include <common>\n#include <batching_pars_vertex>\n#include <uv_pars_vertex>\n#include <color_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <fog_pars_vertex>\n#include <normal_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n	#include <uv_vertex>\n	#include <color_vertex>\n	#include <morphinstance_vertex>\n	#include <morphcolor_vertex>\n	#include <batching_vertex>\n	#include <beginnormal_vertex>\n	#include <morphnormal_vertex>\n	#include <skinbase_vertex>\n	#include <skinnormal_vertex>\n	#include <defaultnormal_vertex>\n	#include <normal_vertex>\n	#include <begin_vertex>\n	#include <morphtarget_vertex>\n	#include <skinning_vertex>\n	#include <displacementmap_vertex>\n	#include <project_vertex>\n	#include <logdepthbuf_vertex>\n	#include <clipping_planes_vertex>\n	#include <fog_vertex>\n	vViewPosition = - mvPosition.xyz;\n}";const Mm="#define MATCAP\nuniform vec3 diffuse;\nuniform float opacity;\nuniform sampler2D matcap;\nvarying vec3 vViewPosition;\n#include <common>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <alphahash_pars_fragment>\n#include <fog_pars_fragment>\n#include <normal_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n	vec4 diffuseColor = vec4( diffuse, opacity );\n	#include <clipping_planes_fragment>\n	#include <logdepthbuf_fragment>\n	#include <map_fragment>\n	#include <color_fragment>\n	#include <alphamap_fragment>\n	#include <alphatest_fragment>\n	#include <alphahash_fragment>\n	#include <normal_fragment_begin>\n	#include <normal_fragment_maps>\n	vec3 viewDir = normalize( vViewPosition );\n	vec3 x = normalize( vec3( viewDir.z, 0.0, - viewDir.x ) );\n	vec3 y = cross( viewDir, x );\n	vec2 uv = vec2( dot( x, normal ), dot( y, normal ) ) * 0.495 + 0.5;\n	#ifdef USE_MATCAP\n		vec4 matcapColor = texture2D( matcap, uv );\n	#else\n		vec4 matcapColor = vec4( vec3( mix( 0.2, 0.8, uv.y ) ), 1.0 );\n	#endif\n	vec3 outgoingLight = diffuseColor.rgb * matcapColor.rgb;\n	#include <opaque_fragment>\n	#include <tonemapping_fragment>\n	#include <colorspace_fragment>\n	#include <fog_fragment>\n	#include <premultiplied_alpha_fragment>\n	#include <dithering_fragment>\n}";const Em="#define NORMAL\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP_TANGENTSPACE )\n	varying vec3 vViewPosition;\n#endif\n#include <common>\n#include <batching_pars_vertex>\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <normal_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n	#include <uv_vertex>\n	#include <batching_vertex>\n	#include <beginnormal_vertex>\n	#include <morphinstance_vertex>\n	#include <morphnormal_vertex>\n	#include <skinbase_vertex>\n	#include <skinnormal_vertex>\n	#include <defaultnormal_vertex>\n	#include <normal_vertex>\n	#include <begin_vertex>\n	#include <morphtarget_vertex>\n	#include <skinning_vertex>\n	#include <displacementmap_vertex>\n	#include <project_vertex>\n	#include <logdepthbuf_vertex>\n	#include <clipping_planes_vertex>\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP_TANGENTSPACE )\n	vViewPosition = - mvPosition.xyz;\n#endif\n}";const ym="#define NORMAL\nuniform float opacity;\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP_TANGENTSPACE )\n	varying vec3 vViewPosition;\n#endif\n#include <packing>\n#include <uv_pars_fragment>\n#include <normal_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n	vec4 diffuseColor = vec4( 0.0, 0.0, 0.0, opacity );\n	#include <clipping_planes_fragment>\n	#include <logdepthbuf_fragment>\n	#include <normal_fragment_begin>\n	#include <normal_fragment_maps>\n	gl_FragColor = vec4( packNormalToRGB( normal ), diffuseColor.a );\n	#ifdef OPAQUE\n		gl_FragColor.a = 1.0;\n	#endif\n}";const Tm="#define PHONG\nvarying vec3 vViewPosition;\n#include <common>\n#include <batching_pars_vertex>\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <envmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <normal_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n	#include <uv_vertex>\n	#include <color_vertex>\n	#include <morphcolor_vertex>\n	#include <batching_vertex>\n	#include <beginnormal_vertex>\n	#include <morphinstance_vertex>\n	#include <morphnormal_vertex>\n	#include <skinbase_vertex>\n	#include <skinnormal_vertex>\n	#include <defaultnormal_vertex>\n	#include <normal_vertex>\n	#include <begin_vertex>\n	#include <morphtarget_vertex>\n	#include <skinning_vertex>\n	#include <displacementmap_vertex>\n	#include <project_vertex>\n	#include <logdepthbuf_vertex>\n	#include <clipping_planes_vertex>\n	vViewPosition = - mvPosition.xyz;\n	#include <worldpos_vertex>\n	#include <envmap_vertex>\n	#include <shadowmap_vertex>\n	#include <fog_vertex>\n}";const Am="#define PHONG\nuniform vec3 diffuse;\nuniform vec3 emissive;\nuniform vec3 specular;\nuniform float shininess;\nuniform float opacity;\n#include <common>\n#include <packing>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <alphahash_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <envmap_common_pars_fragment>\n#include <envmap_pars_fragment>\n#include <fog_pars_fragment>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <normal_pars_fragment>\n#include <lights_phong_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <specularmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n	vec4 diffuseColor = vec4( diffuse, opacity );\n	#include <clipping_planes_fragment>\n	ReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n	vec3 totalEmissiveRadiance = emissive;\n	#include <logdepthbuf_fragment>\n	#include <map_fragment>\n	#include <color_fragment>\n	#include <alphamap_fragment>\n	#include <alphatest_fragment>\n	#include <alphahash_fragment>\n	#include <specularmap_fragment>\n	#include <normal_fragment_begin>\n	#include <normal_fragment_maps>\n	#include <emissivemap_fragment>\n	#include <lights_phong_fragment>\n	#include <lights_fragment_begin>\n	#include <lights_fragment_maps>\n	#include <lights_fragment_end>\n	#include <aomap_fragment>\n	vec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveRadiance;\n	#include <envmap_fragment>\n	#include <opaque_fragment>\n	#include <tonemapping_fragment>\n	#include <colorspace_fragment>\n	#include <fog_fragment>\n	#include <premultiplied_alpha_fragment>\n	#include <dithering_fragment>\n}";const bm="#define STANDARD\nvarying vec3 vViewPosition;\n#ifdef USE_TRANSMISSION\n	varying vec3 vWorldPosition;\n#endif\n#include <common>\n#include <batching_pars_vertex>\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <normal_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n	#include <uv_vertex>\n	#include <color_vertex>\n	#include <morphinstance_vertex>\n	#include <morphcolor_vertex>\n	#include <batching_vertex>\n	#include <beginnormal_vertex>\n	#include <morphnormal_vertex>\n	#include <skinbase_vertex>\n	#include <skinnormal_vertex>\n	#include <defaultnormal_vertex>\n	#include <normal_vertex>\n	#include <begin_vertex>\n	#include <morphtarget_vertex>\n	#include <skinning_vertex>\n	#include <displacementmap_vertex>\n	#include <project_vertex>\n	#include <logdepthbuf_vertex>\n	#include <clipping_planes_vertex>\n	vViewPosition = - mvPosition.xyz;\n	#include <worldpos_vertex>\n	#include <shadowmap_vertex>\n	#include <fog_vertex>\n#ifdef USE_TRANSMISSION\n	vWorldPosition = worldPosition.xyz;\n#endif\n}";const Cm="#define STANDARD\n#ifdef PHYSICAL\n	#define IOR\n	#define USE_SPECULAR\n#endif\nuniform vec3 diffuse;\nuniform vec3 emissive;\nuniform float roughness;\nuniform float metalness;\nuniform float opacity;\n#ifdef IOR\n	uniform float ior;\n#endif\n#ifdef USE_SPECULAR\n	uniform float specularIntensity;\n	uniform vec3 specularColor;\n	#ifdef USE_SPECULAR_COLORMAP\n		uniform sampler2D specularColorMap;\n	#endif\n	#ifdef USE_SPECULAR_INTENSITYMAP\n		uniform sampler2D specularIntensityMap;\n	#endif\n#endif\n#ifdef USE_CLEARCOAT\n	uniform float clearcoat;\n	uniform float clearcoatRoughness;\n#endif\n#ifdef USE_IRIDESCENCE\n	uniform float iridescence;\n	uniform float iridescenceIOR;\n	uniform float iridescenceThicknessMinimum;\n	uniform float iridescenceThicknessMaximum;\n#endif\n#ifdef USE_SHEEN\n	uniform vec3 sheenColor;\n	uniform float sheenRoughness;\n	#ifdef USE_SHEEN_COLORMAP\n		uniform sampler2D sheenColorMap;\n	#endif\n	#ifdef USE_SHEEN_ROUGHNESSMAP\n		uniform sampler2D sheenRoughnessMap;\n	#endif\n#endif\n#ifdef USE_ANISOTROPY\n	uniform vec2 anisotropyVector;\n	#ifdef USE_ANISOTROPYMAP\n		uniform sampler2D anisotropyMap;\n	#endif\n#endif\nvarying vec3 vViewPosition;\n#include <common>\n#include <packing>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <alphahash_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <iridescence_fragment>\n#include <cube_uv_reflection_fragment>\n#include <envmap_common_pars_fragment>\n#include <envmap_physical_pars_fragment>\n#include <fog_pars_fragment>\n#include <lights_pars_begin>\n#include <normal_pars_fragment>\n#include <lights_physical_pars_fragment>\n#include <transmission_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <clearcoat_pars_fragment>\n#include <iridescence_pars_fragment>\n#include <roughnessmap_pars_fragment>\n#include <metalnessmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n	vec4 diffuseColor = vec4( diffuse, opacity );\n	#include <clipping_planes_fragment>\n	ReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n	vec3 totalEmissiveRadiance = emissive;\n	#include <logdepthbuf_fragment>\n	#include <map_fragment>\n	#include <color_fragment>\n	#include <alphamap_fragment>\n	#include <alphatest_fragment>\n	#include <alphahash_fragment>\n	#include <roughnessmap_fragment>\n	#include <metalnessmap_fragment>\n	#include <normal_fragment_begin>\n	#include <normal_fragment_maps>\n	#include <clearcoat_normal_fragment_begin>\n	#include <clearcoat_normal_fragment_maps>\n	#include <emissivemap_fragment>\n	#include <lights_physical_fragment>\n	#include <lights_fragment_begin>\n	#include <lights_fragment_maps>\n	#include <lights_fragment_end>\n	#include <aomap_fragment>\n	vec3 totalDiffuse = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse;\n	vec3 totalSpecular = reflectedLight.directSpecular + reflectedLight.indirectSpecular;\n	#include <transmission_fragment>\n	vec3 outgoingLight = totalDiffuse + totalSpecular + totalEmissiveRadiance;\n	#ifdef USE_SHEEN\n		float sheenEnergyComp = 1.0 - 0.157 * max3( material.sheenColor );\n		outgoingLight = outgoingLight * sheenEnergyComp + sheenSpecularDirect + sheenSpecularIndirect;\n	#endif\n	#ifdef USE_CLEARCOAT\n		float dotNVcc = saturate( dot( geometryClearcoatNormal, geometryViewDir ) );\n		vec3 Fcc = F_Schlick( material.clearcoatF0, material.clearcoatF90, dotNVcc );\n		outgoingLight = outgoingLight * ( 1.0 - material.clearcoat * Fcc ) + ( clearcoatSpecularDirect + clearcoatSpecularIndirect ) * material.clearcoat;\n	#endif\n	#include <opaque_fragment>\n	#include <tonemapping_fragment>\n	#include <colorspace_fragment>\n	#include <fog_fragment>\n	#include <premultiplied_alpha_fragment>\n	#include <dithering_fragment>\n}";const wm="#define TOON\nvarying vec3 vViewPosition;\n#include <common>\n#include <batching_pars_vertex>\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <normal_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n	#include <uv_vertex>\n	#include <color_vertex>\n	#include <morphinstance_vertex>\n	#include <morphcolor_vertex>\n	#include <batching_vertex>\n	#include <beginnormal_vertex>\n	#include <morphnormal_vertex>\n	#include <skinbase_vertex>\n	#include <skinnormal_vertex>\n	#include <defaultnormal_vertex>\n	#include <normal_vertex>\n	#include <begin_vertex>\n	#include <morphtarget_vertex>\n	#include <skinning_vertex>\n	#include <displacementmap_vertex>\n	#include <project_vertex>\n	#include <logdepthbuf_vertex>\n	#include <clipping_planes_vertex>\n	vViewPosition = - mvPosition.xyz;\n	#include <worldpos_vertex>\n	#include <shadowmap_vertex>\n	#include <fog_vertex>\n}";const Rm="#define TOON\nuniform vec3 diffuse;\nuniform vec3 emissive;\nuniform float opacity;\n#include <common>\n#include <packing>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <alphahash_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <gradientmap_pars_fragment>\n#include <fog_pars_fragment>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <normal_pars_fragment>\n#include <lights_toon_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n	vec4 diffuseColor = vec4( diffuse, opacity );\n	#include <clipping_planes_fragment>\n	ReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n	vec3 totalEmissiveRadiance = emissive;\n	#include <logdepthbuf_fragment>\n	#include <map_fragment>\n	#include <color_fragment>\n	#include <alphamap_fragment>\n	#include <alphatest_fragment>\n	#include <alphahash_fragment>\n	#include <normal_fragment_begin>\n	#include <normal_fragment_maps>\n	#include <emissivemap_fragment>\n	#include <lights_toon_fragment>\n	#include <lights_fragment_begin>\n	#include <lights_fragment_maps>\n	#include <lights_fragment_end>\n	#include <aomap_fragment>\n	vec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + totalEmissiveRadiance;\n	#include <opaque_fragment>\n	#include <tonemapping_fragment>\n	#include <colorspace_fragment>\n	#include <fog_fragment>\n	#include <premultiplied_alpha_fragment>\n	#include <dithering_fragment>\n}";const Lm="uniform float size;\nuniform float scale;\n#include <common>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\n#ifdef USE_POINTS_UV\n	varying vec2 vUv;\n	uniform mat3 uvTransform;\n#endif\nvoid main() {\n	#ifdef USE_POINTS_UV\n		vUv = ( uvTransform * vec3( uv, 1 ) ).xy;\n	#endif\n	#include <color_vertex>\n	#include <morphinstance_vertex>\n	#include <morphcolor_vertex>\n	#include <begin_vertex>\n	#include <morphtarget_vertex>\n	#include <project_vertex>\n	gl_PointSize = size;\n	#ifdef USE_SIZEATTENUATION\n		bool isPerspective = isPerspectiveMatrix( projectionMatrix );\n		if ( isPerspective ) gl_PointSize *= ( scale / - mvPosition.z );\n	#endif\n	#include <logdepthbuf_vertex>\n	#include <clipping_planes_vertex>\n	#include <worldpos_vertex>\n	#include <fog_vertex>\n}";const Pm="uniform vec3 diffuse;\nuniform float opacity;\n#include <common>\n#include <color_pars_fragment>\n#include <map_particle_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <alphahash_pars_fragment>\n#include <fog_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n	vec4 diffuseColor = vec4( diffuse, opacity );\n	#include <clipping_planes_fragment>\n	vec3 outgoingLight = vec3( 0.0 );\n	#include <logdepthbuf_fragment>\n	#include <map_particle_fragment>\n	#include <color_fragment>\n	#include <alphatest_fragment>\n	#include <alphahash_fragment>\n	outgoingLight = diffuseColor.rgb;\n	#include <opaque_fragment>\n	#include <tonemapping_fragment>\n	#include <colorspace_fragment>\n	#include <fog_fragment>\n	#include <premultiplied_alpha_fragment>\n}";const Dm="#include <common>\n#include <batching_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <shadowmap_pars_vertex>\nvoid main() {\n	#include <batching_vertex>\n	#include <beginnormal_vertex>\n	#include <morphinstance_vertex>\n	#include <morphnormal_vertex>\n	#include <skinbase_vertex>\n	#include <skinnormal_vertex>\n	#include <defaultnormal_vertex>\n	#include <begin_vertex>\n	#include <morphtarget_vertex>\n	#include <skinning_vertex>\n	#include <project_vertex>\n	#include <logdepthbuf_vertex>\n	#include <worldpos_vertex>\n	#include <shadowmap_vertex>\n	#include <fog_vertex>\n}";const Um="uniform vec3 color;\nuniform float opacity;\n#include <common>\n#include <packing>\n#include <fog_pars_fragment>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <logdepthbuf_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <shadowmask_pars_fragment>\nvoid main() {\n	#include <logdepthbuf_fragment>\n	gl_FragColor = vec4( color, opacity * ( 1.0 - getShadowMask() ) );\n	#include <tonemapping_fragment>\n	#include <colorspace_fragment>\n	#include <fog_fragment>\n}";const Nm="uniform float rotation;\nuniform vec2 center;\n#include <common>\n#include <uv_pars_vertex>\n#include <fog_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n	#include <uv_vertex>\n	vec4 mvPosition = modelViewMatrix * vec4( 0.0, 0.0, 0.0, 1.0 );\n	vec2 scale;\n	scale.x = length( vec3( modelMatrix[ 0 ].x, modelMatrix[ 0 ].y, modelMatrix[ 0 ].z ) );\n	scale.y = length( vec3( modelMatrix[ 1 ].x, modelMatrix[ 1 ].y, modelMatrix[ 1 ].z ) );\n	#ifndef USE_SIZEATTENUATION\n		bool isPerspective = isPerspectiveMatrix( projectionMatrix );\n		if ( isPerspective ) scale *= - mvPosition.z;\n	#endif\n	vec2 alignedPosition = ( position.xy - ( center - vec2( 0.5 ) ) ) * scale;\n	vec2 rotatedPosition;\n	rotatedPosition.x = cos( rotation ) * alignedPosition.x - sin( rotation ) * alignedPosition.y;\n	rotatedPosition.y = sin( rotation ) * alignedPosition.x + cos( rotation ) * alignedPosition.y;\n	mvPosition.xy += rotatedPosition;\n	gl_Position = projectionMatrix * mvPosition;\n	#include <logdepthbuf_vertex>\n	#include <clipping_planes_vertex>\n	#include <fog_vertex>\n}";const Im="uniform vec3 diffuse;\nuniform float opacity;\n#include <common>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <alphahash_pars_fragment>\n#include <fog_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n	vec4 diffuseColor = vec4( diffuse, opacity );\n	#include <clipping_planes_fragment>\n	vec3 outgoingLight = vec3( 0.0 );\n	#include <logdepthbuf_fragment>\n	#include <map_fragment>\n	#include <alphamap_fragment>\n	#include <alphatest_fragment>\n	#include <alphahash_fragment>\n	outgoingLight = diffuseColor.rgb;\n	#include <opaque_fragment>\n	#include <tonemapping_fragment>\n	#include <colorspace_fragment>\n	#include <fog_fragment>\n}";const Oe={alphahash_fragment:tf,alphahash_pars_fragment:nf,alphamap_fragment:rf,alphamap_pars_fragment:sf,alphatest_fragment:af,alphatest_pars_fragment:of,aomap_fragment:lf,aomap_pars_fragment:cf,batching_pars_vertex:uf,batching_vertex:hf,begin_vertex:df,beginnormal_vertex:ff,bsdfs:pf,iridescence_fragment:mf,bumpmap_pars_fragment:_f,clipping_planes_fragment:gf,clipping_planes_pars_fragment:vf,clipping_planes_pars_vertex:xf,clipping_planes_vertex:Sf,color_fragment:Mf,color_pars_fragment:Ef,color_pars_vertex:yf,color_vertex:Tf,common:Af,cube_uv_reflection_fragment:bf,defaultnormal_vertex:Cf,displacementmap_pars_vertex:wf,displacementmap_vertex:Rf,emissivemap_fragment:Lf,emissivemap_pars_fragment:Pf,colorspace_fragment:Df,colorspace_pars_fragment:Uf,envmap_fragment:Nf,envmap_common_pars_fragment:If,envmap_pars_fragment:Ff,envmap_pars_vertex:Of,envmap_physical_pars_fragment:$f,envmap_vertex:Bf,fog_vertex:zf,fog_pars_vertex:Gf,fog_fragment:Hf,fog_pars_fragment:Vf,gradientmap_pars_fragment:kf,lightmap_fragment:Wf,lightmap_pars_fragment:Xf,lights_lambert_fragment:qf,lights_lambert_pars_fragment:jf,lights_pars_begin:Yf,lights_toon_fragment:Kf,lights_toon_pars_fragment:Zf,lights_phong_fragment:Jf,lights_phong_pars_fragment:Qf,lights_physical_fragment:ep,lights_physical_pars_fragment:tp,lights_fragment_begin:np,lights_fragment_maps:ip,lights_fragment_end:rp,logdepthbuf_fragment:sp,logdepthbuf_pars_fragment:ap,logdepthbuf_pars_vertex:op,logdepthbuf_vertex:lp,map_fragment:cp,map_pars_fragment:up,map_particle_fragment:hp,map_particle_pars_fragment:dp,metalnessmap_fragment:fp,metalnessmap_pars_fragment:pp,morphinstance_vertex:mp,morphcolor_vertex:_p,morphnormal_vertex:gp,morphtarget_pars_vertex:vp,morphtarget_vertex:xp,normal_fragment_begin:Sp,normal_fragment_maps:Mp,normal_pars_fragment:Ep,normal_pars_vertex:yp,normal_vertex:Tp,normalmap_pars_fragment:Ap,clearcoat_normal_fragment_begin:bp,clearcoat_normal_fragment_maps:Cp,clearcoat_pars_fragment:wp,iridescence_pars_fragment:Rp,opaque_fragment:Lp,packing:Pp,premultiplied_alpha_fragment:Dp,project_vertex:Up,dithering_fragment:Np,dithering_pars_fragment:Ip,roughnessmap_fragment:Fp,roughnessmap_pars_fragment:Op,shadowmap_pars_fragment:Bp,shadowmap_pars_vertex:zp,shadowmap_vertex:Gp,shadowmask_pars_fragment:Hp,skinbase_vertex:Vp,skinning_pars_vertex:kp,skinning_vertex:Wp,skinnormal_vertex:Xp,specularmap_fragment:qp,specularmap_pars_fragment:jp,tonemapping_fragment:Yp,tonemapping_pars_fragment:$p,transmission_fragment:Kp,transmission_pars_fragment:Zp,uv_pars_fragment:Jp,uv_pars_vertex:Qp,uv_vertex:em,worldpos_vertex:tm,background_vert:nm,background_frag:im,backgroundCube_vert:rm,backgroundCube_frag:sm,cube_vert:am,cube_frag:om,depth_vert:lm,depth_frag:cm,distanceRGBA_vert:um,distanceRGBA_frag:hm,equirect_vert:dm,equirect_frag:fm,linedashed_vert:pm,linedashed_frag:mm,meshbasic_vert:_m,meshbasic_frag:gm,meshlambert_vert:vm,meshlambert_frag:xm,meshmatcap_vert:Sm,meshmatcap_frag:Mm,meshnormal_vert:Em,meshnormal_frag:ym,meshphong_vert:Tm,meshphong_frag:Am,meshphysical_vert:bm,meshphysical_frag:Cm,meshtoon_vert:wm,meshtoon_frag:Rm,points_vert:Lm,points_frag:Pm,shadow_vert:Dm,shadow_frag:Um,sprite_vert:Nm,sprite_frag:Im};const re={common:{diffuse:{value:new Ve(16777215)},opacity:{value:1},map:{value:null},mapTransform:{value:new Be},alphaMap:{value:null},alphaMapTransform:{value:new Be},alphaTest:{value:0}},specularmap:{specularMap:{value:null},specularMapTransform:{value:new Be}},envmap:{envMap:{value:null},envMapRotation:{value:new Be},flipEnvMap:{value:-1},reflectivity:{value:1},ior:{value:1.5},refractionRatio:{value:.98}},aomap:{aoMap:{value:null},aoMapIntensity:{value:1},aoMapTransform:{value:new Be}},lightmap:{lightMap:{value:null},lightMapIntensity:{value:1},lightMapTransform:{value:new Be}},bumpmap:{bumpMap:{value:null},bumpMapTransform:{value:new Be},bumpScale:{value:1}},normalmap:{normalMap:{value:null},normalMapTransform:{value:new Be},normalScale:{value:new Pe(1,1)}},displacementmap:{displacementMap:{value:null},displacementMapTransform:{value:new Be},displacementScale:{value:1},displacementBias:{value:0}},emissivemap:{emissiveMap:{value:null},emissiveMapTransform:{value:new Be}},metalnessmap:{metalnessMap:{value:null},metalnessMapTransform:{value:new Be}},roughnessmap:{roughnessMap:{value:null},roughnessMapTransform:{value:new Be}},gradientmap:{gradientMap:{value:null}},fog:{fogDensity:{value:25e-5},fogNear:{value:1},fogFar:{value:2e3},fogColor:{value:new Ve(16777215)}},lights:{ambientLightColor:{value:[]},lightProbe:{value:[]},directionalLights:{value:[],properties:{direction:{},color:{}}},directionalLightShadows:{value:[],properties:{shadowBias:{},shadowNormalBias:{},shadowRadius:{},shadowMapSize:{}}},directionalShadowMap:{value:[]},directionalShadowMatrix:{value:[]},spotLights:{value:[],properties:{color:{},position:{},direction:{},distance:{},coneCos:{},penumbraCos:{},decay:{}}},spotLightShadows:{value:[],properties:{shadowBias:{},shadowNormalBias:{},shadowRadius:{},shadowMapSize:{}}},spotLightMap:{value:[]},spotShadowMap:{value:[]},spotLightMatrix:{value:[]},pointLights:{value:[],properties:{color:{},position:{},decay:{},distance:{}}},pointLightShadows:{value:[],properties:{shadowBias:{},shadowNormalBias:{},shadowRadius:{},shadowMapSize:{},shadowCameraNear:{},shadowCameraFar:{}}},pointShadowMap:{value:[]},pointShadowMatrix:{value:[]},hemisphereLights:{value:[],properties:{direction:{},skyColor:{},groundColor:{}}},rectAreaLights:{value:[],properties:{color:{},position:{},width:{},height:{}}},ltc_1:{value:null},ltc_2:{value:null}},points:{diffuse:{value:new Ve(16777215)},opacity:{value:1},size:{value:1},scale:{value:1},map:{value:null},alphaMap:{value:null},alphaMapTransform:{value:new Be},alphaTest:{value:0},uvTransform:{value:new Be}},sprite:{diffuse:{value:new Ve(16777215)},opacity:{value:1},center:{value:new Pe(.5,.5)},rotation:{value:0},map:{value:null},mapTransform:{value:new Be},alphaMap:{value:null},alphaMapTransform:{value:new Be},alphaTest:{value:0}}};const Zt={basic:{uniforms:Mt([re.common,re.specularmap,re.envmap,re.aomap,re.lightmap,re.fog]),vertexShader:Oe.meshbasic_vert,fragmentShader:Oe.meshbasic_frag},lambert:{uniforms:Mt([re.common,re.specularmap,re.envmap,re.aomap,re.lightmap,re.emissivemap,re.bumpmap,re.normalmap,re.displacementmap,re.fog,re.lights,{emissive:{value:new Ve(0)}}]),vertexShader:Oe.meshlambert_vert,fragmentShader:Oe.meshlambert_frag},phong:{uniforms:Mt([re.common,re.specularmap,re.envmap,re.aomap,re.lightmap,re.emissivemap,re.bumpmap,re.normalmap,re.displacementmap,re.fog,re.lights,{emissive:{value:new Ve(0)},specular:{value:new Ve(1118481)},shininess:{value:30}}]),vertexShader:Oe.meshphong_vert,fragmentShader:Oe.meshphong_frag},standard:{uniforms:Mt([re.common,re.envmap,re.aomap,re.lightmap,re.emissivemap,re.bumpmap,re.normalmap,re.displacementmap,re.roughnessmap,re.metalnessmap,re.fog,re.lights,{emissive:{value:new Ve(0)},roughness:{value:1},metalness:{value:0},envMapIntensity:{value:1}}]),vertexShader:Oe.meshphysical_vert,fragmentShader:Oe.meshphysical_frag},toon:{uniforms:Mt([re.common,re.aomap,re.lightmap,re.emissivemap,re.bumpmap,re.normalmap,re.displacementmap,re.gradientmap,re.fog,re.lights,{emissive:{value:new Ve(0)}}]),vertexShader:Oe.meshtoon_vert,fragmentShader:Oe.meshtoon_frag},matcap:{uniforms:Mt([re.common,re.bumpmap,re.normalmap,re.displacementmap,re.fog,{matcap:{value:null}}]),vertexShader:Oe.meshmatcap_vert,fragmentShader:Oe.meshmatcap_frag},points:{uniforms:Mt([re.points,re.fog]),vertexShader:Oe.points_vert,fragmentShader:Oe.points_frag},dashed:{uniforms:Mt([re.common,re.fog,{scale:{value:1},dashSize:{value:1},totalSize:{value:2}}]),vertexShader:Oe.linedashed_vert,fragmentShader:Oe.linedashed_frag},depth:{uniforms:Mt([re.common,re.displacementmap]),vertexShader:Oe.depth_vert,fragmentShader:Oe.depth_frag},normal:{uniforms:Mt([re.common,re.bumpmap,re.normalmap,re.displacementmap,{opacity:{value:1}}]),vertexShader:Oe.meshnormal_vert,fragmentShader:Oe.meshnormal_frag},sprite:{uniforms:Mt([re.sprite,re.fog]),vertexShader:Oe.sprite_vert,fragmentShader:Oe.sprite_frag},background:{uniforms:{uvTransform:{value:new Be},t2D:{value:null},backgroundIntensity:{value:1}},vertexShader:Oe.background_vert,fragmentShader:Oe.background_frag},backgroundCube:{uniforms:{envMap:{value:null},flipEnvMap:{value:-1},backgroundBlurriness:{value:0},backgroundIntensity:{value:1},backgroundRotation:{value:new Be}},vertexShader:Oe.backgroundCube_vert,fragmentShader:Oe.backgroundCube_frag},cube:{uniforms:{tCube:{value:null},tFlip:{value:-1},opacity:{value:1}},vertexShader:Oe.cube_vert,fragmentShader:Oe.cube_frag},equirect:{uniforms:{tEquirect:{value:null}},vertexShader:Oe.equirect_vert,fragmentShader:Oe.equirect_frag},distanceRGBA:{uniforms:Mt([re.common,re.displacementmap,{referencePosition:{value:new L},nearDistance:{value:1},farDistance:{value:1e3}}]),vertexShader:Oe.distanceRGBA_vert,fragmentShader:Oe.distanceRGBA_frag},shadow:{uniforms:Mt([re.lights,re.fog,{color:{value:new Ve(0)},opacity:{value:1}}]),vertexShader:Oe.shadow_vert,fragmentShader:Oe.shadow_frag}};Zt.physical={uniforms:Mt([Zt.standard.uniforms,{clearcoat:{value:0},clearcoatMap:{value:null},clearcoatMapTransform:{value:new Be},clearcoatNormalMap:{value:null},clearcoatNormalMapTransform:{value:new Be},clearcoatNormalScale:{value:new Pe(1,1)},clearcoatRoughness:{value:0},clearcoatRoughnessMap:{value:null},clearcoatRoughnessMapTransform:{value:new Be},iridescence:{value:0},iridescenceMap:{value:null},iridescenceMapTransform:{value:new Be},iridescenceIOR:{value:1.3},iridescenceThicknessMinimum:{value:100},iridescenceThicknessMaximum:{value:400},iridescenceThicknessMap:{value:null},iridescenceThicknessMapTransform:{value:new Be},sheen:{value:0},sheenColor:{value:new Ve(0)},sheenColorMap:{value:null},sheenColorMapTransform:{value:new Be},sheenRoughness:{value:1},sheenRoughnessMap:{value:null},sheenRoughnessMapTransform:{value:new Be},transmission:{value:0},transmissionMap:{value:null},transmissionMapTransform:{value:new Be},transmissionSamplerSize:{value:new Pe},transmissionSamplerMap:{value:null},thickness:{value:0},thicknessMap:{value:null},thicknessMapTransform:{value:new Be},attenuationDistance:{value:0},attenuationColor:{value:new Ve(0)},specularColor:{value:new Ve(1,1,1)},specularColorMap:{value:null},specularColorMapTransform:{value:new Be},specularIntensity:{value:1},specularIntensityMap:{value:null},specularIntensityMapTransform:{value:new Be},anisotropyVector:{value:new Pe},anisotropyMap:{value:null},anisotropyMapTransform:{value:new Be}}]),vertexShader:Oe.meshphysical_vert,fragmentShader:Oe.meshphysical_frag};const ps={r:0,b:0,g:0};const Yn=new nn;const Fm=new nt;function Om(i,e,t,n,r,s,o){const a=new Ve(0);let l=s===true?0:1;let c;let u;let h=null;let p=0;let m=null;function g(f,d){let A=false;let M=d.isScene===true?d.background:null;if(M&&M.isTexture){const D=d.backgroundBlurriness>0;M=(D?t:e).get(M)}if(M===null){S(a,l)}else if(M&&M.isColor){S(M,1);A=true}const T=i.xr.getEnvironmentBlendMode();if(T==="additive"){n.buffers.color.setClear(0,0,0,1,o)}else if(T==="alpha-blend"){n.buffers.color.setClear(0,0,0,0,o)}if(i.autoClear||A){i.clear(i.autoClearColor,i.autoClearDepth,i.autoClearStencil)}if(M&&(M.isCubeTexture||M.mapping===qs)){if(u===void 0){u=new qt(new Gr(1,1,1),new Dt({name:"BackgroundCubeMaterial",uniforms:er(Zt.backgroundCube.uniforms),vertexShader:Zt.backgroundCube.vertexShader,fragmentShader:Zt.backgroundCube.fragmentShader,side:wt,depthTest:false,depthWrite:false,fog:false}));u.geometry.deleteAttribute("normal");u.geometry.deleteAttribute("uv");u.onBeforeRender=function(D,C,b){this.matrixWorld.copyPosition(b.matrixWorld)};Object.defineProperty(u.material,"envMap",{get:function(){return this.uniforms.envMap.value}});r.update(u)}Yn.copy(d.backgroundRotation);Yn.x*=-1;Yn.y*=-1;Yn.z*=-1;if(M.isCubeTexture&&M.isRenderTargetTexture===false){Yn.y*=-1;Yn.z*=-1}u.material.uniforms.envMap.value=M;u.material.uniforms.flipEnvMap.value=M.isCubeTexture&&M.isRenderTargetTexture===false?-1:1;u.material.uniforms.backgroundBlurriness.value=d.backgroundBlurriness;u.material.uniforms.backgroundIntensity.value=d.backgroundIntensity;u.material.uniforms.backgroundRotation.value.setFromMatrix4(Fm.makeRotationFromEuler(Yn));u.material.toneMapped=$e.getTransfer(M.colorSpace)!==Je;if(h!==M||p!==M.version||m!==i.toneMapping){u.material.needsUpdate=true;h=M;p=M.version;m=i.toneMapping}u.layers.enableAll();f.unshift(u,u.geometry,u.material,0,0,null)}else if(M&&M.isTexture){if(c===void 0){c=new qt(new Hr(2,2),new Dt({name:"BackgroundMaterial",uniforms:er(Zt.background.uniforms),vertexShader:Zt.background.vertexShader,fragmentShader:Zt.background.fragmentShader,side:On,depthTest:false,depthWrite:false,fog:false}));c.geometry.deleteAttribute("normal");Object.defineProperty(c.material,"map",{get:function(){return this.uniforms.t2D.value}});r.update(c)}c.material.uniforms.t2D.value=M;c.material.uniforms.backgroundIntensity.value=d.backgroundIntensity;c.material.toneMapped=$e.getTransfer(M.colorSpace)!==Je;if(M.matrixAutoUpdate===true){M.updateMatrix()}c.material.uniforms.uvTransform.value.copy(M.matrix);if(h!==M||p!==M.version||m!==i.toneMapping){c.material.needsUpdate=true;h=M;p=M.version;m=i.toneMapping}c.layers.enableAll();f.unshift(c,c.geometry,c.material,0,0,null)}}function S(f,d){f.getRGB(ps,Pu(i));n.buffers.color.setClear(ps.r,ps.g,ps.b,d,o)}return{getClearColor:function(){return a},setClearColor:function(f,d=1){a.set(f);l=d;S(a,l)},getClearAlpha:function(){return l},setClearAlpha:function(f){l=f;S(a,l)},render:g}}function Bm(i,e,t,n){const r=i.getParameter(i.MAX_VERTEX_ATTRIBS);const s=n.isWebGL2?null:e.get("OES_vertex_array_object");const o=n.isWebGL2||s!==null;const a={};const l=f(null);let c=l;let u=false;function h(R,k,H,j,V){let X=false;if(o){const Y=S(j,H,k);if(c!==Y){c=Y;m(c.object)}X=d(R,j,H,V);if(X)A(R,j,H,V)}else{const Y=k.wireframe===true;if(c.geometry!==j.id||c.program!==H.id||c.wireframe!==Y){c.geometry=j.id;c.program=H.id;c.wireframe=Y;X=true}}if(V!==null){t.update(V,i.ELEMENT_ARRAY_BUFFER)}if(X||u){u=false;z(R,k,H,j);if(V!==null){i.bindBuffer(i.ELEMENT_ARRAY_BUFFER,t.get(V).buffer)}}}function p(){if(n.isWebGL2)return i.createVertexArray();return s.createVertexArrayOES()}function m(R){if(n.isWebGL2)return i.bindVertexArray(R);return s.bindVertexArrayOES(R)}function g(R){if(n.isWebGL2)return i.deleteVertexArray(R);return s.deleteVertexArrayOES(R)}function S(R,k,H){const j=H.wireframe===true;let V=a[R.id];if(V===void 0){V={};a[R.id]=V}let X=V[k.id];if(X===void 0){X={};V[k.id]=X}let Y=X[j];if(Y===void 0){Y=f(p());X[j]=Y}return Y}function f(R){const k=[];const H=[];const j=[];for(let V=0;V<r;V++){k[V]=0;H[V]=0;j[V]=0}return{geometry:null,program:null,wireframe:false,newAttributes:k,enabledAttributes:H,attributeDivisors:j,object:R,attributes:{},index:null}}function d(R,k,H,j){const V=c.attributes;const X=k.attributes;let Y=0;const se=H.getAttributes();for(const de in se){const Re=se[de];if(Re.location>=0){const B=V[de];let K=X[de];if(K===void 0){if(de==="instanceMatrix"&&R.instanceMatrix)K=R.instanceMatrix;if(de==="instanceColor"&&R.instanceColor)K=R.instanceColor}if(B===void 0)return true;if(B.attribute!==K)return true;if(K&&B.data!==K.data)return true;Y++}}if(c.attributesNum!==Y)return true;if(c.index!==j)return true;return false}function A(R,k,H,j){const V={};const X=k.attributes;let Y=0;const se=H.getAttributes();for(const de in se){const Re=se[de];if(Re.location>=0){let B=X[de];if(B===void 0){if(de==="instanceMatrix"&&R.instanceMatrix)B=R.instanceMatrix;if(de==="instanceColor"&&R.instanceColor)B=R.instanceColor}const K={};K.attribute=B;if(B&&B.data){K.data=B.data}V[de]=K;Y++}}c.attributes=V;c.attributesNum=Y;c.index=j}function M(){const R=c.newAttributes;for(let k=0,H=R.length;k<H;k++){R[k]=0}}function T(R){D(R,0)}function D(R,k){const H=c.newAttributes;const j=c.enabledAttributes;const V=c.attributeDivisors;H[R]=1;if(j[R]===0){i.enableVertexAttribArray(R);j[R]=1}if(V[R]!==k){const X=n.isWebGL2?i:e.get("ANGLE_instanced_arrays");X[n.isWebGL2?"vertexAttribDivisor":"vertexAttribDivisorANGLE"](R,k);V[R]=k}}function C(){const R=c.newAttributes;const k=c.enabledAttributes;for(let H=0,j=k.length;H<j;H++){if(k[H]!==R[H]){i.disableVertexAttribArray(H);k[H]=0}}}function b(R,k,H,j,V,X,Y){if(Y===true){i.vertexAttribIPointer(R,k,H,V,X)}else{i.vertexAttribPointer(R,k,H,j,V,X)}}function z(R,k,H,j){if(n.isWebGL2===false&&(R.isInstancedMesh||j.isInstancedBufferGeometry)){if(e.get("ANGLE_instanced_arrays")===null)return}M();const V=j.attributes;const X=H.getAttributes();const Y=k.defaultAttributeValues;for(const se in X){const de=X[se];if(de.location>=0){let Re=V[se];if(Re===void 0){if(se==="instanceMatrix"&&R.instanceMatrix)Re=R.instanceMatrix;if(se==="instanceColor"&&R.instanceColor)Re=R.instanceColor}if(Re!==void 0){const B=Re.normalized;const K=Re.itemSize;const he=t.get(Re);if(he===void 0)continue;const Ae=he.buffer;const ge=he.type;const fe=he.bytesPerElement;const Ye=n.isWebGL2===true&&(ge===i.INT||ge===i.UNSIGNED_INT||Re.gpuType===du);if(Re.isInterleavedBufferAttribute){const be=Re.data;const U=be.stride;const ft=Re.offset;if(be.isInstancedInterleavedBuffer){for(let Se=0;Se<de.locationSize;Se++){D(de.location+Se,be.meshPerAttribute)}if(R.isInstancedMesh!==true&&j._maxInstanceCount===void 0){j._maxInstanceCount=be.meshPerAttribute*be.count}}else{for(let Se=0;Se<de.locationSize;Se++){T(de.location+Se)}}i.bindBuffer(i.ARRAY_BUFFER,Ae);for(let Se=0;Se<de.locationSize;Se++){b(de.location+Se,K/de.locationSize,ge,B,U*fe,(ft+K/de.locationSize*Se)*fe,Ye)}}else{if(Re.isInstancedBufferAttribute){for(let be=0;be<de.locationSize;be++){D(de.location+be,Re.meshPerAttribute)}if(R.isInstancedMesh!==true&&j._maxInstanceCount===void 0){j._maxInstanceCount=Re.meshPerAttribute*Re.count}}else{for(let be=0;be<de.locationSize;be++){T(de.location+be)}}i.bindBuffer(i.ARRAY_BUFFER,Ae);for(let be=0;be<de.locationSize;be++){b(de.location+be,K/de.locationSize,ge,B,K*fe,K/de.locationSize*be*fe,Ye)}}}else if(Y!==void 0){const B=Y[se];if(B!==void 0){switch(B.length){case 2:i.vertexAttrib2fv(de.location,B);break;case 3:i.vertexAttrib3fv(de.location,B);break;case 4:i.vertexAttrib4fv(de.location,B);break;default:i.vertexAttrib1fv(de.location,B)}}}}}C()}function ee(){te();for(const R in a){const k=a[R];for(const H in k){const j=k[H];for(const V in j){g(j[V].object);delete j[V]}delete k[H]}delete a[R]}}function v(R){if(a[R.id]===void 0)return;const k=a[R.id];for(const H in k){const j=k[H];for(const V in j){g(j[V].object);delete j[V]}delete k[H]}delete a[R.id]}function y(R){for(const k in a){const H=a[k];if(H[R.id]===void 0)continue;const j=H[R.id];for(const V in j){g(j[V].object);delete j[V]}delete H[R.id]}}function te(){J();u=true;if(c===l)return;c=l;m(c.object)}function J(){l.geometry=null;l.program=null;l.wireframe=false}return{setup:h,reset:te,resetDefaultState:J,dispose:ee,releaseStatesOfGeometry:v,releaseStatesOfProgram:y,initAttributes:M,enableAttribute:T,disableUnusedAttributes:C}}function zm(i,e,t,n){const r=n.isWebGL2;let s;function o(u){s=u}function a(u,h){i.drawArrays(s,u,h);t.update(h,s,1)}function l(u,h,p){if(p===0)return;let m,g;if(r){m=i;g="drawArraysInstanced"}else{m=e.get("ANGLE_instanced_arrays");g="drawArraysInstancedANGLE";if(m===null){console.error("THREE.WebGLBufferRenderer: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.");return}}m[g](s,u,h,p);t.update(h,s,p)}function c(u,h,p){if(p===0)return;const m=e.get("WEBGL_multi_draw");if(m===null){for(let g=0;g<p;g++){this.render(u[g],h[g])}}else{m.multiDrawArraysWEBGL(s,u,0,h,0,p);let g=0;for(let S=0;S<p;S++){g+=h[S]}t.update(g,s,1)}}this.setMode=o;this.render=a;this.renderInstances=l;this.renderMultiDraw=c}function Gm(i,e,t){let n;function r(){if(n!==void 0)return n;if(e.has("EXT_texture_filter_anisotropic")===true){const b=e.get("EXT_texture_filter_anisotropic");n=i.getParameter(b.MAX_TEXTURE_MAX_ANISOTROPY_EXT)}else{n=0}return n}function s(b){if(b==="highp"){if(i.getShaderPrecisionFormat(i.VERTEX_SHADER,i.HIGH_FLOAT).precision>0&&i.getShaderPrecisionFormat(i.FRAGMENT_SHADER,i.HIGH_FLOAT).precision>0){return"highp"}b="mediump"}if(b==="mediump"){if(i.getShaderPrecisionFormat(i.VERTEX_SHADER,i.MEDIUM_FLOAT).precision>0&&i.getShaderPrecisionFormat(i.FRAGMENT_SHADER,i.MEDIUM_FLOAT).precision>0){return"mediump"}}return"lowp"}const o=typeof WebGL2RenderingContext!=="undefined"&&i.constructor.name==="WebGL2RenderingContext";let a=t.precision!==void 0?t.precision:"highp";const l=s(a);if(l!==a){console.warn("THREE.WebGLRenderer:",a,"not supported, using",l,"instead.");a=l}const c=o||e.has("WEBGL_draw_buffers");const u=t.logarithmicDepthBuffer===true;const h=i.getParameter(i.MAX_TEXTURE_IMAGE_UNITS);const p=i.getParameter(i.MAX_VERTEX_TEXTURE_IMAGE_UNITS);const m=i.getParameter(i.MAX_TEXTURE_SIZE);const g=i.getParameter(i.MAX_CUBE_MAP_TEXTURE_SIZE);const S=i.getParameter(i.MAX_VERTEX_ATTRIBS);const f=i.getParameter(i.MAX_VERTEX_UNIFORM_VECTORS);const d=i.getParameter(i.MAX_VARYING_VECTORS);const A=i.getParameter(i.MAX_FRAGMENT_UNIFORM_VECTORS);const M=p>0;const T=o||e.has("OES_texture_float");const D=M&&T;const C=o?i.getParameter(i.MAX_SAMPLES):0;return{isWebGL2:o,drawBuffers:c,getMaxAnisotropy:r,getMaxPrecision:s,precision:a,logarithmicDepthBuffer:u,maxTextures:h,maxVertexTextures:p,maxTextureSize:m,maxCubemapSize:g,maxAttributes:S,maxVertexUniforms:f,maxVaryings:d,maxFragmentUniforms:A,vertexTextures:M,floatFragmentTextures:T,floatVertexTextures:D,maxSamples:C}}function Hm(i){const e=this;let t=null,n=0,r=false,s=false;const o=new Kn,a=new Be,l={value:null,needsUpdate:false};this.uniform=l;this.numPlanes=0;this.numIntersection=0;this.init=function(h,p){const m=h.length!==0||p||n!==0||r;r=p;n=h.length;return m};this.beginShadows=function(){s=true;u(null)};this.endShadows=function(){s=false};this.setGlobalState=function(h,p){t=u(h,p,0)};this.setState=function(h,p,m){const g=h.clippingPlanes,S=h.clipIntersection,f=h.clipShadows;const d=i.get(h);if(!r||g===null||g.length===0||s&&!f){if(s){u(null)}else{c()}}else{const A=s?0:n,M=A*4;let T=d.clippingState||null;l.value=T;T=u(g,p,M,m);for(let D=0;D!==M;++D){T[D]=t[D]}d.clippingState=T;this.numIntersection=S?this.numPlanes:0;this.numPlanes+=A}};function c(){if(l.value!==t){l.value=t;l.needsUpdate=n>0}e.numPlanes=n;e.numIntersection=0}function u(h,p,m,g){const S=h!==null?h.length:0;let f=null;if(S!==0){f=l.value;if(g!==true||f===null){const d=m+S*4,A=p.matrixWorldInverse;a.getNormalMatrix(A);if(f===null||f.length<d){f=new Float32Array(d)}for(let M=0,T=m;M!==S;++M,T+=4){o.copy(h[M]).applyMatrix4(A,a);o.normal.toArray(f,T);f[T+3]=o.constant}}l.value=f;l.needsUpdate=true}e.numPlanes=S;e.numIntersection=0;return f}}function Vm(i){let e=new WeakMap;function t(o,a){if(a===no){o.mapping=Zi}else if(a===io){o.mapping=Ji}return o}function n(o){if(o&&o.isTexture){const a=o.mapping;if(a===no||a===io){if(e.has(o)){const l=e.get(o).texture;return t(l,o.mapping)}else{const l=o.image;if(l&&l.height>0){const c=new Zd(l.height);c.fromEquirectangularTexture(i,o);e.set(o,c);o.addEventListener("dispose",r);return t(c.texture,o.mapping)}else{return null}}}}return o}function r(o){const a=o.target;a.removeEventListener("dispose",r);const l=e.get(a);if(l!==void 0){e.delete(a);l.dispose()}}function s(){e=new WeakMap}return{get:n,dispose:s}}class Ro extends Du{constructor(e=-1,t=1,n=1,r=-1,s=.1,o=2e3){super();this.isOrthographicCamera=true;this.type="OrthographicCamera";this.zoom=1;this.view=null;this.left=e;this.right=t;this.top=n;this.bottom=r;this.near=s;this.far=o;this.updateProjectionMatrix()}copy(e,t){super.copy(e,t);this.left=e.left;this.right=e.right;this.top=e.top;this.bottom=e.bottom;this.near=e.near;this.far=e.far;this.zoom=e.zoom;this.view=e.view===null?null:Object.assign({},e.view);return this}setViewOffset(e,t,n,r,s,o){if(this.view===null){this.view={enabled:true,fullWidth:1,fullHeight:1,offsetX:0,offsetY:0,width:1,height:1}}this.view.enabled=true;this.view.fullWidth=e;this.view.fullHeight=t;this.view.offsetX=n;this.view.offsetY=r;this.view.width=s;this.view.height=o;this.updateProjectionMatrix()}clearViewOffset(){if(this.view!==null){this.view.enabled=false}this.updateProjectionMatrix()}updateProjectionMatrix(){const e=(this.right-this.left)/(2*this.zoom);const t=(this.top-this.bottom)/(2*this.zoom);const n=(this.right+this.left)/2;const r=(this.top+this.bottom)/2;let s=n-e;let o=n+e;let a=r+t;let l=r-t;if(this.view!==null&&this.view.enabled){const c=(this.right-this.left)/this.view.fullWidth/this.zoom;const u=(this.top-this.bottom)/this.view.fullHeight/this.zoom;s+=c*this.view.offsetX;o=s+c*this.view.width;a-=u*this.view.offsetY;l=a-u*this.view.height}this.projectionMatrix.makeOrthographic(s,o,a,l,this.near,this.far,this.coordinateSystem);this.projectionMatrixInverse.copy(this.projectionMatrix).invert()}toJSON(e){const t=super.toJSON(e);t.object.zoom=this.zoom;t.object.left=this.left;t.object.right=this.right;t.object.top=this.top;t.object.bottom=this.bottom;t.object.near=this.near;t.object.far=this.far;if(this.view!==null)t.object.view=Object.assign({},this.view);return t}}const Li=4;const Zl=[.125,.215,.35,.446,.526,.582];const Qn=20;const Da=new Ro;const Jl=new Ve;let Ua=null;let Na=0;let Ia=0;const Zn=(1+Math.sqrt(5))/2;const bi=1/Zn;const Ql=[new L(1,1,1),new L(-1,1,1),new L(1,1,-1),new L(-1,1,-1),new L(0,Zn,bi),new L(0,Zn,-bi),new L(bi,0,Zn),new L(-bi,0,Zn),new L(Zn,bi,0),new L(-Zn,bi,0)];class ec{constructor(e){this._renderer=e;this._pingPongRenderTarget=null;this._lodMax=0;this._cubeSize=0;this._lodPlanes=[];this._sizeLods=[];this._sigmas=[];this._blurMaterial=null;this._cubemapMaterial=null;this._equirectMaterial=null;this._compileMaterial(this._blurMaterial)}fromScene(e,t=0,n=.1,r=100){Ua=this._renderer.getRenderTarget();Na=this._renderer.getActiveCubeFace();Ia=this._renderer.getActiveMipmapLevel();this._setSize(256);const s=this._allocateTargets();s.depthBuffer=true;this._sceneToCubeUV(e,n,r,s);if(t>0){this._blur(s,0,0,t)}this._applyPMREM(s);this._cleanup(s);return s}fromEquirectangular(e,t=null){return this._fromTexture(e,t)}fromCubemap(e,t=null){return this._fromTexture(e,t)}compileCubemapShader(){if(this._cubemapMaterial===null){this._cubemapMaterial=ic();this._compileMaterial(this._cubemapMaterial)}}compileEquirectangularShader(){if(this._equirectMaterial===null){this._equirectMaterial=nc();this._compileMaterial(this._equirectMaterial)}}dispose(){this._dispose();if(this._cubemapMaterial!==null)this._cubemapMaterial.dispose();if(this._equirectMaterial!==null)this._equirectMaterial.dispose()}_setSize(e){this._lodMax=Math.floor(Math.log2(e));this._cubeSize=Math.pow(2,this._lodMax)}_dispose(){if(this._blurMaterial!==null)this._blurMaterial.dispose();if(this._pingPongRenderTarget!==null)this._pingPongRenderTarget.dispose();for(let e=0;e<this._lodPlanes.length;e++){this._lodPlanes[e].dispose()}}_cleanup(e){this._renderer.setRenderTarget(Ua,Na,Ia);e.scissorTest=false;ms(e,0,0,e.width,e.height)}_fromTexture(e,t){if(e.mapping===Zi||e.mapping===Ji){this._setSize(e.image.length===0?16:e.image[0].width||e.image[0].image.width)}else{this._setSize(e.image.width/4)}Ua=this._renderer.getRenderTarget();Na=this._renderer.getActiveCubeFace();Ia=this._renderer.getActiveMipmapLevel();const n=t||this._allocateTargets();this._textureToCubeUV(e,n);this._applyPMREM(n);this._cleanup(n);return n}_allocateTargets(){const e=3*Math.max(this._cubeSize,16*7);const t=4*this._cubeSize;const n={magFilter:Ct,minFilter:Ct,generateMipmaps:false,type:Bn,format:Xt,colorSpace:Gn,depthBuffer:false};const r=tc(e,t,n);if(this._pingPongRenderTarget===null||this._pingPongRenderTarget.width!==e||this._pingPongRenderTarget.height!==t){if(this._pingPongRenderTarget!==null){this._dispose()}this._pingPongRenderTarget=tc(e,t,n);const{_lodMax:s}=this;({sizeLods:this._sizeLods,lodPlanes:this._lodPlanes,sigmas:this._sigmas}=km(s));this._blurMaterial=Wm(s,e,t)}return r}_compileMaterial(e){const t=new qt(this._lodPlanes[0],e);this._renderer.compile(t,Da)}_sceneToCubeUV(e,t,n,r){const s=90;const o=1;const a=new zt(s,o,t,n);const l=[1,-1,1,1,1,1];const c=[1,1,1,-1,-1,-1];const u=this._renderer;const h=u.autoClear;const p=u.toneMapping;u.getClearColor(Jl);u.toneMapping=Un;u.autoClear=false;const m=new wu({name:"PMREM.Background",side:wt,depthWrite:false,depthTest:false});const g=new qt(new Gr,m);let S=false;const f=e.background;if(f){if(f.isColor){m.color.copy(f);e.background=null;S=true}}else{m.color.copy(Jl);S=true}for(let d=0;d<6;d++){const A=d%3;if(A===0){a.up.set(0,l[d],0);a.lookAt(c[d],0,0)}else if(A===1){a.up.set(0,0,l[d]);a.lookAt(0,c[d],0)}else{a.up.set(0,l[d],0);a.lookAt(0,0,c[d])}const M=this._cubeSize;ms(r,A*M,d>2?M:0,M,M);u.setRenderTarget(r);if(S){u.render(g,a)}u.render(e,a)}g.geometry.dispose();g.material.dispose();u.toneMapping=p;u.autoClear=h;e.background=f}_textureToCubeUV(e,t){const n=this._renderer;const r=e.mapping===Zi||e.mapping===Ji;if(r){if(this._cubemapMaterial===null){this._cubemapMaterial=ic()}this._cubemapMaterial.uniforms.flipEnvMap.value=e.isRenderTargetTexture===false?-1:1}else{if(this._equirectMaterial===null){this._equirectMaterial=nc()}}const s=r?this._cubemapMaterial:this._equirectMaterial;const o=new qt(this._lodPlanes[0],s);const a=s.uniforms;a["envMap"].value=e;const l=this._cubeSize;ms(t,0,0,3*l,2*l);n.setRenderTarget(t);n.render(o,Da)}_applyPMREM(e){const t=this._renderer;const n=t.autoClear;t.autoClear=false;for(let r=1;r<this._lodPlanes.length;r++){const s=Math.sqrt(this._sigmas[r]*this._sigmas[r]-this._sigmas[r-1]*this._sigmas[r-1]);const o=Ql[(r-1)%Ql.length];this._blur(e,r-1,r,s,o)}t.autoClear=n}_blur(e,t,n,r,s){const o=this._pingPongRenderTarget;this._halfBlur(e,o,t,n,r,"latitudinal",s);this._halfBlur(o,e,n,n,r,"longitudinal",s)}_halfBlur(e,t,n,r,s,o,a){const l=this._renderer;const c=this._blurMaterial;if(o!=="latitudinal"&&o!=="longitudinal"){console.error("blur direction must be either latitudinal or longitudinal!")}const u=3;const h=new qt(this._lodPlanes[r],c);const p=c.uniforms;const m=this._sizeLods[n]-1;const g=isFinite(s)?Math.PI/(2*m):2*Math.PI/(2*Qn-1);const S=s/g;const f=isFinite(s)?1+Math.floor(u*S):Qn;if(f>Qn){console.warn(`sigmaRadians, ${s}, is too large and will clip, as it requested ${f} samples when the maximum is set to ${Qn}`)}const d=[];let A=0;for(let b=0;b<Qn;++b){const z=b/S;const ee=Math.exp(-z*z/2);d.push(ee);if(b===0){A+=ee}else if(b<f){A+=2*ee}}for(let b=0;b<d.length;b++){d[b]=d[b]/A}p["envMap"].value=e.texture;p["samples"].value=f;p["weights"].value=d;p["latitudinal"].value=o==="latitudinal";if(a){p["poleAxis"].value=a}const{_lodMax:M}=this;p["dTheta"].value=g;p["mipInt"].value=M-n;const T=this._sizeLods[r];const D=3*T*(r>M-Li?r-M+Li:0);const C=4*(this._cubeSize-T);ms(t,D,C,3*T,2*T);l.setRenderTarget(t);l.render(h,Da)}}function km(i){const e=[];const t=[];const n=[];let r=i;const s=i-Li+1+Zl.length;for(let o=0;o<s;o++){const a=Math.pow(2,r);t.push(a);let l=1/a;if(o>i-Li){l=Zl[o-i+Li-1]}else if(o===0){l=0}n.push(l);const c=1/(a-2);const u=-c;const h=1+c;const p=[u,u,h,u,h,h,u,u,h,h,u,h];const m=6;const g=6;const S=3;const f=2;const d=1;const A=new Float32Array(S*g*m);const M=new Float32Array(f*g*m);const T=new Float32Array(d*g*m);for(let C=0;C<m;C++){const b=C%3*2/3-1;const z=C>2?0:-1;const ee=[b,z,0,b+2/3,z,0,b+2/3,z+1,0,b,z,0,b+2/3,z+1,0,b,z+1,0];A.set(ee,S*g*C);M.set(p,f*g*C);const v=[C,C,C,C,C,C];T.set(v,d*g*C)}const D=new Ut;D.setAttribute("position",new en(A,S));D.setAttribute("uv",new en(M,f));D.setAttribute("faceIndex",new en(T,d));e.push(D);if(r>Li){r--}}return{lodPlanes:e,sizeLods:t,sigmas:n}}function tc(i,e,t){const n=new tn(i,e,t);n.texture.mapping=qs;n.texture.name="PMREM.cubeUv";n.scissorTest=true;return n}function ms(i,e,t,n,r){i.viewport.set(e,t,n,r);i.scissor.set(e,t,n,r)}function Wm(i,e,t){const n=new Float32Array(Qn);const r=new L(0,1,0);const s=new Dt({name:"SphericalGaussianBlur",defines:{"n":Qn,"CUBEUV_TEXEL_WIDTH":1/e,"CUBEUV_TEXEL_HEIGHT":1/t,"CUBEUV_MAX_MIP":`${i}.0`},uniforms:{"envMap":{value:null},"samples":{value:1},"weights":{value:n},"latitudinal":{value:false},"dTheta":{value:0},"mipInt":{value:0},"poleAxis":{value:r}},vertexShader:Lo(),fragmentShader:`

			precision mediump float;
			precision mediump int;

			varying vec3 vOutputDirection;

			uniform sampler2D envMap;
			uniform int samples;
			uniform float weights[ n ];
			uniform bool latitudinal;
			uniform float dTheta;
			uniform float mipInt;
			uniform vec3 poleAxis;

			#define ENVMAP_TYPE_CUBE_UV
			#include <cube_uv_reflection_fragment>

			vec3 getSample( float theta, vec3 axis ) {

				float cosTheta = cos( theta );
				// Rodrigues' axis-angle rotation
				vec3 sampleDirection = vOutputDirection * cosTheta
					+ cross( axis, vOutputDirection ) * sin( theta )
					+ axis * dot( axis, vOutputDirection ) * ( 1.0 - cosTheta );

				return bilinearCubeUV( envMap, sampleDirection, mipInt );

			}

			void main() {

				vec3 axis = latitudinal ? poleAxis : cross( poleAxis, vOutputDirection );

				if ( all( equal( axis, vec3( 0.0 ) ) ) ) {

					axis = vec3( vOutputDirection.z, 0.0, - vOutputDirection.x );

				}

				axis = normalize( axis );

				gl_FragColor = vec4( 0.0, 0.0, 0.0, 1.0 );
				gl_FragColor.rgb += weights[ 0 ] * getSample( 0.0, axis );

				for ( int i = 1; i < n; i++ ) {

					if ( i >= samples ) {

						break;

					}

					float theta = dTheta * float( i );
					gl_FragColor.rgb += weights[ i ] * getSample( -1.0 * theta, axis );
					gl_FragColor.rgb += weights[ i ] * getSample( theta, axis );

				}

			}
		`,blending:Sn,depthTest:false,depthWrite:false});return s}function nc(){return new Dt({name:"EquirectangularToCubeUV",uniforms:{"envMap":{value:null}},vertexShader:Lo(),fragmentShader:`

			precision mediump float;
			precision mediump int;

			varying vec3 vOutputDirection;

			uniform sampler2D envMap;

			#include <common>

			void main() {

				vec3 outputDirection = normalize( vOutputDirection );
				vec2 uv = equirectUv( outputDirection );

				gl_FragColor = vec4( texture2D ( envMap, uv ).rgb, 1.0 );

			}
		`,blending:Sn,depthTest:false,depthWrite:false})}function ic(){return new Dt({name:"CubemapToCubeUV",uniforms:{"envMap":{value:null},"flipEnvMap":{value:-1}},vertexShader:Lo(),fragmentShader:`

			precision mediump float;
			precision mediump int;

			uniform float flipEnvMap;

			varying vec3 vOutputDirection;

			uniform samplerCube envMap;

			void main() {

				gl_FragColor = textureCube( envMap, vec3( flipEnvMap * vOutputDirection.x, vOutputDirection.yz ) );

			}
		`,blending:Sn,depthTest:false,depthWrite:false})}function Lo(){return`

		precision mediump float;
		precision mediump int;

		attribute float faceIndex;

		varying vec3 vOutputDirection;

		// RH coordinate system; PMREM face-indexing convention
		vec3 getDirection( vec2 uv, float face ) {

			uv = 2.0 * uv - 1.0;

			vec3 direction = vec3( uv, 1.0 );

			if ( face == 0.0 ) {

				direction = direction.zyx; // ( 1, v, u ) pos x

			} else if ( face == 1.0 ) {

				direction = direction.xzy;
				direction.xz *= -1.0; // ( -u, 1, -v ) pos y

			} else if ( face == 2.0 ) {

				direction.x *= -1.0; // ( -u, v, 1 ) pos z

			} else if ( face == 3.0 ) {

				direction = direction.zyx;
				direction.xz *= -1.0; // ( -1, v, -u ) neg x

			} else if ( face == 4.0 ) {

				direction = direction.xzy;
				direction.xy *= -1.0; // ( -u, -1, v ) neg y

			} else if ( face == 5.0 ) {

				direction.z *= -1.0; // ( u, v, -1 ) neg z

			}

			return direction;

		}

		void main() {

			vOutputDirection = getDirection( uv, faceIndex );
			gl_Position = vec4( position, 1.0 );

		}
	`}function Xm(i){let e=new WeakMap;let t=null;function n(a){if(a&&a.isTexture){const l=a.mapping;const c=l===no||l===io;const u=l===Zi||l===Ji;if(c||u){if(a.isRenderTargetTexture&&a.needsPMREMUpdate===true){a.needsPMREMUpdate=false;let h=e.get(a);if(t===null)t=new ec(i);h=c?t.fromEquirectangular(a,h):t.fromCubemap(a,h);e.set(a,h);return h.texture}else{if(e.has(a)){return e.get(a).texture}else{const h=a.image;if(c&&h&&h.height>0||u&&h&&r(h)){if(t===null)t=new ec(i);const p=c?t.fromEquirectangular(a):t.fromCubemap(a);e.set(a,p);a.addEventListener("dispose",s);return p.texture}else{return null}}}}}return a}function r(a){let l=0;const c=6;for(let u=0;u<c;u++){if(a[u]!==void 0)l++}return l===c}function s(a){const l=a.target;l.removeEventListener("dispose",s);const c=e.get(l);if(c!==void 0){e.delete(l);c.dispose()}}function o(){e=new WeakMap;if(t!==null){t.dispose();t=null}}return{get:n,dispose:o}}function qm(i){const e={};function t(n){if(e[n]!==void 0){return e[n]}let r;switch(n){case"WEBGL_depth_texture":r=i.getExtension("WEBGL_depth_texture")||i.getExtension("MOZ_WEBGL_depth_texture")||i.getExtension("WEBKIT_WEBGL_depth_texture");break;case"EXT_texture_filter_anisotropic":r=i.getExtension("EXT_texture_filter_anisotropic")||i.getExtension("MOZ_EXT_texture_filter_anisotropic")||i.getExtension("WEBKIT_EXT_texture_filter_anisotropic");break;case"WEBGL_compressed_texture_s3tc":r=i.getExtension("WEBGL_compressed_texture_s3tc")||i.getExtension("MOZ_WEBGL_compressed_texture_s3tc")||i.getExtension("WEBKIT_WEBGL_compressed_texture_s3tc");break;case"WEBGL_compressed_texture_pvrtc":r=i.getExtension("WEBGL_compressed_texture_pvrtc")||i.getExtension("WEBKIT_WEBGL_compressed_texture_pvrtc");break;default:r=i.getExtension(n)}e[n]=r;return r}return{has:function(n){return t(n)!==null},init:function(n){if(n.isWebGL2){t("EXT_color_buffer_float");t("WEBGL_clip_cull_distance")}else{t("WEBGL_depth_texture");t("OES_texture_float");t("OES_texture_half_float");t("OES_texture_half_float_linear");t("OES_standard_derivatives");t("OES_element_index_uint");t("OES_vertex_array_object");t("ANGLE_instanced_arrays")}t("OES_texture_float_linear");t("EXT_color_buffer_half_float");t("WEBGL_multisampled_render_to_texture")},get:function(n){const r=t(n);if(r===null){console.warn("THREE.WebGLRenderer: "+n+" extension not supported.")}return r}}}function jm(i,e,t,n){const r={};const s=new WeakMap;function o(h){const p=h.target;if(p.index!==null){e.remove(p.index)}for(const g in p.attributes){e.remove(p.attributes[g])}for(const g in p.morphAttributes){const S=p.morphAttributes[g];for(let f=0,d=S.length;f<d;f++){e.remove(S[f])}}p.removeEventListener("dispose",o);delete r[p.id];const m=s.get(p);if(m){e.remove(m);s.delete(p)}n.releaseStatesOfGeometry(p);if(p.isInstancedBufferGeometry===true){delete p._maxInstanceCount}t.memory.geometries--}function a(h,p){if(r[p.id]===true)return p;p.addEventListener("dispose",o);r[p.id]=true;t.memory.geometries++;return p}function l(h){const p=h.attributes;for(const g in p){e.update(p[g],i.ARRAY_BUFFER)}const m=h.morphAttributes;for(const g in m){const S=m[g];for(let f=0,d=S.length;f<d;f++){e.update(S[f],i.ARRAY_BUFFER)}}}function c(h){const p=[];const m=h.index;const g=h.attributes.position;let S=0;if(m!==null){const A=m.array;S=m.version;for(let M=0,T=A.length;M<T;M+=3){const D=A[M+0];const C=A[M+1];const b=A[M+2];p.push(D,C,C,b,b,D)}}else if(g!==void 0){const A=g.array;S=g.version;for(let M=0,T=A.length/3-1;M<T;M+=3){const D=M+0;const C=M+1;const b=M+2;p.push(D,C,C,b,b,D)}}else{return}const f=new(Mu(p)?Lu:Ru)(p,1);f.version=S;const d=s.get(h);if(d)e.remove(d);s.set(h,f)}function u(h){const p=s.get(h);if(p){const m=h.index;if(m!==null){if(p.version<m.version){c(h)}}}else{c(h)}return s.get(h)}return{get:a,update:l,getWireframeAttribute:u}}function Ym(i,e,t,n){const r=n.isWebGL2;let s;function o(m){s=m}let a,l;function c(m){a=m.type;l=m.bytesPerElement}function u(m,g){i.drawElements(s,g,a,m*l);t.update(g,s,1)}function h(m,g,S){if(S===0)return;let f,d;if(r){f=i;d="drawElementsInstanced"}else{f=e.get("ANGLE_instanced_arrays");d="drawElementsInstancedANGLE";if(f===null){console.error("THREE.WebGLIndexedBufferRenderer: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.");return}}f[d](s,g,a,m*l,S);t.update(g,s,S)}function p(m,g,S){if(S===0)return;const f=e.get("WEBGL_multi_draw");if(f===null){for(let d=0;d<S;d++){this.render(m[d]/l,g[d])}}else{f.multiDrawElementsWEBGL(s,g,0,a,m,0,S);let d=0;for(let A=0;A<S;A++){d+=g[A]}t.update(d,s,1)}}this.setMode=o;this.setIndex=c;this.render=u;this.renderInstances=h;this.renderMultiDraw=p}function $m(i){const e={geometries:0,textures:0};const t={frame:0,calls:0,triangles:0,points:0,lines:0};function n(s,o,a){t.calls++;switch(o){case i.TRIANGLES:t.triangles+=a*(s/3);break;case i.LINES:t.lines+=a*(s/2);break;case i.LINE_STRIP:t.lines+=a*(s-1);break;case i.LINE_LOOP:t.lines+=a*s;break;case i.POINTS:t.points+=a*s;break;default:console.error("THREE.WebGLInfo: Unknown draw mode:",o);break}}function r(){t.calls=0;t.triangles=0;t.points=0;t.lines=0}return{memory:e,render:t,programs:null,autoReset:true,reset:r,update:n}}function Km(i,e){return i[0]-e[0]}function Zm(i,e){return Math.abs(e[1])-Math.abs(i[1])}function Jm(i,e,t){const n={};const r=new Float32Array(8);const s=new WeakMap;const o=new dt;const a=[];for(let c=0;c<8;c++){a[c]=[c,0]}function l(c,u,h){const p=c.morphTargetInfluences;if(e.isWebGL2===true){const g=u.morphAttributes.position||u.morphAttributes.normal||u.morphAttributes.color;const S=g!==void 0?g.length:0;let f=s.get(u);if(f===void 0||f.count!==S){let J=function(){y.dispose();s.delete(u);u.removeEventListener("dispose",J)};var m=J;if(f!==void 0)f.texture.dispose();const d=u.morphAttributes.position!==void 0;const A=u.morphAttributes.normal!==void 0;const M=u.morphAttributes.color!==void 0;const T=u.morphAttributes.position||[];const D=u.morphAttributes.normal||[];const C=u.morphAttributes.color||[];let b=0;if(d===true)b=1;if(A===true)b=2;if(M===true)b=3;let z=u.attributes.position.count*b;let ee=1;if(z>e.maxTextureSize){ee=Math.ceil(z/e.maxTextureSize);z=e.maxTextureSize}const v=new Float32Array(z*ee*4*S);const y=new Tu(v,z,ee,S);y.type=gn;y.needsUpdate=true;const te=b*4;for(let R=0;R<S;R++){const k=T[R];const H=D[R];const j=C[R];const V=z*ee*4*R;for(let X=0;X<k.count;X++){const Y=X*te;if(d===true){o.fromBufferAttribute(k,X);v[V+Y+0]=o.x;v[V+Y+1]=o.y;v[V+Y+2]=o.z;v[V+Y+3]=0}if(A===true){o.fromBufferAttribute(H,X);v[V+Y+4]=o.x;v[V+Y+5]=o.y;v[V+Y+6]=o.z;v[V+Y+7]=0}if(M===true){o.fromBufferAttribute(j,X);v[V+Y+8]=o.x;v[V+Y+9]=o.y;v[V+Y+10]=o.z;v[V+Y+11]=j.itemSize===4?o.w:1}}}f={count:S,texture:y,size:new Pe(z,ee)};s.set(u,f);u.addEventListener("dispose",J)}if(c.isInstancedMesh===true&&c.morphTexture!==null){h.getUniforms().setValue(i,"morphTexture",c.morphTexture,t)}else{let d=0;for(let M=0;M<p.length;M++){d+=p[M]}const A=u.morphTargetsRelative?1:1-d;h.getUniforms().setValue(i,"morphTargetBaseInfluence",A);h.getUniforms().setValue(i,"morphTargetInfluences",p)}h.getUniforms().setValue(i,"morphTargetsTexture",f.texture,t);h.getUniforms().setValue(i,"morphTargetsTextureSize",f.size)}else{const g=p===void 0?0:p.length;let S=n[u.id];if(S===void 0||S.length!==g){S=[];for(let T=0;T<g;T++){S[T]=[T,0]}n[u.id]=S}for(let T=0;T<g;T++){const D=S[T];D[0]=T;D[1]=p[T]}S.sort(Zm);for(let T=0;T<8;T++){if(T<g&&S[T][1]){a[T][0]=S[T][0];a[T][1]=S[T][1]}else{a[T][0]=Number.MAX_SAFE_INTEGER;a[T][1]=0}}a.sort(Km);const f=u.morphAttributes.position;const d=u.morphAttributes.normal;let A=0;for(let T=0;T<8;T++){const D=a[T];const C=D[0];const b=D[1];if(C!==Number.MAX_SAFE_INTEGER&&b){if(f&&u.getAttribute("morphTarget"+T)!==f[C]){u.setAttribute("morphTarget"+T,f[C])}if(d&&u.getAttribute("morphNormal"+T)!==d[C]){u.setAttribute("morphNormal"+T,d[C])}r[T]=b;A+=b}else{if(f&&u.hasAttribute("morphTarget"+T)===true){u.deleteAttribute("morphTarget"+T)}if(d&&u.hasAttribute("morphNormal"+T)===true){u.deleteAttribute("morphNormal"+T)}r[T]=0}}const M=u.morphTargetsRelative?1:1-A;h.getUniforms().setValue(i,"morphTargetBaseInfluence",M);h.getUniforms().setValue(i,"morphTargetInfluences",r)}}return{update:l}}function Qm(i,e,t,n){let r=new WeakMap;function s(l){const c=n.render.frame;const u=l.geometry;const h=e.get(l,u);if(r.get(h)!==c){e.update(h);r.set(h,c)}if(l.isInstancedMesh){if(l.hasEventListener("dispose",a)===false){l.addEventListener("dispose",a)}if(r.get(l)!==c){t.update(l.instanceMatrix,i.ARRAY_BUFFER);if(l.instanceColor!==null){t.update(l.instanceColor,i.ARRAY_BUFFER)}r.set(l,c)}}if(l.isSkinnedMesh){const p=l.skeleton;if(r.get(p)!==c){p.update();r.set(p,c)}}return h}function o(){r=new WeakMap}function a(l){const c=l.target;c.removeEventListener("dispose",a);t.remove(c.instanceMatrix);if(c.instanceColor!==null)t.remove(c.instanceColor)}return{update:s,dispose:o}}class Iu extends yt{constructor(e,t,n,r,s,o,a,l,c,u){u=u!==void 0?u:oi;if(u!==oi&&u!==Qi){throw new Error("DepthTexture format must be either THREE.DepthFormat or THREE.DepthStencilFormat")}if(n===void 0&&u===oi)n=Dn;if(n===void 0&&u===Qi)n=ai;super(null,r,s,o,a,l,u,n,c);this.isDepthTexture=true;this.image={width:e,height:t};this.magFilter=a!==void 0?a:Et;this.minFilter=l!==void 0?l:Et;this.flipY=false;this.generateMipmaps=false;this.compareFunction=null}copy(e){super.copy(e);this.compareFunction=e.compareFunction;return this}toJSON(e){const t=super.toJSON(e);if(this.compareFunction!==null)t.compareFunction=this.compareFunction;return t}}const Fu=new yt;const Ou=new Iu(1,1);Ou.compareFunction=Su;const Bu=new Tu;const zu=new Id;const Gu=new Uu;const rc=[];const sc=[];const ac=new Float32Array(16);const oc=new Float32Array(9);const lc=new Float32Array(4);function ir(i,e,t){const n=i[0];if(n<=0||n>0)return i;const r=e*t;let s=rc[r];if(s===void 0){s=new Float32Array(r);rc[r]=s}if(e!==0){n.toArray(s,0);for(let o=1,a=0;o!==e;++o){a+=t;i[o].toArray(s,a)}}return s}function lt(i,e){if(i.length!==e.length)return false;for(let t=0,n=i.length;t<n;t++){if(i[t]!==e[t])return false}return true}function ct(i,e){for(let t=0,n=e.length;t<n;t++){i[t]=e[t]}}function $s(i,e){let t=sc[e];if(t===void 0){t=new Int32Array(e);sc[e]=t}for(let n=0;n!==e;++n){t[n]=i.allocateTextureUnit()}return t}function e_(i,e){const t=this.cache;if(t[0]===e)return;i.uniform1f(this.addr,e);t[0]=e}function t_(i,e){const t=this.cache;if(e.x!==void 0){if(t[0]!==e.x||t[1]!==e.y){i.uniform2f(this.addr,e.x,e.y);t[0]=e.x;t[1]=e.y}}else{if(lt(t,e))return;i.uniform2fv(this.addr,e);ct(t,e)}}function n_(i,e){const t=this.cache;if(e.x!==void 0){if(t[0]!==e.x||t[1]!==e.y||t[2]!==e.z){i.uniform3f(this.addr,e.x,e.y,e.z);t[0]=e.x;t[1]=e.y;t[2]=e.z}}else if(e.r!==void 0){if(t[0]!==e.r||t[1]!==e.g||t[2]!==e.b){i.uniform3f(this.addr,e.r,e.g,e.b);t[0]=e.r;t[1]=e.g;t[2]=e.b}}else{if(lt(t,e))return;i.uniform3fv(this.addr,e);ct(t,e)}}function i_(i,e){const t=this.cache;if(e.x!==void 0){if(t[0]!==e.x||t[1]!==e.y||t[2]!==e.z||t[3]!==e.w){i.uniform4f(this.addr,e.x,e.y,e.z,e.w);t[0]=e.x;t[1]=e.y;t[2]=e.z;t[3]=e.w}}else{if(lt(t,e))return;i.uniform4fv(this.addr,e);ct(t,e)}}function r_(i,e){const t=this.cache;const n=e.elements;if(n===void 0){if(lt(t,e))return;i.uniformMatrix2fv(this.addr,false,e);ct(t,e)}else{if(lt(t,n))return;lc.set(n);i.uniformMatrix2fv(this.addr,false,lc);ct(t,n)}}function s_(i,e){const t=this.cache;const n=e.elements;if(n===void 0){if(lt(t,e))return;i.uniformMatrix3fv(this.addr,false,e);ct(t,e)}else{if(lt(t,n))return;oc.set(n);i.uniformMatrix3fv(this.addr,false,oc);ct(t,n)}}function a_(i,e){const t=this.cache;const n=e.elements;if(n===void 0){if(lt(t,e))return;i.uniformMatrix4fv(this.addr,false,e);ct(t,e)}else{if(lt(t,n))return;ac.set(n);i.uniformMatrix4fv(this.addr,false,ac);ct(t,n)}}function o_(i,e){const t=this.cache;if(t[0]===e)return;i.uniform1i(this.addr,e);t[0]=e}function l_(i,e){const t=this.cache;if(e.x!==void 0){if(t[0]!==e.x||t[1]!==e.y){i.uniform2i(this.addr,e.x,e.y);t[0]=e.x;t[1]=e.y}}else{if(lt(t,e))return;i.uniform2iv(this.addr,e);ct(t,e)}}function c_(i,e){const t=this.cache;if(e.x!==void 0){if(t[0]!==e.x||t[1]!==e.y||t[2]!==e.z){i.uniform3i(this.addr,e.x,e.y,e.z);t[0]=e.x;t[1]=e.y;t[2]=e.z}}else{if(lt(t,e))return;i.uniform3iv(this.addr,e);ct(t,e)}}function u_(i,e){const t=this.cache;if(e.x!==void 0){if(t[0]!==e.x||t[1]!==e.y||t[2]!==e.z||t[3]!==e.w){i.uniform4i(this.addr,e.x,e.y,e.z,e.w);t[0]=e.x;t[1]=e.y;t[2]=e.z;t[3]=e.w}}else{if(lt(t,e))return;i.uniform4iv(this.addr,e);ct(t,e)}}function h_(i,e){const t=this.cache;if(t[0]===e)return;i.uniform1ui(this.addr,e);t[0]=e}function d_(i,e){const t=this.cache;if(e.x!==void 0){if(t[0]!==e.x||t[1]!==e.y){i.uniform2ui(this.addr,e.x,e.y);t[0]=e.x;t[1]=e.y}}else{if(lt(t,e))return;i.uniform2uiv(this.addr,e);ct(t,e)}}function f_(i,e){const t=this.cache;if(e.x!==void 0){if(t[0]!==e.x||t[1]!==e.y||t[2]!==e.z){i.uniform3ui(this.addr,e.x,e.y,e.z);t[0]=e.x;t[1]=e.y;t[2]=e.z}}else{if(lt(t,e))return;i.uniform3uiv(this.addr,e);ct(t,e)}}function p_(i,e){const t=this.cache;if(e.x!==void 0){if(t[0]!==e.x||t[1]!==e.y||t[2]!==e.z||t[3]!==e.w){i.uniform4ui(this.addr,e.x,e.y,e.z,e.w);t[0]=e.x;t[1]=e.y;t[2]=e.z;t[3]=e.w}}else{if(lt(t,e))return;i.uniform4uiv(this.addr,e);ct(t,e)}}function m_(i,e,t){const n=this.cache;const r=t.allocateTextureUnit();if(n[0]!==r){i.uniform1i(this.addr,r);n[0]=r}const s=this.type===i.SAMPLER_2D_SHADOW?Ou:Fu;t.setTexture2D(e||s,r)}function __(i,e,t){const n=this.cache;const r=t.allocateTextureUnit();if(n[0]!==r){i.uniform1i(this.addr,r);n[0]=r}t.setTexture3D(e||zu,r)}function g_(i,e,t){const n=this.cache;const r=t.allocateTextureUnit();if(n[0]!==r){i.uniform1i(this.addr,r);n[0]=r}t.setTextureCube(e||Gu,r)}function v_(i,e,t){const n=this.cache;const r=t.allocateTextureUnit();if(n[0]!==r){i.uniform1i(this.addr,r);n[0]=r}t.setTexture2DArray(e||Bu,r)}function x_(i){switch(i){case 5126:return e_;case 35664:return t_;case 35665:return n_;case 35666:return i_;case 35674:return r_;case 35675:return s_;case 35676:return a_;case 5124:case 35670:return o_;case 35667:case 35671:return l_;case 35668:case 35672:return c_;case 35669:case 35673:return u_;case 5125:return h_;case 36294:return d_;case 36295:return f_;case 36296:return p_;case 35678:case 36198:case 36298:case 36306:case 35682:return m_;case 35679:case 36299:case 36307:return __;case 35680:case 36300:case 36308:case 36293:return g_;case 36289:case 36303:case 36311:case 36292:return v_}}function S_(i,e){i.uniform1fv(this.addr,e)}function M_(i,e){const t=ir(e,this.size,2);i.uniform2fv(this.addr,t)}function E_(i,e){const t=ir(e,this.size,3);i.uniform3fv(this.addr,t)}function y_(i,e){const t=ir(e,this.size,4);i.uniform4fv(this.addr,t)}function T_(i,e){const t=ir(e,this.size,4);i.uniformMatrix2fv(this.addr,false,t)}function A_(i,e){const t=ir(e,this.size,9);i.uniformMatrix3fv(this.addr,false,t)}function b_(i,e){const t=ir(e,this.size,16);i.uniformMatrix4fv(this.addr,false,t)}function C_(i,e){i.uniform1iv(this.addr,e)}function w_(i,e){i.uniform2iv(this.addr,e)}function R_(i,e){i.uniform3iv(this.addr,e)}function L_(i,e){i.uniform4iv(this.addr,e)}function P_(i,e){i.uniform1uiv(this.addr,e)}function D_(i,e){i.uniform2uiv(this.addr,e)}function U_(i,e){i.uniform3uiv(this.addr,e)}function N_(i,e){i.uniform4uiv(this.addr,e)}function I_(i,e,t){const n=this.cache;const r=e.length;const s=$s(t,r);if(!lt(n,s)){i.uniform1iv(this.addr,s);ct(n,s)}for(let o=0;o!==r;++o){t.setTexture2D(e[o]||Fu,s[o])}}function F_(i,e,t){const n=this.cache;const r=e.length;const s=$s(t,r);if(!lt(n,s)){i.uniform1iv(this.addr,s);ct(n,s)}for(let o=0;o!==r;++o){t.setTexture3D(e[o]||zu,s[o])}}function O_(i,e,t){const n=this.cache;const r=e.length;const s=$s(t,r);if(!lt(n,s)){i.uniform1iv(this.addr,s);ct(n,s)}for(let o=0;o!==r;++o){t.setTextureCube(e[o]||Gu,s[o])}}function B_(i,e,t){const n=this.cache;const r=e.length;const s=$s(t,r);if(!lt(n,s)){i.uniform1iv(this.addr,s);ct(n,s)}for(let o=0;o!==r;++o){t.setTexture2DArray(e[o]||Bu,s[o])}}function z_(i){switch(i){case 5126:return S_;case 35664:return M_;case 35665:return E_;case 35666:return y_;case 35674:return T_;case 35675:return A_;case 35676:return b_;case 5124:case 35670:return C_;case 35667:case 35671:return w_;case 35668:case 35672:return R_;case 35669:case 35673:return L_;case 5125:return P_;case 36294:return D_;case 36295:return U_;case 36296:return N_;case 35678:case 36198:case 36298:case 36306:case 35682:return I_;case 35679:case 36299:case 36307:return F_;case 35680:case 36300:case 36308:case 36293:return O_;case 36289:case 36303:case 36311:case 36292:return B_}}class G_{constructor(e,t,n){this.id=e;this.addr=n;this.cache=[];this.type=t.type;this.setValue=x_(t.type)}}class H_{constructor(e,t,n){this.id=e;this.addr=n;this.cache=[];this.type=t.type;this.size=t.size;this.setValue=z_(t.type)}}class V_{constructor(e){this.id=e;this.seq=[];this.map={}}setValue(e,t,n){const r=this.seq;for(let s=0,o=r.length;s!==o;++s){const a=r[s];a.setValue(e,t[a.id],n)}}}const Fa=/(\w+)(\])?(\[|\.)?/g;function cc(i,e){i.seq.push(e);i.map[e.id]=e}function k_(i,e,t){const n=i.name,r=n.length;Fa.lastIndex=0;while(true){const s=Fa.exec(n),o=Fa.lastIndex;let a=s[1];const l=s[2]==="]",c=s[3];if(l)a=a|0;if(c===void 0||c==="["&&o+2===r){cc(t,c===void 0?new G_(a,i,e):new H_(a,i,e));break}else{const u=t.map;let h=u[a];if(h===void 0){h=new V_(a);cc(t,h)}t=h}}}class Es{constructor(e,t){this.seq=[];this.map={};const n=e.getProgramParameter(t,e.ACTIVE_UNIFORMS);for(let r=0;r<n;++r){const s=e.getActiveUniform(t,r),o=e.getUniformLocation(t,s.name);k_(s,o,this)}}setValue(e,t,n,r){const s=this.map[t];if(s!==void 0)s.setValue(e,n,r)}setOptional(e,t,n){const r=t[n];if(r!==void 0)this.setValue(e,n,r)}static upload(e,t,n,r){for(let s=0,o=t.length;s!==o;++s){const a=t[s],l=n[a.id];if(l.needsUpdate!==false){a.setValue(e,l.value,r)}}}static seqWithValue(e,t){const n=[];for(let r=0,s=e.length;r!==s;++r){const o=e[r];if(o.id in t)n.push(o)}return n}}function uc(i,e,t){const n=i.createShader(e);i.shaderSource(n,t);i.compileShader(n);return n}const W_=37297;let X_=0;function q_(i,e){const t=i.split("\n");const n=[];const r=Math.max(e-6,0);const s=Math.min(e+6,t.length);for(let o=r;o<s;o++){const a=o+1;n.push(`${a===e?">":" "} ${a}: ${t[o]}`)}return n.join("\n")}function j_(i){const e=$e.getPrimaries($e.workingColorSpace);const t=$e.getPrimaries(i);let n;if(e===t){n=""}else if(e===Ps&&t===Ls){n="LinearDisplayP3ToLinearSRGB"}else if(e===Ls&&t===Ps){n="LinearSRGBToLinearDisplayP3"}switch(i){case Gn:case js:return[n,"LinearTransferOETF"];case Kt:case Co:return[n,"sRGBTransferOETF"];default:console.warn("THREE.WebGLProgram: Unsupported color space:",i);return[n,"LinearTransferOETF"]}}function hc(i,e,t){const n=i.getShaderParameter(e,i.COMPILE_STATUS);const r=i.getShaderInfoLog(e).trim();if(n&&r==="")return"";const s=/ERROR: 0:(\d+)/.exec(r);if(s){const o=parseInt(s[1]);return t.toUpperCase()+"\n\n"+r+"\n\n"+q_(i.getShaderSource(e),o)}else{return r}}function Y_(i,e){const t=j_(e);return`vec4 ${i}( vec4 value ) { return ${t[0]}( ${t[1]}( value ) ); }`}function $_(i,e){let t;switch(e){case su:t="Linear";break;case au:t="Reinhard";break;case ou:t="OptimizedCineon";break;case lu:t="ACESFilmic";break;case cu:t="AgX";break;case uu:t="Neutral";break;case cd:t="Custom";break;default:console.warn("THREE.WebGLProgram: Unsupported toneMapping:",e);t="Linear"}return"vec3 "+i+"( vec3 color ) { return "+t+"ToneMapping( color ); }"}function K_(i){const e=[i.extensionDerivatives||!!i.envMapCubeUVHeight||i.bumpMap||i.normalMapTangentSpace||i.clearcoatNormalMap||i.flatShading||i.alphaToCoverage||i.shaderID==="physical"?"#extension GL_OES_standard_derivatives : enable":"",(i.extensionFragDepth||i.logarithmicDepthBuffer)&&i.rendererExtensionFragDepth?"#extension GL_EXT_frag_depth : enable":"",i.extensionDrawBuffers&&i.rendererExtensionDrawBuffers?"#extension GL_EXT_draw_buffers : require":"",(i.extensionShaderTextureLOD||i.envMap||i.transmission)&&i.rendererExtensionShaderTextureLod?"#extension GL_EXT_shader_texture_lod : enable":""];return e.filter(Pi).join("\n")}function Z_(i){const e=[i.extensionClipCullDistance?"#extension GL_ANGLE_clip_cull_distance : require":"",i.extensionMultiDraw?"#extension GL_ANGLE_multi_draw : require":""];return e.filter(Pi).join("\n")}function J_(i){const e=[];for(const t in i){const n=i[t];if(n===false)continue;e.push("#define "+t+" "+n)}return e.join("\n")}function Q_(i,e){const t={};const n=i.getProgramParameter(e,i.ACTIVE_ATTRIBUTES);for(let r=0;r<n;r++){const s=i.getActiveAttrib(e,r);const o=s.name;let a=1;if(s.type===i.FLOAT_MAT2)a=2;if(s.type===i.FLOAT_MAT3)a=3;if(s.type===i.FLOAT_MAT4)a=4;t[o]={type:s.type,location:i.getAttribLocation(e,o),locationSize:a}}return t}function Pi(i){return i!==""}function dc(i,e){const t=e.numSpotLightShadows+e.numSpotLightMaps-e.numSpotLightShadowsWithMaps;return i.replace(/NUM_DIR_LIGHTS/g,e.numDirLights).replace(/NUM_SPOT_LIGHTS/g,e.numSpotLights).replace(/NUM_SPOT_LIGHT_MAPS/g,e.numSpotLightMaps).replace(/NUM_SPOT_LIGHT_COORDS/g,t).replace(/NUM_RECT_AREA_LIGHTS/g,e.numRectAreaLights).replace(/NUM_POINT_LIGHTS/g,e.numPointLights).replace(/NUM_HEMI_LIGHTS/g,e.numHemiLights).replace(/NUM_DIR_LIGHT_SHADOWS/g,e.numDirLightShadows).replace(/NUM_SPOT_LIGHT_SHADOWS_WITH_MAPS/g,e.numSpotLightShadowsWithMaps).replace(/NUM_SPOT_LIGHT_SHADOWS/g,e.numSpotLightShadows).replace(/NUM_POINT_LIGHT_SHADOWS/g,e.numPointLightShadows)}function fc(i,e){return i.replace(/NUM_CLIPPING_PLANES/g,e.numClippingPlanes).replace(/UNION_CLIPPING_PLANES/g,e.numClippingPlanes-e.numClipIntersection)}const eg=/^[ \t]*#include +<([\w\d./]+)>/gm;function co(i){return i.replace(eg,ng)}const tg=new Map([["encodings_fragment","colorspace_fragment"],["encodings_pars_fragment","colorspace_pars_fragment"],["output_fragment","opaque_fragment"]]);function ng(i,e){let t=Oe[e];if(t===void 0){const n=tg.get(e);if(n!==void 0){t=Oe[n];console.warn('THREE.WebGLRenderer: Shader chunk "%s" has been deprecated. Use "%s" instead.',e,n)}else{throw new Error("Can not resolve #include <"+e+">")}}return co(t)}const ig=/#pragma unroll_loop_start\s+for\s*\(\s*int\s+i\s*=\s*(\d+)\s*;\s*i\s*<\s*(\d+)\s*;\s*i\s*\+\+\s*\)\s*{([\s\S]+?)}\s+#pragma unroll_loop_end/g;function pc(i){return i.replace(ig,rg)}function rg(i,e,t,n){let r="";for(let s=parseInt(e);s<parseInt(t);s++){r+=n.replace(/\[\s*i\s*\]/g,"[ "+s+" ]").replace(/UNROLLED_LOOP_INDEX/g,s)}return r}function mc(i){let e=`precision ${i.precision} float;
	precision ${i.precision} int;
	precision ${i.precision} sampler2D;
	precision ${i.precision} samplerCube;
	`;if(i.isWebGL2){e+=`precision ${i.precision} sampler3D;
		precision ${i.precision} sampler2DArray;
		precision ${i.precision} sampler2DShadow;
		precision ${i.precision} samplerCubeShadow;
		precision ${i.precision} sampler2DArrayShadow;
		precision ${i.precision} isampler2D;
		precision ${i.precision} isampler3D;
		precision ${i.precision} isamplerCube;
		precision ${i.precision} isampler2DArray;
		precision ${i.precision} usampler2D;
		precision ${i.precision} usampler3D;
		precision ${i.precision} usamplerCube;
		precision ${i.precision} usampler2DArray;
		`}if(i.precision==="highp"){e+="\n#define HIGH_PRECISION"}else if(i.precision==="mediump"){e+="\n#define MEDIUM_PRECISION"}else if(i.precision==="lowp"){e+="\n#define LOW_PRECISION"}return e}function sg(i){let e="SHADOWMAP_TYPE_BASIC";if(i.shadowMapType===ru){e="SHADOWMAP_TYPE_PCF"}else if(i.shadowMapType===Oh){e="SHADOWMAP_TYPE_PCF_SOFT"}else if(i.shadowMapType===un){e="SHADOWMAP_TYPE_VSM"}return e}function ag(i){let e="ENVMAP_TYPE_CUBE";if(i.envMap){switch(i.envMapMode){case Zi:case Ji:e="ENVMAP_TYPE_CUBE";break;case qs:e="ENVMAP_TYPE_CUBE_UV";break}}return e}function og(i){let e="ENVMAP_MODE_REFLECTION";if(i.envMap){switch(i.envMapMode){case Ji:e="ENVMAP_MODE_REFRACTION";break}}return e}function lg(i){let e="ENVMAP_BLENDING_NONE";if(i.envMap){switch(i.combine){case Ao:e="ENVMAP_BLENDING_MULTIPLY";break;case od:e="ENVMAP_BLENDING_MIX";break;case ld:e="ENVMAP_BLENDING_ADD";break}}return e}function cg(i){const e=i.envMapCubeUVHeight;if(e===null)return null;const t=Math.log2(e)-2;const n=1/e;const r=1/(3*Math.max(Math.pow(2,t),7*16));return{texelWidth:r,texelHeight:n,maxMip:t}}function ug(i,e,t,n){const r=i.getContext();const s=t.defines;let o=t.vertexShader;let a=t.fragmentShader;const l=sg(t);const c=ag(t);const u=og(t);const h=lg(t);const p=cg(t);const m=t.isWebGL2?"":K_(t);const g=Z_(t);const S=J_(s);const f=r.createProgram();let d,A;let M=t.glslVersion?"#version "+t.glslVersion+"\n":"";if(t.isRawShaderMaterial){d=["#define SHADER_TYPE "+t.shaderType,"#define SHADER_NAME "+t.shaderName,S].filter(Pi).join("\n");if(d.length>0){d+="\n"}A=[m,"#define SHADER_TYPE "+t.shaderType,"#define SHADER_NAME "+t.shaderName,S].filter(Pi).join("\n");if(A.length>0){A+="\n"}}else{d=[mc(t),"#define SHADER_TYPE "+t.shaderType,"#define SHADER_NAME "+t.shaderName,S,t.extensionClipCullDistance?"#define USE_CLIP_DISTANCE":"",t.batching?"#define USE_BATCHING":"",t.instancing?"#define USE_INSTANCING":"",t.instancingColor?"#define USE_INSTANCING_COLOR":"",t.instancingMorph?"#define USE_INSTANCING_MORPH":"",t.useFog&&t.fog?"#define USE_FOG":"",t.useFog&&t.fogExp2?"#define FOG_EXP2":"",t.map?"#define USE_MAP":"",t.envMap?"#define USE_ENVMAP":"",t.envMap?"#define "+u:"",t.lightMap?"#define USE_LIGHTMAP":"",t.aoMap?"#define USE_AOMAP":"",t.bumpMap?"#define USE_BUMPMAP":"",t.normalMap?"#define USE_NORMALMAP":"",t.normalMapObjectSpace?"#define USE_NORMALMAP_OBJECTSPACE":"",t.normalMapTangentSpace?"#define USE_NORMALMAP_TANGENTSPACE":"",t.displacementMap?"#define USE_DISPLACEMENTMAP":"",t.emissiveMap?"#define USE_EMISSIVEMAP":"",t.anisotropy?"#define USE_ANISOTROPY":"",t.anisotropyMap?"#define USE_ANISOTROPYMAP":"",t.clearcoatMap?"#define USE_CLEARCOATMAP":"",t.clearcoatRoughnessMap?"#define USE_CLEARCOAT_ROUGHNESSMAP":"",t.clearcoatNormalMap?"#define USE_CLEARCOAT_NORMALMAP":"",t.iridescenceMap?"#define USE_IRIDESCENCEMAP":"",t.iridescenceThicknessMap?"#define USE_IRIDESCENCE_THICKNESSMAP":"",t.specularMap?"#define USE_SPECULARMAP":"",t.specularColorMap?"#define USE_SPECULAR_COLORMAP":"",t.specularIntensityMap?"#define USE_SPECULAR_INTENSITYMAP":"",t.roughnessMap?"#define USE_ROUGHNESSMAP":"",t.metalnessMap?"#define USE_METALNESSMAP":"",t.alphaMap?"#define USE_ALPHAMAP":"",t.alphaHash?"#define USE_ALPHAHASH":"",t.transmission?"#define USE_TRANSMISSION":"",t.transmissionMap?"#define USE_TRANSMISSIONMAP":"",t.thicknessMap?"#define USE_THICKNESSMAP":"",t.sheenColorMap?"#define USE_SHEEN_COLORMAP":"",t.sheenRoughnessMap?"#define USE_SHEEN_ROUGHNESSMAP":"",t.mapUv?"#define MAP_UV "+t.mapUv:"",t.alphaMapUv?"#define ALPHAMAP_UV "+t.alphaMapUv:"",t.lightMapUv?"#define LIGHTMAP_UV "+t.lightMapUv:"",t.aoMapUv?"#define AOMAP_UV "+t.aoMapUv:"",t.emissiveMapUv?"#define EMISSIVEMAP_UV "+t.emissiveMapUv:"",t.bumpMapUv?"#define BUMPMAP_UV "+t.bumpMapUv:"",t.normalMapUv?"#define NORMALMAP_UV "+t.normalMapUv:"",t.displacementMapUv?"#define DISPLACEMENTMAP_UV "+t.displacementMapUv:"",t.metalnessMapUv?"#define METALNESSMAP_UV "+t.metalnessMapUv:"",t.roughnessMapUv?"#define ROUGHNESSMAP_UV "+t.roughnessMapUv:"",t.anisotropyMapUv?"#define ANISOTROPYMAP_UV "+t.anisotropyMapUv:"",t.clearcoatMapUv?"#define CLEARCOATMAP_UV "+t.clearcoatMapUv:"",t.clearcoatNormalMapUv?"#define CLEARCOAT_NORMALMAP_UV "+t.clearcoatNormalMapUv:"",t.clearcoatRoughnessMapUv?"#define CLEARCOAT_ROUGHNESSMAP_UV "+t.clearcoatRoughnessMapUv:"",t.iridescenceMapUv?"#define IRIDESCENCEMAP_UV "+t.iridescenceMapUv:"",t.iridescenceThicknessMapUv?"#define IRIDESCENCE_THICKNESSMAP_UV "+t.iridescenceThicknessMapUv:"",t.sheenColorMapUv?"#define SHEEN_COLORMAP_UV "+t.sheenColorMapUv:"",t.sheenRoughnessMapUv?"#define SHEEN_ROUGHNESSMAP_UV "+t.sheenRoughnessMapUv:"",t.specularMapUv?"#define SPECULARMAP_UV "+t.specularMapUv:"",t.specularColorMapUv?"#define SPECULAR_COLORMAP_UV "+t.specularColorMapUv:"",t.specularIntensityMapUv?"#define SPECULAR_INTENSITYMAP_UV "+t.specularIntensityMapUv:"",t.transmissionMapUv?"#define TRANSMISSIONMAP_UV "+t.transmissionMapUv:"",t.thicknessMapUv?"#define THICKNESSMAP_UV "+t.thicknessMapUv:"",t.vertexTangents&&t.flatShading===false?"#define USE_TANGENT":"",t.vertexColors?"#define USE_COLOR":"",t.vertexAlphas?"#define USE_COLOR_ALPHA":"",t.vertexUv1s?"#define USE_UV1":"",t.vertexUv2s?"#define USE_UV2":"",t.vertexUv3s?"#define USE_UV3":"",t.pointsUvs?"#define USE_POINTS_UV":"",t.flatShading?"#define FLAT_SHADED":"",t.skinning?"#define USE_SKINNING":"",t.morphTargets?"#define USE_MORPHTARGETS":"",t.morphNormals&&t.flatShading===false?"#define USE_MORPHNORMALS":"",t.morphColors&&t.isWebGL2?"#define USE_MORPHCOLORS":"",t.morphTargetsCount>0&&t.isWebGL2?"#define MORPHTARGETS_TEXTURE":"",t.morphTargetsCount>0&&t.isWebGL2?"#define MORPHTARGETS_TEXTURE_STRIDE "+t.morphTextureStride:"",t.morphTargetsCount>0&&t.isWebGL2?"#define MORPHTARGETS_COUNT "+t.morphTargetsCount:"",t.doubleSided?"#define DOUBLE_SIDED":"",t.flipSided?"#define FLIP_SIDED":"",t.shadowMapEnabled?"#define USE_SHADOWMAP":"",t.shadowMapEnabled?"#define "+l:"",t.sizeAttenuation?"#define USE_SIZEATTENUATION":"",t.numLightProbes>0?"#define USE_LIGHT_PROBES":"",t.useLegacyLights?"#define LEGACY_LIGHTS":"",t.logarithmicDepthBuffer?"#define USE_LOGDEPTHBUF":"",t.logarithmicDepthBuffer&&t.rendererExtensionFragDepth?"#define USE_LOGDEPTHBUF_EXT":"","uniform mat4 modelMatrix;","uniform mat4 modelViewMatrix;","uniform mat4 projectionMatrix;","uniform mat4 viewMatrix;","uniform mat3 normalMatrix;","uniform vec3 cameraPosition;","uniform bool isOrthographic;","#ifdef USE_INSTANCING","	attribute mat4 instanceMatrix;","#endif","#ifdef USE_INSTANCING_COLOR","	attribute vec3 instanceColor;","#endif","#ifdef USE_INSTANCING_MORPH","	uniform sampler2D morphTexture;","#endif","attribute vec3 position;","attribute vec3 normal;","attribute vec2 uv;","#ifdef USE_UV1","	attribute vec2 uv1;","#endif","#ifdef USE_UV2","	attribute vec2 uv2;","#endif","#ifdef USE_UV3","	attribute vec2 uv3;","#endif","#ifdef USE_TANGENT","	attribute vec4 tangent;","#endif","#if defined( USE_COLOR_ALPHA )","	attribute vec4 color;","#elif defined( USE_COLOR )","	attribute vec3 color;","#endif","#if ( defined( USE_MORPHTARGETS ) && ! defined( MORPHTARGETS_TEXTURE ) )","	attribute vec3 morphTarget0;","	attribute vec3 morphTarget1;","	attribute vec3 morphTarget2;","	attribute vec3 morphTarget3;","	#ifdef USE_MORPHNORMALS","		attribute vec3 morphNormal0;","		attribute vec3 morphNormal1;","		attribute vec3 morphNormal2;","		attribute vec3 morphNormal3;","	#else","		attribute vec3 morphTarget4;","		attribute vec3 morphTarget5;","		attribute vec3 morphTarget6;","		attribute vec3 morphTarget7;","	#endif","#endif","#ifdef USE_SKINNING","	attribute vec4 skinIndex;","	attribute vec4 skinWeight;","#endif","\n"].filter(Pi).join("\n");A=[m,mc(t),"#define SHADER_TYPE "+t.shaderType,"#define SHADER_NAME "+t.shaderName,S,t.useFog&&t.fog?"#define USE_FOG":"",t.useFog&&t.fogExp2?"#define FOG_EXP2":"",t.alphaToCoverage?"#define ALPHA_TO_COVERAGE":"",t.map?"#define USE_MAP":"",t.matcap?"#define USE_MATCAP":"",t.envMap?"#define USE_ENVMAP":"",t.envMap?"#define "+c:"",t.envMap?"#define "+u:"",t.envMap?"#define "+h:"",p?"#define CUBEUV_TEXEL_WIDTH "+p.texelWidth:"",p?"#define CUBEUV_TEXEL_HEIGHT "+p.texelHeight:"",p?"#define CUBEUV_MAX_MIP "+p.maxMip+".0":"",t.lightMap?"#define USE_LIGHTMAP":"",t.aoMap?"#define USE_AOMAP":"",t.bumpMap?"#define USE_BUMPMAP":"",t.normalMap?"#define USE_NORMALMAP":"",t.normalMapObjectSpace?"#define USE_NORMALMAP_OBJECTSPACE":"",t.normalMapTangentSpace?"#define USE_NORMALMAP_TANGENTSPACE":"",t.emissiveMap?"#define USE_EMISSIVEMAP":"",t.anisotropy?"#define USE_ANISOTROPY":"",t.anisotropyMap?"#define USE_ANISOTROPYMAP":"",t.clearcoat?"#define USE_CLEARCOAT":"",t.clearcoatMap?"#define USE_CLEARCOATMAP":"",t.clearcoatRoughnessMap?"#define USE_CLEARCOAT_ROUGHNESSMAP":"",t.clearcoatNormalMap?"#define USE_CLEARCOAT_NORMALMAP":"",t.iridescence?"#define USE_IRIDESCENCE":"",t.iridescenceMap?"#define USE_IRIDESCENCEMAP":"",t.iridescenceThicknessMap?"#define USE_IRIDESCENCE_THICKNESSMAP":"",t.specularMap?"#define USE_SPECULARMAP":"",t.specularColorMap?"#define USE_SPECULAR_COLORMAP":"",t.specularIntensityMap?"#define USE_SPECULAR_INTENSITYMAP":"",t.roughnessMap?"#define USE_ROUGHNESSMAP":"",t.metalnessMap?"#define USE_METALNESSMAP":"",t.alphaMap?"#define USE_ALPHAMAP":"",t.alphaTest?"#define USE_ALPHATEST":"",t.alphaHash?"#define USE_ALPHAHASH":"",t.sheen?"#define USE_SHEEN":"",t.sheenColorMap?"#define USE_SHEEN_COLORMAP":"",t.sheenRoughnessMap?"#define USE_SHEEN_ROUGHNESSMAP":"",t.transmission?"#define USE_TRANSMISSION":"",t.transmissionMap?"#define USE_TRANSMISSIONMAP":"",t.thicknessMap?"#define USE_THICKNESSMAP":"",t.vertexTangents&&t.flatShading===false?"#define USE_TANGENT":"",t.vertexColors||t.instancingColor?"#define USE_COLOR":"",t.vertexAlphas?"#define USE_COLOR_ALPHA":"",t.vertexUv1s?"#define USE_UV1":"",t.vertexUv2s?"#define USE_UV2":"",t.vertexUv3s?"#define USE_UV3":"",t.pointsUvs?"#define USE_POINTS_UV":"",t.gradientMap?"#define USE_GRADIENTMAP":"",t.flatShading?"#define FLAT_SHADED":"",t.doubleSided?"#define DOUBLE_SIDED":"",t.flipSided?"#define FLIP_SIDED":"",t.shadowMapEnabled?"#define USE_SHADOWMAP":"",t.shadowMapEnabled?"#define "+l:"",t.premultipliedAlpha?"#define PREMULTIPLIED_ALPHA":"",t.numLightProbes>0?"#define USE_LIGHT_PROBES":"",t.useLegacyLights?"#define LEGACY_LIGHTS":"",t.decodeVideoTexture?"#define DECODE_VIDEO_TEXTURE":"",t.logarithmicDepthBuffer?"#define USE_LOGDEPTHBUF":"",t.logarithmicDepthBuffer&&t.rendererExtensionFragDepth?"#define USE_LOGDEPTHBUF_EXT":"","uniform mat4 viewMatrix;","uniform vec3 cameraPosition;","uniform bool isOrthographic;",t.toneMapping!==Un?"#define TONE_MAPPING":"",t.toneMapping!==Un?Oe["tonemapping_pars_fragment"]:"",t.toneMapping!==Un?$_("toneMapping",t.toneMapping):"",t.dithering?"#define DITHERING":"",t.opaque?"#define OPAQUE":"",Oe["colorspace_pars_fragment"],Y_("linearToOutputTexel",t.outputColorSpace),t.useDepthPacking?"#define DEPTH_PACKING "+t.depthPacking:"","\n"].filter(Pi).join("\n")}o=co(o);o=dc(o,t);o=fc(o,t);a=co(a);a=dc(a,t);a=fc(a,t);o=pc(o);a=pc(a);if(t.isWebGL2&&t.isRawShaderMaterial!==true){M="#version 300 es\n";d=[g,"precision mediump sampler2DArray;","#define attribute in","#define varying out","#define texture2D texture"].join("\n")+"\n"+d;A=["precision mediump sampler2DArray;","#define varying in",t.glslVersion===Pl?"":"layout(location = 0) out highp vec4 pc_fragColor;",t.glslVersion===Pl?"":"#define gl_FragColor pc_fragColor","#define gl_FragDepthEXT gl_FragDepth","#define texture2D texture","#define textureCube texture","#define texture2DProj textureProj","#define texture2DLodEXT textureLod","#define texture2DProjLodEXT textureProjLod","#define textureCubeLodEXT textureLod","#define texture2DGradEXT textureGrad","#define texture2DProjGradEXT textureProjGrad","#define textureCubeGradEXT textureGrad"].join("\n")+"\n"+A}const T=M+d+o;const D=M+A+a;const C=uc(r,r.VERTEX_SHADER,T);const b=uc(r,r.FRAGMENT_SHADER,D);r.attachShader(f,C);r.attachShader(f,b);if(t.index0AttributeName!==void 0){r.bindAttribLocation(f,0,t.index0AttributeName)}else if(t.morphTargets===true){r.bindAttribLocation(f,0,"position")}r.linkProgram(f);function z(te){if(i.debug.checkShaderErrors){const J=r.getProgramInfoLog(f).trim();const R=r.getShaderInfoLog(C).trim();const k=r.getShaderInfoLog(b).trim();let H=true;let j=true;if(r.getProgramParameter(f,r.LINK_STATUS)===false){H=false;if(typeof i.debug.onShaderError==="function"){i.debug.onShaderError(r,f,C,b)}else{const V=hc(r,C,"vertex");const X=hc(r,b,"fragment");console.error("THREE.WebGLProgram: Shader Error "+r.getError()+" - VALIDATE_STATUS "+r.getProgramParameter(f,r.VALIDATE_STATUS)+"\n\nMaterial Name: "+te.name+"\nMaterial Type: "+te.type+"\n\nProgram Info Log: "+J+"\n"+V+"\n"+X)}}else if(J!==""){console.warn("THREE.WebGLProgram: Program Info Log:",J)}else if(R===""||k===""){j=false}if(j){te.diagnostics={runnable:H,programLog:J,vertexShader:{log:R,prefix:d},fragmentShader:{log:k,prefix:A}}}}r.deleteShader(C);r.deleteShader(b);ee=new Es(r,f);v=Q_(r,f)}let ee;this.getUniforms=function(){if(ee===void 0){z(this)}return ee};let v;this.getAttributes=function(){if(v===void 0){z(this)}return v};let y=t.rendererExtensionParallelShaderCompile===false;this.isReady=function(){if(y===false){y=r.getProgramParameter(f,W_)}return y};this.destroy=function(){n.releaseStatesOfProgram(this);r.deleteProgram(f);this.program=void 0};this.type=t.shaderType;this.name=t.shaderName;this.id=X_++;this.cacheKey=e;this.usedTimes=1;this.program=f;this.vertexShader=C;this.fragmentShader=b;return this}let hg=0;class dg{constructor(){this.shaderCache=new Map;this.materialCache=new Map}update(e){const t=e.vertexShader;const n=e.fragmentShader;const r=this._getShaderStage(t);const s=this._getShaderStage(n);const o=this._getShaderCacheForMaterial(e);if(o.has(r)===false){o.add(r);r.usedTimes++}if(o.has(s)===false){o.add(s);s.usedTimes++}return this}remove(e){const t=this.materialCache.get(e);for(const n of t){n.usedTimes--;if(n.usedTimes===0)this.shaderCache.delete(n.code)}this.materialCache.delete(e);return this}getVertexShaderID(e){return this._getShaderStage(e.vertexShader).id}getFragmentShaderID(e){return this._getShaderStage(e.fragmentShader).id}dispose(){this.shaderCache.clear();this.materialCache.clear()}_getShaderCacheForMaterial(e){const t=this.materialCache;let n=t.get(e);if(n===void 0){n=new Set;t.set(e,n)}return n}_getShaderStage(e){const t=this.shaderCache;let n=t.get(e);if(n===void 0){n=new fg(e);t.set(e,n)}return n}}class fg{constructor(e){this.id=hg++;this.code=e;this.usedTimes=0}}function pg(i,e,t,n,r,s,o){const a=new bu;const l=new dg;const c=new Set;const u=[];const h=r.isWebGL2;const p=r.logarithmicDepthBuffer;const m=r.vertexTextures;let g=r.precision;const S={MeshDepthMaterial:"depth",MeshDistanceMaterial:"distanceRGBA",MeshNormalMaterial:"normal",MeshBasicMaterial:"basic",MeshLambertMaterial:"lambert",MeshPhongMaterial:"phong",MeshToonMaterial:"toon",MeshStandardMaterial:"physical",MeshPhysicalMaterial:"physical",MeshMatcapMaterial:"matcap",LineBasicMaterial:"basic",LineDashedMaterial:"dashed",PointsMaterial:"points",ShadowMaterial:"shadow",SpriteMaterial:"sprite"};function f(v){c.add(v);if(v===0)return"uv";return`uv${v}`}function d(v,y,te,J,R){const k=J.fog;const H=R.geometry;const j=v.isMeshStandardMaterial?J.environment:null;const V=(v.isMeshStandardMaterial?t:e).get(v.envMap||j);const X=!!V&&V.mapping===qs?V.image.height:null;const Y=S[v.type];if(v.precision!==null){g=r.getMaxPrecision(v.precision);if(g!==v.precision){console.warn("THREE.WebGLProgram.getParameters:",v.precision,"not supported, using",g,"instead.")}}const se=H.morphAttributes.position||H.morphAttributes.normal||H.morphAttributes.color;const de=se!==void 0?se.length:0;let Re=0;if(H.morphAttributes.position!==void 0)Re=1;if(H.morphAttributes.normal!==void 0)Re=2;if(H.morphAttributes.color!==void 0)Re=3;let B,K;let he,Ae;if(Y){const Ke=Zt[Y];B=Ke.vertexShader;K=Ke.fragmentShader}else{B=v.vertexShader;K=v.fragmentShader;l.update(v);he=l.getVertexShaderID(v);Ae=l.getFragmentShaderID(v)}const ge=i.getRenderTarget();const fe=R.isInstancedMesh===true;const Ye=R.isBatchedMesh===true;const be=!!v.map;const U=!!v.matcap;const ft=!!V;const Se=!!v.aoMap;const He=!!v.lightMap;const Ee=!!v.bumpMap;const qe=!!v.normalMap;const ze=!!v.displacementMap;const ke=!!v.emissiveMap;const rt=!!v.metalnessMap;const E=!!v.roughnessMap;const _=v.anisotropy>0;const G=v.clearcoat>0;const W=v.iridescence>0;const Z=v.sheen>0;const $=v.transmission>0;const Ie=_&&!!v.anisotropyMap;const ye=G&&!!v.clearcoatMap;const ae=G&&!!v.clearcoatNormalMap;const oe=G&&!!v.clearcoatRoughnessMap;const De=W&&!!v.iridescenceMap;const Q=W&&!!v.iridescenceThicknessMap;const at=Z&&!!v.sheenColorMap;const We=Z&&!!v.sheenRoughnessMap;const ve=!!v.specularMap;const pe=!!v.specularColorMap;const me=!!v.specularIntensityMap;const je=$&&!!v.transmissionMap;const Ue=$&&!!v.thicknessMap;const Qe=!!v.gradientMap;const w=!!v.alphaMap;const le=v.alphaTest>0;const I=!!v.alphaHash;const ne=!!v.extensions;let ce=Un;if(v.toneMapped){if(ge===null||ge.isXRRenderTarget===true){ce=i.toneMapping}}const Xe={isWebGL2:h,shaderID:Y,shaderType:v.type,shaderName:v.name,vertexShader:B,fragmentShader:K,defines:v.defines,customVertexShaderID:he,customFragmentShaderID:Ae,isRawShaderMaterial:v.isRawShaderMaterial===true,glslVersion:v.glslVersion,precision:g,batching:Ye,instancing:fe,instancingColor:fe&&R.instanceColor!==null,instancingMorph:fe&&R.morphTexture!==null,supportsVertexTextures:m,outputColorSpace:ge===null?i.outputColorSpace:ge.isXRRenderTarget===true?ge.texture.colorSpace:Gn,alphaToCoverage:!!v.alphaToCoverage,map:be,matcap:U,envMap:ft,envMapMode:ft&&V.mapping,envMapCubeUVHeight:X,aoMap:Se,lightMap:He,bumpMap:Ee,normalMap:qe,displacementMap:m&&ze,emissiveMap:ke,normalMapObjectSpace:qe&&v.normalMapType===Sd,normalMapTangentSpace:qe&&v.normalMapType===xu,metalnessMap:rt,roughnessMap:E,anisotropy:_,anisotropyMap:Ie,clearcoat:G,clearcoatMap:ye,clearcoatNormalMap:ae,clearcoatRoughnessMap:oe,iridescence:W,iridescenceMap:De,iridescenceThicknessMap:Q,sheen:Z,sheenColorMap:at,sheenRoughnessMap:We,specularMap:ve,specularColorMap:pe,specularIntensityMap:me,transmission:$,transmissionMap:je,thicknessMap:Ue,gradientMap:Qe,opaque:v.transparent===false&&v.blending===Ni&&v.alphaToCoverage===false,alphaMap:w,alphaTest:le,alphaHash:I,combine:v.combine,mapUv:be&&f(v.map.channel),aoMapUv:Se&&f(v.aoMap.channel),lightMapUv:He&&f(v.lightMap.channel),bumpMapUv:Ee&&f(v.bumpMap.channel),normalMapUv:qe&&f(v.normalMap.channel),displacementMapUv:ze&&f(v.displacementMap.channel),emissiveMapUv:ke&&f(v.emissiveMap.channel),metalnessMapUv:rt&&f(v.metalnessMap.channel),roughnessMapUv:E&&f(v.roughnessMap.channel),anisotropyMapUv:Ie&&f(v.anisotropyMap.channel),clearcoatMapUv:ye&&f(v.clearcoatMap.channel),clearcoatNormalMapUv:ae&&f(v.clearcoatNormalMap.channel),clearcoatRoughnessMapUv:oe&&f(v.clearcoatRoughnessMap.channel),iridescenceMapUv:De&&f(v.iridescenceMap.channel),iridescenceThicknessMapUv:Q&&f(v.iridescenceThicknessMap.channel),sheenColorMapUv:at&&f(v.sheenColorMap.channel),sheenRoughnessMapUv:We&&f(v.sheenRoughnessMap.channel),specularMapUv:ve&&f(v.specularMap.channel),specularColorMapUv:pe&&f(v.specularColorMap.channel),specularIntensityMapUv:me&&f(v.specularIntensityMap.channel),transmissionMapUv:je&&f(v.transmissionMap.channel),thicknessMapUv:Ue&&f(v.thicknessMap.channel),alphaMapUv:w&&f(v.alphaMap.channel),vertexTangents:!!H.attributes.tangent&&(qe||_),vertexColors:v.vertexColors,vertexAlphas:v.vertexColors===true&&!!H.attributes.color&&H.attributes.color.itemSize===4,pointsUvs:R.isPoints===true&&!!H.attributes.uv&&(be||w),fog:!!k,useFog:v.fog===true,fogExp2:!!k&&k.isFogExp2,flatShading:v.flatShading===true,sizeAttenuation:v.sizeAttenuation===true,logarithmicDepthBuffer:p,skinning:R.isSkinnedMesh===true,morphTargets:H.morphAttributes.position!==void 0,morphNormals:H.morphAttributes.normal!==void 0,morphColors:H.morphAttributes.color!==void 0,morphTargetsCount:de,morphTextureStride:Re,numDirLights:y.directional.length,numPointLights:y.point.length,numSpotLights:y.spot.length,numSpotLightMaps:y.spotLightMap.length,numRectAreaLights:y.rectArea.length,numHemiLights:y.hemi.length,numDirLightShadows:y.directionalShadowMap.length,numPointLightShadows:y.pointShadowMap.length,numSpotLightShadows:y.spotShadowMap.length,numSpotLightShadowsWithMaps:y.numSpotLightShadowsWithMaps,numLightProbes:y.numLightProbes,numClippingPlanes:o.numPlanes,numClipIntersection:o.numIntersection,dithering:v.dithering,shadowMapEnabled:i.shadowMap.enabled&&te.length>0,shadowMapType:i.shadowMap.type,toneMapping:ce,useLegacyLights:i._useLegacyLights,decodeVideoTexture:be&&v.map.isVideoTexture===true&&$e.getTransfer(v.map.colorSpace)===Je,premultipliedAlpha:v.premultipliedAlpha,doubleSided:v.side===Jt,flipSided:v.side===wt,useDepthPacking:v.depthPacking>=0,depthPacking:v.depthPacking||0,index0AttributeName:v.index0AttributeName,extensionDerivatives:ne&&v.extensions.derivatives===true,extensionFragDepth:ne&&v.extensions.fragDepth===true,extensionDrawBuffers:ne&&v.extensions.drawBuffers===true,extensionShaderTextureLOD:ne&&v.extensions.shaderTextureLOD===true,extensionClipCullDistance:ne&&v.extensions.clipCullDistance===true&&n.has("WEBGL_clip_cull_distance"),extensionMultiDraw:ne&&v.extensions.multiDraw===true&&n.has("WEBGL_multi_draw"),rendererExtensionFragDepth:h||n.has("EXT_frag_depth"),rendererExtensionDrawBuffers:h||n.has("WEBGL_draw_buffers"),rendererExtensionShaderTextureLod:h||n.has("EXT_shader_texture_lod"),rendererExtensionParallelShaderCompile:n.has("KHR_parallel_shader_compile"),customProgramCacheKey:v.customProgramCacheKey()};Xe.vertexUv1s=c.has(1);Xe.vertexUv2s=c.has(2);Xe.vertexUv3s=c.has(3);c.clear();return Xe}function A(v){const y=[];if(v.shaderID){y.push(v.shaderID)}else{y.push(v.customVertexShaderID);y.push(v.customFragmentShaderID)}if(v.defines!==void 0){for(const te in v.defines){y.push(te);y.push(v.defines[te])}}if(v.isRawShaderMaterial===false){M(y,v);T(y,v);y.push(i.outputColorSpace)}y.push(v.customProgramCacheKey);return y.join()}function M(v,y){v.push(y.precision);v.push(y.outputColorSpace);v.push(y.envMapMode);v.push(y.envMapCubeUVHeight);v.push(y.mapUv);v.push(y.alphaMapUv);v.push(y.lightMapUv);v.push(y.aoMapUv);v.push(y.bumpMapUv);v.push(y.normalMapUv);v.push(y.displacementMapUv);v.push(y.emissiveMapUv);v.push(y.metalnessMapUv);v.push(y.roughnessMapUv);v.push(y.anisotropyMapUv);v.push(y.clearcoatMapUv);v.push(y.clearcoatNormalMapUv);v.push(y.clearcoatRoughnessMapUv);v.push(y.iridescenceMapUv);v.push(y.iridescenceThicknessMapUv);v.push(y.sheenColorMapUv);v.push(y.sheenRoughnessMapUv);v.push(y.specularMapUv);v.push(y.specularColorMapUv);v.push(y.specularIntensityMapUv);v.push(y.transmissionMapUv);v.push(y.thicknessMapUv);v.push(y.combine);v.push(y.fogExp2);v.push(y.sizeAttenuation);v.push(y.morphTargetsCount);v.push(y.morphAttributeCount);v.push(y.numDirLights);v.push(y.numPointLights);v.push(y.numSpotLights);v.push(y.numSpotLightMaps);v.push(y.numHemiLights);v.push(y.numRectAreaLights);v.push(y.numDirLightShadows);v.push(y.numPointLightShadows);v.push(y.numSpotLightShadows);v.push(y.numSpotLightShadowsWithMaps);v.push(y.numLightProbes);v.push(y.shadowMapType);v.push(y.toneMapping);v.push(y.numClippingPlanes);v.push(y.numClipIntersection);v.push(y.depthPacking)}function T(v,y){a.disableAll();if(y.isWebGL2)a.enable(0);if(y.supportsVertexTextures)a.enable(1);if(y.instancing)a.enable(2);if(y.instancingColor)a.enable(3);if(y.instancingMorph)a.enable(4);if(y.matcap)a.enable(5);if(y.envMap)a.enable(6);if(y.normalMapObjectSpace)a.enable(7);if(y.normalMapTangentSpace)a.enable(8);if(y.clearcoat)a.enable(9);if(y.iridescence)a.enable(10);if(y.alphaTest)a.enable(11);if(y.vertexColors)a.enable(12);if(y.vertexAlphas)a.enable(13);if(y.vertexUv1s)a.enable(14);if(y.vertexUv2s)a.enable(15);if(y.vertexUv3s)a.enable(16);if(y.vertexTangents)a.enable(17);if(y.anisotropy)a.enable(18);if(y.alphaHash)a.enable(19);if(y.batching)a.enable(20);v.push(a.mask);a.disableAll();if(y.fog)a.enable(0);if(y.useFog)a.enable(1);if(y.flatShading)a.enable(2);if(y.logarithmicDepthBuffer)a.enable(3);if(y.skinning)a.enable(4);if(y.morphTargets)a.enable(5);if(y.morphNormals)a.enable(6);if(y.morphColors)a.enable(7);if(y.premultipliedAlpha)a.enable(8);if(y.shadowMapEnabled)a.enable(9);if(y.useLegacyLights)a.enable(10);if(y.doubleSided)a.enable(11);if(y.flipSided)a.enable(12);if(y.useDepthPacking)a.enable(13);if(y.dithering)a.enable(14);if(y.transmission)a.enable(15);if(y.sheen)a.enable(16);if(y.opaque)a.enable(17);if(y.pointsUvs)a.enable(18);if(y.decodeVideoTexture)a.enable(19);if(y.alphaToCoverage)a.enable(20);v.push(a.mask)}function D(v){const y=S[v.type];let te;if(y){const J=Zt[y];te=vr.clone(J.uniforms)}else{te=v.uniforms}return te}function C(v,y){let te;for(let J=0,R=u.length;J<R;J++){const k=u[J];if(k.cacheKey===y){te=k;++te.usedTimes;break}}if(te===void 0){te=new ug(i,y,v,s);u.push(te)}return te}function b(v){if(--v.usedTimes===0){const y=u.indexOf(v);u[y]=u[u.length-1];u.pop();v.destroy()}}function z(v){l.remove(v)}function ee(){l.dispose()}return{getParameters:d,getProgramCacheKey:A,getUniforms:D,acquireProgram:C,releaseProgram:b,releaseShaderCache:z,programs:u,dispose:ee}}function mg(){let i=new WeakMap;function e(s){let o=i.get(s);if(o===void 0){o={};i.set(s,o)}return o}function t(s){i.delete(s)}function n(s,o,a){i.get(s)[o]=a}function r(){i=new WeakMap}return{get:e,remove:t,update:n,dispose:r}}function _g(i,e){if(i.groupOrder!==e.groupOrder){return i.groupOrder-e.groupOrder}else if(i.renderOrder!==e.renderOrder){return i.renderOrder-e.renderOrder}else if(i.material.id!==e.material.id){return i.material.id-e.material.id}else if(i.z!==e.z){return i.z-e.z}else{return i.id-e.id}}function _c(i,e){if(i.groupOrder!==e.groupOrder){return i.groupOrder-e.groupOrder}else if(i.renderOrder!==e.renderOrder){return i.renderOrder-e.renderOrder}else if(i.z!==e.z){return e.z-i.z}else{return i.id-e.id}}function gc(){const i=[];let e=0;const t=[];const n=[];const r=[];function s(){e=0;t.length=0;n.length=0;r.length=0}function o(h,p,m,g,S,f){let d=i[e];if(d===void 0){d={id:h.id,object:h,geometry:p,material:m,groupOrder:g,renderOrder:h.renderOrder,z:S,group:f};i[e]=d}else{d.id=h.id;d.object=h;d.geometry=p;d.material=m;d.groupOrder=g;d.renderOrder=h.renderOrder;d.z=S;d.group=f}e++;return d}function a(h,p,m,g,S,f){const d=o(h,p,m,g,S,f);if(m.transmission>0){n.push(d)}else if(m.transparent===true){r.push(d)}else{t.push(d)}}function l(h,p,m,g,S,f){const d=o(h,p,m,g,S,f);if(m.transmission>0){n.unshift(d)}else if(m.transparent===true){r.unshift(d)}else{t.unshift(d)}}function c(h,p){if(t.length>1)t.sort(h||_g);if(n.length>1)n.sort(p||_c);if(r.length>1)r.sort(p||_c)}function u(){for(let h=e,p=i.length;h<p;h++){const m=i[h];if(m.id===null)break;m.id=null;m.object=null;m.geometry=null;m.material=null;m.group=null}}return{opaque:t,transmissive:n,transparent:r,init:s,push:a,unshift:l,finish:u,sort:c}}function gg(){let i=new WeakMap;function e(n,r){const s=i.get(n);let o;if(s===void 0){o=new gc;i.set(n,[o])}else{if(r>=s.length){o=new gc;s.push(o)}else{o=s[r]}}return o}function t(){i=new WeakMap}return{get:e,dispose:t}}function vg(){const i={};return{get:function(e){if(i[e.id]!==void 0){return i[e.id]}let t;switch(e.type){case"DirectionalLight":t={direction:new L,color:new Ve};break;case"SpotLight":t={position:new L,direction:new L,color:new Ve,distance:0,coneCos:0,penumbraCos:0,decay:0};break;case"PointLight":t={position:new L,color:new Ve,distance:0,decay:0};break;case"HemisphereLight":t={direction:new L,skyColor:new Ve,groundColor:new Ve};break;case"RectAreaLight":t={color:new Ve,position:new L,halfWidth:new L,halfHeight:new L};break}i[e.id]=t;return t}}}function xg(){const i={};return{get:function(e){if(i[e.id]!==void 0){return i[e.id]}let t;switch(e.type){case"DirectionalLight":t={shadowBias:0,shadowNormalBias:0,shadowRadius:1,shadowMapSize:new Pe};break;case"SpotLight":t={shadowBias:0,shadowNormalBias:0,shadowRadius:1,shadowMapSize:new Pe};break;case"PointLight":t={shadowBias:0,shadowNormalBias:0,shadowRadius:1,shadowMapSize:new Pe,shadowCameraNear:1,shadowCameraFar:1e3};break}i[e.id]=t;return t}}}let Sg=0;function Mg(i,e){return(e.castShadow?2:0)-(i.castShadow?2:0)+(e.map?1:0)-(i.map?1:0)}function Eg(i,e){const t=new vg;const n=xg();const r={version:0,hash:{directionalLength:-1,pointLength:-1,spotLength:-1,rectAreaLength:-1,hemiLength:-1,numDirectionalShadows:-1,numPointShadows:-1,numSpotShadows:-1,numSpotMaps:-1,numLightProbes:-1},ambient:[0,0,0],probe:[],directional:[],directionalShadow:[],directionalShadowMap:[],directionalShadowMatrix:[],spot:[],spotLightMap:[],spotShadow:[],spotShadowMap:[],spotLightMatrix:[],rectArea:[],rectAreaLTC1:null,rectAreaLTC2:null,point:[],pointShadow:[],pointShadowMap:[],pointShadowMatrix:[],hemi:[],numSpotLightShadowsWithMaps:0,numLightProbes:0};for(let u=0;u<9;u++)r.probe.push(new L);const s=new L;const o=new nt;const a=new nt;function l(u,h){let p=0,m=0,g=0;for(let te=0;te<9;te++)r.probe[te].set(0,0,0);let S=0;let f=0;let d=0;let A=0;let M=0;let T=0;let D=0;let C=0;let b=0;let z=0;let ee=0;u.sort(Mg);const v=h===true?Math.PI:1;for(let te=0,J=u.length;te<J;te++){const R=u[te];const k=R.color;const H=R.intensity;const j=R.distance;const V=R.shadow&&R.shadow.map?R.shadow.map.texture:null;if(R.isAmbientLight){p+=k.r*H*v;m+=k.g*H*v;g+=k.b*H*v}else if(R.isLightProbe){for(let X=0;X<9;X++){r.probe[X].addScaledVector(R.sh.coefficients[X],H)}ee++}else if(R.isDirectionalLight){const X=t.get(R);X.color.copy(R.color).multiplyScalar(R.intensity*v);if(R.castShadow){const Y=R.shadow;const se=n.get(R);se.shadowBias=Y.bias;se.shadowNormalBias=Y.normalBias;se.shadowRadius=Y.radius;se.shadowMapSize=Y.mapSize;r.directionalShadow[S]=se;r.directionalShadowMap[S]=V;r.directionalShadowMatrix[S]=R.shadow.matrix;T++}r.directional[S]=X;S++}else if(R.isSpotLight){const X=t.get(R);X.position.setFromMatrixPosition(R.matrixWorld);X.color.copy(k).multiplyScalar(H*v);X.distance=j;X.coneCos=Math.cos(R.angle);X.penumbraCos=Math.cos(R.angle*(1-R.penumbra));X.decay=R.decay;r.spot[d]=X;const Y=R.shadow;if(R.map){r.spotLightMap[b]=R.map;b++;Y.updateMatrices(R);if(R.castShadow)z++}r.spotLightMatrix[d]=Y.matrix;if(R.castShadow){const se=n.get(R);se.shadowBias=Y.bias;se.shadowNormalBias=Y.normalBias;se.shadowRadius=Y.radius;se.shadowMapSize=Y.mapSize;r.spotShadow[d]=se;r.spotShadowMap[d]=V;C++}d++}else if(R.isRectAreaLight){const X=t.get(R);X.color.copy(k).multiplyScalar(H);X.halfWidth.set(R.width*.5,0,0);X.halfHeight.set(0,R.height*.5,0);r.rectArea[A]=X;A++}else if(R.isPointLight){const X=t.get(R);X.color.copy(R.color).multiplyScalar(R.intensity*v);X.distance=R.distance;X.decay=R.decay;if(R.castShadow){const Y=R.shadow;const se=n.get(R);se.shadowBias=Y.bias;se.shadowNormalBias=Y.normalBias;se.shadowRadius=Y.radius;se.shadowMapSize=Y.mapSize;se.shadowCameraNear=Y.camera.near;se.shadowCameraFar=Y.camera.far;r.pointShadow[f]=se;r.pointShadowMap[f]=V;r.pointShadowMatrix[f]=R.shadow.matrix;D++}r.point[f]=X;f++}else if(R.isHemisphereLight){const X=t.get(R);X.skyColor.copy(R.color).multiplyScalar(H*v);X.groundColor.copy(R.groundColor).multiplyScalar(H*v);r.hemi[M]=X;M++}}if(A>0){if(e.isWebGL2){if(i.has("OES_texture_float_linear")===true){r.rectAreaLTC1=re.LTC_FLOAT_1;r.rectAreaLTC2=re.LTC_FLOAT_2}else{r.rectAreaLTC1=re.LTC_HALF_1;r.rectAreaLTC2=re.LTC_HALF_2}}else{if(i.has("OES_texture_float_linear")===true){r.rectAreaLTC1=re.LTC_FLOAT_1;r.rectAreaLTC2=re.LTC_FLOAT_2}else if(i.has("OES_texture_half_float_linear")===true){r.rectAreaLTC1=re.LTC_HALF_1;r.rectAreaLTC2=re.LTC_HALF_2}else{console.error("THREE.WebGLRenderer: Unable to use RectAreaLight. Missing WebGL extensions.")}}}r.ambient[0]=p;r.ambient[1]=m;r.ambient[2]=g;const y=r.hash;if(y.directionalLength!==S||y.pointLength!==f||y.spotLength!==d||y.rectAreaLength!==A||y.hemiLength!==M||y.numDirectionalShadows!==T||y.numPointShadows!==D||y.numSpotShadows!==C||y.numSpotMaps!==b||y.numLightProbes!==ee){r.directional.length=S;r.spot.length=d;r.rectArea.length=A;r.point.length=f;r.hemi.length=M;r.directionalShadow.length=T;r.directionalShadowMap.length=T;r.pointShadow.length=D;r.pointShadowMap.length=D;r.spotShadow.length=C;r.spotShadowMap.length=C;r.directionalShadowMatrix.length=T;r.pointShadowMatrix.length=D;r.spotLightMatrix.length=C+b-z;r.spotLightMap.length=b;r.numSpotLightShadowsWithMaps=z;r.numLightProbes=ee;y.directionalLength=S;y.pointLength=f;y.spotLength=d;y.rectAreaLength=A;y.hemiLength=M;y.numDirectionalShadows=T;y.numPointShadows=D;y.numSpotShadows=C;y.numSpotMaps=b;y.numLightProbes=ee;r.version=Sg++}}function c(u,h){let p=0;let m=0;let g=0;let S=0;let f=0;const d=h.matrixWorldInverse;for(let A=0,M=u.length;A<M;A++){const T=u[A];if(T.isDirectionalLight){const D=r.directional[p];D.direction.setFromMatrixPosition(T.matrixWorld);s.setFromMatrixPosition(T.target.matrixWorld);D.direction.sub(s);D.direction.transformDirection(d);p++}else if(T.isSpotLight){const D=r.spot[g];D.position.setFromMatrixPosition(T.matrixWorld);D.position.applyMatrix4(d);D.direction.setFromMatrixPosition(T.matrixWorld);s.setFromMatrixPosition(T.target.matrixWorld);D.direction.sub(s);D.direction.transformDirection(d);g++}else if(T.isRectAreaLight){const D=r.rectArea[S];D.position.setFromMatrixPosition(T.matrixWorld);D.position.applyMatrix4(d);a.identity();o.copy(T.matrixWorld);o.premultiply(d);a.extractRotation(o);D.halfWidth.set(T.width*.5,0,0);D.halfHeight.set(0,T.height*.5,0);D.halfWidth.applyMatrix4(a);D.halfHeight.applyMatrix4(a);S++}else if(T.isPointLight){const D=r.point[m];D.position.setFromMatrixPosition(T.matrixWorld);D.position.applyMatrix4(d);m++}else if(T.isHemisphereLight){const D=r.hemi[f];D.direction.setFromMatrixPosition(T.matrixWorld);D.direction.transformDirection(d);f++}}}return{setup:l,setupView:c,state:r}}function vc(i,e){const t=new Eg(i,e);const n=[];const r=[];function s(){n.length=0;r.length=0}function o(h){n.push(h)}function a(h){r.push(h)}function l(h){t.setup(n,h)}function c(h){t.setupView(n,h)}const u={lightsArray:n,shadowsArray:r,lights:t};return{init:s,state:u,setupLights:l,setupLightsView:c,pushLight:o,pushShadow:a}}function yg(i,e){let t=new WeakMap;function n(s,o=0){const a=t.get(s);let l;if(a===void 0){l=new vc(i,e);t.set(s,[l])}else{if(o>=a.length){l=new vc(i,e);a.push(l)}else{l=a[o]}}return l}function r(){t=new WeakMap}return{get:n,dispose:r}}class Tg extends nr{constructor(e){super();this.isMeshDepthMaterial=true;this.type="MeshDepthMaterial";this.depthPacking=vd;this.map=null;this.alphaMap=null;this.displacementMap=null;this.displacementScale=1;this.displacementBias=0;this.wireframe=false;this.wireframeLinewidth=1;this.setValues(e)}copy(e){super.copy(e);this.depthPacking=e.depthPacking;this.map=e.map;this.alphaMap=e.alphaMap;this.displacementMap=e.displacementMap;this.displacementScale=e.displacementScale;this.displacementBias=e.displacementBias;this.wireframe=e.wireframe;this.wireframeLinewidth=e.wireframeLinewidth;return this}}class Ag extends nr{constructor(e){super();this.isMeshDistanceMaterial=true;this.type="MeshDistanceMaterial";this.map=null;this.alphaMap=null;this.displacementMap=null;this.displacementScale=1;this.displacementBias=0;this.setValues(e)}copy(e){super.copy(e);this.map=e.map;this.alphaMap=e.alphaMap;this.displacementMap=e.displacementMap;this.displacementScale=e.displacementScale;this.displacementBias=e.displacementBias;return this}}const bg="void main() {\n	gl_Position = vec4( position, 1.0 );\n}";const Cg="uniform sampler2D shadow_pass;\nuniform vec2 resolution;\nuniform float radius;\n#include <packing>\nvoid main() {\n	const float samples = float( VSM_SAMPLES );\n	float mean = 0.0;\n	float squared_mean = 0.0;\n	float uvStride = samples <= 1.0 ? 0.0 : 2.0 / ( samples - 1.0 );\n	float uvStart = samples <= 1.0 ? 0.0 : - 1.0;\n	for ( float i = 0.0; i < samples; i ++ ) {\n		float uvOffset = uvStart + i * uvStride;\n		#ifdef HORIZONTAL_PASS\n			vec2 distribution = unpackRGBATo2Half( texture2D( shadow_pass, ( gl_FragCoord.xy + vec2( uvOffset, 0.0 ) * radius ) / resolution ) );\n			mean += distribution.x;\n			squared_mean += distribution.y * distribution.y + distribution.x * distribution.x;\n		#else\n			float depth = unpackRGBAToDepth( texture2D( shadow_pass, ( gl_FragCoord.xy + vec2( 0.0, uvOffset ) * radius ) / resolution ) );\n			mean += depth;\n			squared_mean += depth * depth;\n		#endif\n	}\n	mean = mean / samples;\n	squared_mean = squared_mean / samples;\n	float std_dev = sqrt( squared_mean - mean * mean );\n	gl_FragColor = pack2HalfToRGBA( vec2( mean, std_dev ) );\n}";function wg(i,e,t){let n=new wo;const r=new Pe,s=new Pe,o=new dt,a=new Tg({depthPacking:xd}),l=new Ag,c={},u=t.maxTextureSize;const h={[On]:wt,[wt]:On,[Jt]:Jt};const p=new Dt({defines:{VSM_SAMPLES:8},uniforms:{shadow_pass:{value:null},resolution:{value:new Pe},radius:{value:4}},vertexShader:bg,fragmentShader:Cg});const m=p.clone();m.defines.HORIZONTAL_PASS=1;const g=new Ut;g.setAttribute("position",new en(new Float32Array([-1,-1,.5,3,-1,.5,-1,3,.5]),3));const S=new qt(g,p);const f=this;this.enabled=false;this.autoUpdate=true;this.needsUpdate=false;this.type=ru;let d=this.type;this.render=function(C,b,z){if(f.enabled===false)return;if(f.autoUpdate===false&&f.needsUpdate===false)return;if(C.length===0)return;const ee=i.getRenderTarget();const v=i.getActiveCubeFace();const y=i.getActiveMipmapLevel();const te=i.state;te.setBlending(Sn);te.buffers.color.setClear(1,1,1,1);te.buffers.depth.setTest(true);te.setScissorTest(false);const J=d!==un&&this.type===un;const R=d===un&&this.type!==un;for(let k=0,H=C.length;k<H;k++){const j=C[k];const V=j.shadow;if(V===void 0){console.warn("THREE.WebGLShadowMap:",j,"has no shadow.");continue}if(V.autoUpdate===false&&V.needsUpdate===false)continue;r.copy(V.mapSize);const X=V.getFrameExtents();r.multiply(X);s.copy(V.mapSize);if(r.x>u||r.y>u){if(r.x>u){s.x=Math.floor(u/X.x);r.x=s.x*X.x;V.mapSize.x=s.x}if(r.y>u){s.y=Math.floor(u/X.y);r.y=s.y*X.y;V.mapSize.y=s.y}}if(V.map===null||J===true||R===true){const se=this.type!==un?{minFilter:Et,magFilter:Et}:{};if(V.map!==null){V.map.dispose()}V.map=new tn(r.x,r.y,se);V.map.texture.name=j.name+".shadowMap";V.camera.updateProjectionMatrix()}i.setRenderTarget(V.map);i.clear();const Y=V.getViewportCount();for(let se=0;se<Y;se++){const de=V.getViewport(se);o.set(s.x*de.x,s.y*de.y,s.x*de.z,s.y*de.w);te.viewport(o);V.updateMatrices(j,se);n=V.getFrustum();T(b,z,V.camera,j,this.type)}if(V.isPointLightShadow!==true&&this.type===un){A(V,z)}V.needsUpdate=false}d=this.type;f.needsUpdate=false;i.setRenderTarget(ee,v,y)};function A(C,b){const z=e.update(S);if(p.defines.VSM_SAMPLES!==C.blurSamples){p.defines.VSM_SAMPLES=C.blurSamples;m.defines.VSM_SAMPLES=C.blurSamples;p.needsUpdate=true;m.needsUpdate=true}if(C.mapPass===null){C.mapPass=new tn(r.x,r.y)}p.uniforms.shadow_pass.value=C.map.texture;p.uniforms.resolution.value=C.mapSize;p.uniforms.radius.value=C.radius;i.setRenderTarget(C.mapPass);i.clear();i.renderBufferDirect(b,null,z,p,S,null);m.uniforms.shadow_pass.value=C.mapPass.texture;m.uniforms.resolution.value=C.mapSize;m.uniforms.radius.value=C.radius;i.setRenderTarget(C.map);i.clear();i.renderBufferDirect(b,null,z,m,S,null)}function M(C,b,z,ee){let v=null;const y=z.isPointLight===true?C.customDistanceMaterial:C.customDepthMaterial;if(y!==void 0){v=y}else{v=z.isPointLight===true?l:a;if(i.localClippingEnabled&&b.clipShadows===true&&Array.isArray(b.clippingPlanes)&&b.clippingPlanes.length!==0||b.displacementMap&&b.displacementScale!==0||b.alphaMap&&b.alphaTest>0||b.map&&b.alphaTest>0){const te=v.uuid,J=b.uuid;let R=c[te];if(R===void 0){R={};c[te]=R}let k=R[J];if(k===void 0){k=v.clone();R[J]=k;b.addEventListener("dispose",D)}v=k}}v.visible=b.visible;v.wireframe=b.wireframe;if(ee===un){v.side=b.shadowSide!==null?b.shadowSide:b.side}else{v.side=b.shadowSide!==null?b.shadowSide:h[b.side]}v.alphaMap=b.alphaMap;v.alphaTest=b.alphaTest;v.map=b.map;v.clipShadows=b.clipShadows;v.clippingPlanes=b.clippingPlanes;v.clipIntersection=b.clipIntersection;v.displacementMap=b.displacementMap;v.displacementScale=b.displacementScale;v.displacementBias=b.displacementBias;v.wireframeLinewidth=b.wireframeLinewidth;v.linewidth=b.linewidth;if(z.isPointLight===true&&v.isMeshDistanceMaterial===true){const te=i.properties.get(v);te.light=z}return v}function T(C,b,z,ee,v){if(C.visible===false)return;const y=C.layers.test(b.layers);if(y&&(C.isMesh||C.isLine||C.isPoints)){if((C.castShadow||C.receiveShadow&&v===un)&&(!C.frustumCulled||n.intersectsObject(C))){C.modelViewMatrix.multiplyMatrices(z.matrixWorldInverse,C.matrixWorld);const J=e.update(C);const R=C.material;if(Array.isArray(R)){const k=J.groups;for(let H=0,j=k.length;H<j;H++){const V=k[H];const X=R[V.materialIndex];if(X&&X.visible){const Y=M(C,X,ee,v);C.onBeforeShadow(i,C,b,z,J,Y,V);i.renderBufferDirect(z,null,J,Y,C,V);C.onAfterShadow(i,C,b,z,J,Y,V)}}}else if(R.visible){const k=M(C,R,ee,v);C.onBeforeShadow(i,C,b,z,J,k,null);i.renderBufferDirect(z,null,J,k,C,null);C.onAfterShadow(i,C,b,z,J,k,null)}}}const te=C.children;for(let J=0,R=te.length;J<R;J++){T(te[J],b,z,ee,v)}}function D(C){const b=C.target;b.removeEventListener("dispose",D);for(const z in c){const ee=c[z];const v=C.target.uuid;if(v in ee){const y=ee[v];y.dispose();delete ee[v]}}}}function Rg(i,e,t){const n=t.isWebGL2;function r(){let w=false;const le=new dt;let I=null;const ne=new dt(0,0,0,0);return{setMask:function(ce){if(I!==ce&&!w){i.colorMask(ce,ce,ce,ce);I=ce}},setLocked:function(ce){w=ce},setClear:function(ce,Xe,Ke,pt,Nt){if(Nt===true){ce*=pt;Xe*=pt;Ke*=pt}le.set(ce,Xe,Ke,pt);if(ne.equals(le)===false){i.clearColor(ce,Xe,Ke,pt);ne.copy(le)}},reset:function(){w=false;I=null;ne.set(-1,0,0,0)}}}function s(){let w=false;let le=null;let I=null;let ne=null;return{setTest:function(ce){if(ce){fe(i.DEPTH_TEST)}else{Ye(i.DEPTH_TEST)}},setMask:function(ce){if(le!==ce&&!w){i.depthMask(ce);le=ce}},setFunc:function(ce){if(I!==ce){switch(ce){case ed:i.depthFunc(i.NEVER);break;case td:i.depthFunc(i.ALWAYS);break;case nd:i.depthFunc(i.LESS);break;case ws:i.depthFunc(i.LEQUAL);break;case id:i.depthFunc(i.EQUAL);break;case rd:i.depthFunc(i.GEQUAL);break;case sd:i.depthFunc(i.GREATER);break;case ad:i.depthFunc(i.NOTEQUAL);break;default:i.depthFunc(i.LEQUAL)}I=ce}},setLocked:function(ce){w=ce},setClear:function(ce){if(ne!==ce){i.clearDepth(ce);ne=ce}},reset:function(){w=false;le=null;I=null;ne=null}}}function o(){let w=false;let le=null;let I=null;let ne=null;let ce=null;let Xe=null;let Ke=null;let pt=null;let Nt=null;return{setTest:function(Ze){if(!w){if(Ze){fe(i.STENCIL_TEST)}else{Ye(i.STENCIL_TEST)}}},setMask:function(Ze){if(le!==Ze&&!w){i.stencilMask(Ze);le=Ze}},setFunc:function(Ze,St,Yt){if(I!==Ze||ne!==St||ce!==Yt){i.stencilFunc(Ze,St,Yt);I=Ze;ne=St;ce=Yt}},setOp:function(Ze,St,Yt){if(Xe!==Ze||Ke!==St||pt!==Yt){i.stencilOp(Ze,St,Yt);Xe=Ze;Ke=St;pt=Yt}},setLocked:function(Ze){w=Ze},setClear:function(Ze){if(Nt!==Ze){i.clearStencil(Ze);Nt=Ze}},reset:function(){w=false;le=null;I=null;ne=null;ce=null;Xe=null;Ke=null;pt=null;Nt=null}}}const a=new r;const l=new s;const c=new o;const u=new WeakMap;const h=new WeakMap;let p={};let m={};let g=new WeakMap;let S=[];let f=null;let d=false;let A=null;let M=null;let T=null;let D=null;let C=null;let b=null;let z=null;let ee=new Ve(0,0,0);let v=0;let y=false;let te=null;let J=null;let R=null;let k=null;let H=null;const j=i.getParameter(i.MAX_COMBINED_TEXTURE_IMAGE_UNITS);let V=false;let X=0;const Y=i.getParameter(i.VERSION);if(Y.indexOf("WebGL")!==-1){X=parseFloat(/^WebGL (\d)/.exec(Y)[1]);V=X>=1}else if(Y.indexOf("OpenGL ES")!==-1){X=parseFloat(/^OpenGL ES (\d)/.exec(Y)[1]);V=X>=2}let se=null;let de={};const Re=i.getParameter(i.SCISSOR_BOX);const B=i.getParameter(i.VIEWPORT);const K=new dt().fromArray(Re);const he=new dt().fromArray(B);function Ae(w,le,I,ne){const ce=new Uint8Array(4);const Xe=i.createTexture();i.bindTexture(w,Xe);i.texParameteri(w,i.TEXTURE_MIN_FILTER,i.NEAREST);i.texParameteri(w,i.TEXTURE_MAG_FILTER,i.NEAREST);for(let Ke=0;Ke<I;Ke++){if(n&&(w===i.TEXTURE_3D||w===i.TEXTURE_2D_ARRAY)){i.texImage3D(le,0,i.RGBA,1,1,ne,0,i.RGBA,i.UNSIGNED_BYTE,ce)}else{i.texImage2D(le+Ke,0,i.RGBA,1,1,0,i.RGBA,i.UNSIGNED_BYTE,ce)}}return Xe}const ge={};ge[i.TEXTURE_2D]=Ae(i.TEXTURE_2D,i.TEXTURE_2D,1);ge[i.TEXTURE_CUBE_MAP]=Ae(i.TEXTURE_CUBE_MAP,i.TEXTURE_CUBE_MAP_POSITIVE_X,6);if(n){ge[i.TEXTURE_2D_ARRAY]=Ae(i.TEXTURE_2D_ARRAY,i.TEXTURE_2D_ARRAY,1,1);ge[i.TEXTURE_3D]=Ae(i.TEXTURE_3D,i.TEXTURE_3D,1,1)}a.setClear(0,0,0,1);l.setClear(1);c.setClear(0);fe(i.DEPTH_TEST);l.setFunc(ws);ze(false);ke(Jo);fe(i.CULL_FACE);Ee(Sn);function fe(w){if(p[w]!==true){i.enable(w);p[w]=true}}function Ye(w){if(p[w]!==false){i.disable(w);p[w]=false}}function be(w,le){if(m[w]!==le){i.bindFramebuffer(w,le);m[w]=le;if(n){if(w===i.DRAW_FRAMEBUFFER){m[i.FRAMEBUFFER]=le}if(w===i.FRAMEBUFFER){m[i.DRAW_FRAMEBUFFER]=le}}return true}return false}function U(w,le){let I=S;let ne=false;if(w){I=g.get(le);if(I===void 0){I=[];g.set(le,I)}const ce=w.textures;if(I.length!==ce.length||I[0]!==i.COLOR_ATTACHMENT0){for(let Xe=0,Ke=ce.length;Xe<Ke;Xe++){I[Xe]=i.COLOR_ATTACHMENT0+Xe}I.length=ce.length;ne=true}}else{if(I[0]!==i.BACK){I[0]=i.BACK;ne=true}}if(ne){if(t.isWebGL2){i.drawBuffers(I)}else if(e.has("WEBGL_draw_buffers")===true){e.get("WEBGL_draw_buffers").drawBuffersWEBGL(I)}else{throw new Error("THREE.WebGLState: Usage of gl.drawBuffers() require WebGL2 or WEBGL_draw_buffers extension")}}}function ft(w){if(f!==w){i.useProgram(w);f=w;return true}return false}const Se={[Jn]:i.FUNC_ADD,[zh]:i.FUNC_SUBTRACT,[Gh]:i.FUNC_REVERSE_SUBTRACT};if(n){Se[tl]=i.MIN;Se[nl]=i.MAX}else{const w=e.get("EXT_blend_minmax");if(w!==null){Se[tl]=w.MIN_EXT;Se[nl]=w.MAX_EXT}}const He={[Hh]:i.ZERO,[Vh]:i.ONE,[kh]:i.SRC_COLOR,[eo]:i.SRC_ALPHA,[$h]:i.SRC_ALPHA_SATURATE,[jh]:i.DST_COLOR,[Xh]:i.DST_ALPHA,[Wh]:i.ONE_MINUS_SRC_COLOR,[to]:i.ONE_MINUS_SRC_ALPHA,[Yh]:i.ONE_MINUS_DST_COLOR,[qh]:i.ONE_MINUS_DST_ALPHA,[Kh]:i.CONSTANT_COLOR,[Zh]:i.ONE_MINUS_CONSTANT_COLOR,[Jh]:i.CONSTANT_ALPHA,[Qh]:i.ONE_MINUS_CONSTANT_ALPHA};function Ee(w,le,I,ne,ce,Xe,Ke,pt,Nt,Ze){if(w===Sn){if(d===true){Ye(i.BLEND);d=false}return}if(d===false){fe(i.BLEND);d=true}if(w!==Bh){if(w!==A||Ze!==y){if(M!==Jn||C!==Jn){i.blendEquation(i.FUNC_ADD);M=Jn;C=Jn}if(Ze){switch(w){case Ni:i.blendFuncSeparate(i.ONE,i.ONE_MINUS_SRC_ALPHA,i.ONE,i.ONE_MINUS_SRC_ALPHA);break;case Qa:i.blendFunc(i.ONE,i.ONE);break;case Qo:i.blendFuncSeparate(i.ZERO,i.ONE_MINUS_SRC_COLOR,i.ZERO,i.ONE);break;case el:i.blendFuncSeparate(i.ZERO,i.SRC_COLOR,i.ZERO,i.SRC_ALPHA);break;default:console.error("THREE.WebGLState: Invalid blending: ",w);break}}else{switch(w){case Ni:i.blendFuncSeparate(i.SRC_ALPHA,i.ONE_MINUS_SRC_ALPHA,i.ONE,i.ONE_MINUS_SRC_ALPHA);break;case Qa:i.blendFunc(i.SRC_ALPHA,i.ONE);break;case Qo:i.blendFuncSeparate(i.ZERO,i.ONE_MINUS_SRC_COLOR,i.ZERO,i.ONE);break;case el:i.blendFunc(i.ZERO,i.SRC_COLOR);break;default:console.error("THREE.WebGLState: Invalid blending: ",w);break}}T=null;D=null;b=null;z=null;ee.set(0,0,0);v=0;A=w;y=Ze}return}ce=ce||le;Xe=Xe||I;Ke=Ke||ne;if(le!==M||ce!==C){i.blendEquationSeparate(Se[le],Se[ce]);M=le;C=ce}if(I!==T||ne!==D||Xe!==b||Ke!==z){i.blendFuncSeparate(He[I],He[ne],He[Xe],He[Ke]);T=I;D=ne;b=Xe;z=Ke}if(pt.equals(ee)===false||Nt!==v){i.blendColor(pt.r,pt.g,pt.b,Nt);ee.copy(pt);v=Nt}A=w;y=false}function qe(w,le){w.side===Jt?Ye(i.CULL_FACE):fe(i.CULL_FACE);let I=w.side===wt;if(le)I=!I;ze(I);w.blending===Ni&&w.transparent===false?Ee(Sn):Ee(w.blending,w.blendEquation,w.blendSrc,w.blendDst,w.blendEquationAlpha,w.blendSrcAlpha,w.blendDstAlpha,w.blendColor,w.blendAlpha,w.premultipliedAlpha);l.setFunc(w.depthFunc);l.setTest(w.depthTest);l.setMask(w.depthWrite);a.setMask(w.colorWrite);const ne=w.stencilWrite;c.setTest(ne);if(ne){c.setMask(w.stencilWriteMask);c.setFunc(w.stencilFunc,w.stencilRef,w.stencilFuncMask);c.setOp(w.stencilFail,w.stencilZFail,w.stencilZPass)}E(w.polygonOffset,w.polygonOffsetFactor,w.polygonOffsetUnits);w.alphaToCoverage===true?fe(i.SAMPLE_ALPHA_TO_COVERAGE):Ye(i.SAMPLE_ALPHA_TO_COVERAGE)}function ze(w){if(te!==w){if(w){i.frontFace(i.CW)}else{i.frontFace(i.CCW)}te=w}}function ke(w){if(w!==Ih){fe(i.CULL_FACE);if(w!==J){if(w===Jo){i.cullFace(i.BACK)}else if(w===Fh){i.cullFace(i.FRONT)}else{i.cullFace(i.FRONT_AND_BACK)}}}else{Ye(i.CULL_FACE)}J=w}function rt(w){if(w!==R){if(V)i.lineWidth(w);R=w}}function E(w,le,I){if(w){fe(i.POLYGON_OFFSET_FILL);if(k!==le||H!==I){i.polygonOffset(le,I);k=le;H=I}}else{Ye(i.POLYGON_OFFSET_FILL)}}function _(w){if(w){fe(i.SCISSOR_TEST)}else{Ye(i.SCISSOR_TEST)}}function G(w){if(w===void 0)w=i.TEXTURE0+j-1;if(se!==w){i.activeTexture(w);se=w}}function W(w,le,I){if(I===void 0){if(se===null){I=i.TEXTURE0+j-1}else{I=se}}let ne=de[I];if(ne===void 0){ne={type:void 0,texture:void 0};de[I]=ne}if(ne.type!==w||ne.texture!==le){if(se!==I){i.activeTexture(I);se=I}i.bindTexture(w,le||ge[w]);ne.type=w;ne.texture=le}}function Z(){const w=de[se];if(w!==void 0&&w.type!==void 0){i.bindTexture(w.type,null);w.type=void 0;w.texture=void 0}}function $(){try{i.compressedTexImage2D.apply(i,arguments)}catch(w){console.error("THREE.WebGLState:",w)}}function Ie(){try{i.compressedTexImage3D.apply(i,arguments)}catch(w){console.error("THREE.WebGLState:",w)}}function ye(){try{i.texSubImage2D.apply(i,arguments)}catch(w){console.error("THREE.WebGLState:",w)}}function ae(){try{i.texSubImage3D.apply(i,arguments)}catch(w){console.error("THREE.WebGLState:",w)}}function oe(){try{i.compressedTexSubImage2D.apply(i,arguments)}catch(w){console.error("THREE.WebGLState:",w)}}function De(){try{i.compressedTexSubImage3D.apply(i,arguments)}catch(w){console.error("THREE.WebGLState:",w)}}function Q(){try{i.texStorage2D.apply(i,arguments)}catch(w){console.error("THREE.WebGLState:",w)}}function at(){try{i.texStorage3D.apply(i,arguments)}catch(w){console.error("THREE.WebGLState:",w)}}function We(){try{i.texImage2D.apply(i,arguments)}catch(w){console.error("THREE.WebGLState:",w)}}function ve(){try{i.texImage3D.apply(i,arguments)}catch(w){console.error("THREE.WebGLState:",w)}}function pe(w){if(K.equals(w)===false){i.scissor(w.x,w.y,w.z,w.w);K.copy(w)}}function me(w){if(he.equals(w)===false){i.viewport(w.x,w.y,w.z,w.w);he.copy(w)}}function je(w,le){let I=h.get(le);if(I===void 0){I=new WeakMap;h.set(le,I)}let ne=I.get(w);if(ne===void 0){ne=i.getUniformBlockIndex(le,w.name);I.set(w,ne)}}function Ue(w,le){const I=h.get(le);const ne=I.get(w);if(u.get(le)!==ne){i.uniformBlockBinding(le,ne,w.__bindingPointIndex);u.set(le,ne)}}function Qe(){i.disable(i.BLEND);i.disable(i.CULL_FACE);i.disable(i.DEPTH_TEST);i.disable(i.POLYGON_OFFSET_FILL);i.disable(i.SCISSOR_TEST);i.disable(i.STENCIL_TEST);i.disable(i.SAMPLE_ALPHA_TO_COVERAGE);i.blendEquation(i.FUNC_ADD);i.blendFunc(i.ONE,i.ZERO);i.blendFuncSeparate(i.ONE,i.ZERO,i.ONE,i.ZERO);i.blendColor(0,0,0,0);i.colorMask(true,true,true,true);i.clearColor(0,0,0,0);i.depthMask(true);i.depthFunc(i.LESS);i.clearDepth(1);i.stencilMask(4294967295);i.stencilFunc(i.ALWAYS,0,4294967295);i.stencilOp(i.KEEP,i.KEEP,i.KEEP);i.clearStencil(0);i.cullFace(i.BACK);i.frontFace(i.CCW);i.polygonOffset(0,0);i.activeTexture(i.TEXTURE0);i.bindFramebuffer(i.FRAMEBUFFER,null);if(n===true){i.bindFramebuffer(i.DRAW_FRAMEBUFFER,null);i.bindFramebuffer(i.READ_FRAMEBUFFER,null)}i.useProgram(null);i.lineWidth(1);i.scissor(0,0,i.canvas.width,i.canvas.height);i.viewport(0,0,i.canvas.width,i.canvas.height);p={};se=null;de={};m={};g=new WeakMap;S=[];f=null;d=false;A=null;M=null;T=null;D=null;C=null;b=null;z=null;ee=new Ve(0,0,0);v=0;y=false;te=null;J=null;R=null;k=null;H=null;K.set(0,0,i.canvas.width,i.canvas.height);he.set(0,0,i.canvas.width,i.canvas.height);a.reset();l.reset();c.reset()}return{buffers:{color:a,depth:l,stencil:c},enable:fe,disable:Ye,bindFramebuffer:be,drawBuffers:U,useProgram:ft,setBlending:Ee,setMaterial:qe,setFlipSided:ze,setCullFace:ke,setLineWidth:rt,setPolygonOffset:E,setScissorTest:_,activeTexture:G,bindTexture:W,unbindTexture:Z,compressedTexImage2D:$,compressedTexImage3D:Ie,texImage2D:We,texImage3D:ve,updateUBOMapping:je,uniformBlockBinding:Ue,texStorage2D:Q,texStorage3D:at,texSubImage2D:ye,texSubImage3D:ae,compressedTexSubImage2D:oe,compressedTexSubImage3D:De,scissor:pe,viewport:me,reset:Qe}}function Lg(i,e,t,n,r,s,o){const a=r.isWebGL2;const l=e.has("WEBGL_multisampled_render_to_texture")?e.get("WEBGL_multisampled_render_to_texture"):null;const c=typeof navigator==="undefined"?false:/OculusBrowser/g.test(navigator.userAgent);const u=new Pe;const h=new WeakMap;let p;const m=new WeakMap;let g=false;try{g=typeof OffscreenCanvas!=="undefined"&&new OffscreenCanvas(1,1).getContext("2d")!==null}catch(E){}function S(E,_){return g?new OffscreenCanvas(E,_):gr("canvas")}function f(E,_,G,W){let Z=1;const $=rt(E);if($.width>W||$.height>W){Z=W/Math.max($.width,$.height)}if(Z<1||_===true){if(typeof HTMLImageElement!=="undefined"&&E instanceof HTMLImageElement||typeof HTMLCanvasElement!=="undefined"&&E instanceof HTMLCanvasElement||typeof ImageBitmap!=="undefined"&&E instanceof ImageBitmap||typeof VideoFrame!=="undefined"&&E instanceof VideoFrame){const Ie=_?lo:Math.floor;const ye=Ie(Z*$.width);const ae=Ie(Z*$.height);if(p===void 0)p=S(ye,ae);const oe=G?S(ye,ae):p;oe.width=ye;oe.height=ae;const De=oe.getContext("2d");De.drawImage(E,0,0,ye,ae);console.warn("THREE.WebGLRenderer: Texture has been resized from ("+$.width+"x"+$.height+") to ("+ye+"x"+ae+").");return oe}else{if("data"in E){console.warn("THREE.WebGLRenderer: Image in DataTexture is too big ("+$.width+"x"+$.height+").")}return E}}return E}function d(E){const _=rt(E);return Dl(_.width)&&Dl(_.height)}function A(E){if(a)return false;return E.wrapS!==Wt||E.wrapT!==Wt||E.minFilter!==Et&&E.minFilter!==Ct}function M(E,_){return E.generateMipmaps&&_&&E.minFilter!==Et&&E.minFilter!==Ct}function T(E){i.generateMipmap(E)}function D(E,_,G,W,Z=false){if(a===false)return _;if(E!==null){if(i[E]!==void 0)return i[E];console.warn("THREE.WebGLRenderer: Attempt to use non-existing WebGL internal format '"+E+"'")}let $=_;if(_===i.RED){if(G===i.FLOAT)$=i.R32F;if(G===i.HALF_FLOAT)$=i.R16F;if(G===i.UNSIGNED_BYTE)$=i.R8}if(_===i.RED_INTEGER){if(G===i.UNSIGNED_BYTE)$=i.R8UI;if(G===i.UNSIGNED_SHORT)$=i.R16UI;if(G===i.UNSIGNED_INT)$=i.R32UI;if(G===i.BYTE)$=i.R8I;if(G===i.SHORT)$=i.R16I;if(G===i.INT)$=i.R32I}if(_===i.RG){if(G===i.FLOAT)$=i.RG32F;if(G===i.HALF_FLOAT)$=i.RG16F;if(G===i.UNSIGNED_BYTE)$=i.RG8}if(_===i.RG_INTEGER){if(G===i.UNSIGNED_BYTE)$=i.RG8UI;if(G===i.UNSIGNED_SHORT)$=i.RG16UI;if(G===i.UNSIGNED_INT)$=i.RG32UI;if(G===i.BYTE)$=i.RG8I;if(G===i.SHORT)$=i.RG16I;if(G===i.INT)$=i.RG32I}if(_===i.RGBA){const Ie=Z?Rs:$e.getTransfer(W);if(G===i.FLOAT)$=i.RGBA32F;if(G===i.HALF_FLOAT)$=i.RGBA16F;if(G===i.UNSIGNED_BYTE)$=Ie===Je?i.SRGB8_ALPHA8:i.RGBA8;if(G===i.UNSIGNED_SHORT_4_4_4_4)$=i.RGBA4;if(G===i.UNSIGNED_SHORT_5_5_5_1)$=i.RGB5_A1}if($===i.R16F||$===i.R32F||$===i.RG16F||$===i.RG32F||$===i.RGBA16F||$===i.RGBA32F){e.get("EXT_color_buffer_float")}return $}function C(E,_,G){if(M(E,G)===true||E.isFramebufferTexture&&E.minFilter!==Et&&E.minFilter!==Ct){return Math.log2(Math.max(_.width,_.height))+1}else if(E.mipmaps!==void 0&&E.mipmaps.length>0){return E.mipmaps.length}else if(E.isCompressedTexture&&Array.isArray(E.image)){return _.mipmaps.length}else{return 1}}function b(E){if(E===Et||E===il||E===ar){return i.NEAREST}return i.LINEAR}function z(E){const _=E.target;_.removeEventListener("dispose",z);v(_);if(_.isVideoTexture){h.delete(_)}}function ee(E){const _=E.target;_.removeEventListener("dispose",ee);te(_)}function v(E){const _=n.get(E);if(_.__webglInit===void 0)return;const G=E.source;const W=m.get(G);if(W){const Z=W[_.__cacheKey];Z.usedTimes--;if(Z.usedTimes===0){y(E)}if(Object.keys(W).length===0){m.delete(G)}}n.remove(E)}function y(E){const _=n.get(E);i.deleteTexture(_.__webglTexture);const G=E.source;const W=m.get(G);delete W[_.__cacheKey];o.memory.textures--}function te(E){const _=n.get(E);if(E.depthTexture){E.depthTexture.dispose()}if(E.isWebGLCubeRenderTarget){for(let W=0;W<6;W++){if(Array.isArray(_.__webglFramebuffer[W])){for(let Z=0;Z<_.__webglFramebuffer[W].length;Z++)i.deleteFramebuffer(_.__webglFramebuffer[W][Z])}else{i.deleteFramebuffer(_.__webglFramebuffer[W])}if(_.__webglDepthbuffer)i.deleteRenderbuffer(_.__webglDepthbuffer[W])}}else{if(Array.isArray(_.__webglFramebuffer)){for(let W=0;W<_.__webglFramebuffer.length;W++)i.deleteFramebuffer(_.__webglFramebuffer[W])}else{i.deleteFramebuffer(_.__webglFramebuffer)}if(_.__webglDepthbuffer)i.deleteRenderbuffer(_.__webglDepthbuffer);if(_.__webglMultisampledFramebuffer)i.deleteFramebuffer(_.__webglMultisampledFramebuffer);if(_.__webglColorRenderbuffer){for(let W=0;W<_.__webglColorRenderbuffer.length;W++){if(_.__webglColorRenderbuffer[W])i.deleteRenderbuffer(_.__webglColorRenderbuffer[W])}}if(_.__webglDepthRenderbuffer)i.deleteRenderbuffer(_.__webglDepthRenderbuffer)}const G=E.textures;for(let W=0,Z=G.length;W<Z;W++){const $=n.get(G[W]);if($.__webglTexture){i.deleteTexture($.__webglTexture);o.memory.textures--}n.remove(G[W])}n.remove(E)}let J=0;function R(){J=0}function k(){const E=J;if(E>=r.maxTextures){console.warn("THREE.WebGLTextures: Trying to use "+E+" texture units while this GPU supports only "+r.maxTextures)}J+=1;return E}function H(E){const _=[];_.push(E.wrapS);_.push(E.wrapT);_.push(E.wrapR||0);_.push(E.magFilter);_.push(E.minFilter);_.push(E.anisotropy);_.push(E.internalFormat);_.push(E.format);_.push(E.type);_.push(E.generateMipmaps);_.push(E.premultiplyAlpha);_.push(E.flipY);_.push(E.unpackAlignment);_.push(E.colorSpace);return _.join()}function j(E,_){const G=n.get(E);if(E.isVideoTexture)ze(E);if(E.isRenderTargetTexture===false&&E.version>0&&G.__version!==E.version){const W=E.image;if(W===null){console.warn("THREE.WebGLRenderer: Texture marked for update but no image data found.")}else if(W.complete===false){console.warn("THREE.WebGLRenderer: Texture marked for update but image is incomplete")}else{he(G,E,_);return}}t.bindTexture(i.TEXTURE_2D,G.__webglTexture,i.TEXTURE0+_)}function V(E,_){const G=n.get(E);if(E.version>0&&G.__version!==E.version){he(G,E,_);return}t.bindTexture(i.TEXTURE_2D_ARRAY,G.__webglTexture,i.TEXTURE0+_)}function X(E,_){const G=n.get(E);if(E.version>0&&G.__version!==E.version){he(G,E,_);return}t.bindTexture(i.TEXTURE_3D,G.__webglTexture,i.TEXTURE0+_)}function Y(E,_){const G=n.get(E);if(E.version>0&&G.__version!==E.version){Ae(G,E,_);return}t.bindTexture(i.TEXTURE_CUBE_MAP,G.__webglTexture,i.TEXTURE0+_)}const se={[ro]:i.REPEAT,[Wt]:i.CLAMP_TO_EDGE,[so]:i.MIRRORED_REPEAT};const de={[Et]:i.NEAREST,[il]:i.NEAREST_MIPMAP_NEAREST,[ar]:i.NEAREST_MIPMAP_LINEAR,[Ct]:i.LINEAR,[sa]:i.LINEAR_MIPMAP_NEAREST,[ei]:i.LINEAR_MIPMAP_LINEAR};const Re={[Md]:i.NEVER,[Cd]:i.ALWAYS,[Ed]:i.LESS,[Su]:i.LEQUAL,[yd]:i.EQUAL,[bd]:i.GEQUAL,[Td]:i.GREATER,[Ad]:i.NOTEQUAL};function B(E,_,G){if(_.type===gn&&e.has("OES_texture_float_linear")===false&&(_.magFilter===Ct||_.magFilter===sa||_.magFilter===ar||_.magFilter===ei||_.minFilter===Ct||_.minFilter===sa||_.minFilter===ar||_.minFilter===ei)){console.warn("THREE.WebGLRenderer: Unable to use linear filtering with floating point textures. OES_texture_float_linear not supported on this device.")}if(G){i.texParameteri(E,i.TEXTURE_WRAP_S,se[_.wrapS]);i.texParameteri(E,i.TEXTURE_WRAP_T,se[_.wrapT]);if(E===i.TEXTURE_3D||E===i.TEXTURE_2D_ARRAY){i.texParameteri(E,i.TEXTURE_WRAP_R,se[_.wrapR])}i.texParameteri(E,i.TEXTURE_MAG_FILTER,de[_.magFilter]);i.texParameteri(E,i.TEXTURE_MIN_FILTER,de[_.minFilter])}else{i.texParameteri(E,i.TEXTURE_WRAP_S,i.CLAMP_TO_EDGE);i.texParameteri(E,i.TEXTURE_WRAP_T,i.CLAMP_TO_EDGE);if(E===i.TEXTURE_3D||E===i.TEXTURE_2D_ARRAY){i.texParameteri(E,i.TEXTURE_WRAP_R,i.CLAMP_TO_EDGE)}if(_.wrapS!==Wt||_.wrapT!==Wt){console.warn("THREE.WebGLRenderer: Texture is not power of two. Texture.wrapS and Texture.wrapT should be set to THREE.ClampToEdgeWrapping.")}i.texParameteri(E,i.TEXTURE_MAG_FILTER,b(_.magFilter));i.texParameteri(E,i.TEXTURE_MIN_FILTER,b(_.minFilter));if(_.minFilter!==Et&&_.minFilter!==Ct){console.warn("THREE.WebGLRenderer: Texture is not power of two. Texture.minFilter should be set to THREE.NearestFilter or THREE.LinearFilter.")}}if(_.compareFunction){i.texParameteri(E,i.TEXTURE_COMPARE_MODE,i.COMPARE_REF_TO_TEXTURE);i.texParameteri(E,i.TEXTURE_COMPARE_FUNC,Re[_.compareFunction])}if(e.has("EXT_texture_filter_anisotropic")===true){if(_.magFilter===Et)return;if(_.minFilter!==ar&&_.minFilter!==ei)return;if(_.type===gn&&e.has("OES_texture_float_linear")===false)return;if(a===false&&(_.type===Bn&&e.has("OES_texture_half_float_linear")===false))return;if(_.anisotropy>1||n.get(_).__currentAnisotropy){const W=e.get("EXT_texture_filter_anisotropic");i.texParameterf(E,W.TEXTURE_MAX_ANISOTROPY_EXT,Math.min(_.anisotropy,r.getMaxAnisotropy()));n.get(_).__currentAnisotropy=_.anisotropy}}}function K(E,_){let G=false;if(E.__webglInit===void 0){E.__webglInit=true;_.addEventListener("dispose",z)}const W=_.source;let Z=m.get(W);if(Z===void 0){Z={};m.set(W,Z)}const $=H(_);if($!==E.__cacheKey){if(Z[$]===void 0){Z[$]={texture:i.createTexture(),usedTimes:0};o.memory.textures++;G=true}Z[$].usedTimes++;const Ie=Z[E.__cacheKey];if(Ie!==void 0){Z[E.__cacheKey].usedTimes--;if(Ie.usedTimes===0){y(_)}}E.__cacheKey=$;E.__webglTexture=Z[$].texture}return G}function he(E,_,G){let W=i.TEXTURE_2D;if(_.isDataArrayTexture||_.isCompressedArrayTexture)W=i.TEXTURE_2D_ARRAY;if(_.isData3DTexture)W=i.TEXTURE_3D;const Z=K(E,_);const $=_.source;t.bindTexture(W,E.__webglTexture,i.TEXTURE0+G);const Ie=n.get($);if($.version!==Ie.__version||Z===true){t.activeTexture(i.TEXTURE0+G);const ye=$e.getPrimaries($e.workingColorSpace);const ae=_.colorSpace===Rn?null:$e.getPrimaries(_.colorSpace);const oe=_.colorSpace===Rn||ye===ae?i.NONE:i.BROWSER_DEFAULT_WEBGL;i.pixelStorei(i.UNPACK_FLIP_Y_WEBGL,_.flipY);i.pixelStorei(i.UNPACK_PREMULTIPLY_ALPHA_WEBGL,_.premultiplyAlpha);i.pixelStorei(i.UNPACK_ALIGNMENT,_.unpackAlignment);i.pixelStorei(i.UNPACK_COLORSPACE_CONVERSION_WEBGL,oe);const De=A(_)&&d(_.image)===false;let Q=f(_.image,De,false,r.maxTextureSize);Q=ke(_,Q);const at=d(Q)||a,We=s.convert(_.format,_.colorSpace);let ve=s.convert(_.type),pe=D(_.internalFormat,We,ve,_.colorSpace,_.isVideoTexture);B(W,_,at);let me;const je=_.mipmaps;const Ue=a&&_.isVideoTexture!==true&&pe!==vu;const Qe=Ie.__version===void 0||Z===true;const w=$.dataReady;const le=C(_,Q,at);if(_.isDepthTexture){pe=i.DEPTH_COMPONENT;if(a){if(_.type===gn){pe=i.DEPTH_COMPONENT32F}else if(_.type===Dn){pe=i.DEPTH_COMPONENT24}else if(_.type===ai){pe=i.DEPTH24_STENCIL8}else{pe=i.DEPTH_COMPONENT16}}else{if(_.type===gn){console.error("WebGLRenderer: Floating point depth texture requires WebGL2.")}}if(_.format===oi&&pe===i.DEPTH_COMPONENT){if(_.type!==bo&&_.type!==Dn){console.warn("THREE.WebGLRenderer: Use UnsignedShortType or UnsignedIntType for DepthFormat DepthTexture.");_.type=Dn;ve=s.convert(_.type)}}if(_.format===Qi&&pe===i.DEPTH_COMPONENT){pe=i.DEPTH_STENCIL;if(_.type!==ai){console.warn("THREE.WebGLRenderer: Use UnsignedInt248Type for DepthStencilFormat DepthTexture.");_.type=ai;ve=s.convert(_.type)}}if(Qe){if(Ue){t.texStorage2D(i.TEXTURE_2D,1,pe,Q.width,Q.height)}else{t.texImage2D(i.TEXTURE_2D,0,pe,Q.width,Q.height,0,We,ve,null)}}}else if(_.isDataTexture){if(je.length>0&&at){if(Ue&&Qe){t.texStorage2D(i.TEXTURE_2D,le,pe,je[0].width,je[0].height)}for(let I=0,ne=je.length;I<ne;I++){me=je[I];if(Ue){if(w){t.texSubImage2D(i.TEXTURE_2D,I,0,0,me.width,me.height,We,ve,me.data)}}else{t.texImage2D(i.TEXTURE_2D,I,pe,me.width,me.height,0,We,ve,me.data)}}_.generateMipmaps=false}else{if(Ue){if(Qe){t.texStorage2D(i.TEXTURE_2D,le,pe,Q.width,Q.height)}if(w){t.texSubImage2D(i.TEXTURE_2D,0,0,0,Q.width,Q.height,We,ve,Q.data)}}else{t.texImage2D(i.TEXTURE_2D,0,pe,Q.width,Q.height,0,We,ve,Q.data)}}}else if(_.isCompressedTexture){if(_.isCompressedArrayTexture){if(Ue&&Qe){t.texStorage3D(i.TEXTURE_2D_ARRAY,le,pe,je[0].width,je[0].height,Q.depth)}for(let I=0,ne=je.length;I<ne;I++){me=je[I];if(_.format!==Xt){if(We!==null){if(Ue){if(w){t.compressedTexSubImage3D(i.TEXTURE_2D_ARRAY,I,0,0,0,me.width,me.height,Q.depth,We,me.data,0,0)}}else{t.compressedTexImage3D(i.TEXTURE_2D_ARRAY,I,pe,me.width,me.height,Q.depth,0,me.data,0,0)}}else{console.warn("THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .uploadTexture()")}}else{if(Ue){if(w){t.texSubImage3D(i.TEXTURE_2D_ARRAY,I,0,0,0,me.width,me.height,Q.depth,We,ve,me.data)}}else{t.texImage3D(i.TEXTURE_2D_ARRAY,I,pe,me.width,me.height,Q.depth,0,We,ve,me.data)}}}}else{if(Ue&&Qe){t.texStorage2D(i.TEXTURE_2D,le,pe,je[0].width,je[0].height)}for(let I=0,ne=je.length;I<ne;I++){me=je[I];if(_.format!==Xt){if(We!==null){if(Ue){if(w){t.compressedTexSubImage2D(i.TEXTURE_2D,I,0,0,me.width,me.height,We,me.data)}}else{t.compressedTexImage2D(i.TEXTURE_2D,I,pe,me.width,me.height,0,me.data)}}else{console.warn("THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .uploadTexture()")}}else{if(Ue){if(w){t.texSubImage2D(i.TEXTURE_2D,I,0,0,me.width,me.height,We,ve,me.data)}}else{t.texImage2D(i.TEXTURE_2D,I,pe,me.width,me.height,0,We,ve,me.data)}}}}}else if(_.isDataArrayTexture){if(Ue){if(Qe){t.texStorage3D(i.TEXTURE_2D_ARRAY,le,pe,Q.width,Q.height,Q.depth)}if(w){t.texSubImage3D(i.TEXTURE_2D_ARRAY,0,0,0,0,Q.width,Q.height,Q.depth,We,ve,Q.data)}}else{t.texImage3D(i.TEXTURE_2D_ARRAY,0,pe,Q.width,Q.height,Q.depth,0,We,ve,Q.data)}}else if(_.isData3DTexture){if(Ue){if(Qe){t.texStorage3D(i.TEXTURE_3D,le,pe,Q.width,Q.height,Q.depth)}if(w){t.texSubImage3D(i.TEXTURE_3D,0,0,0,0,Q.width,Q.height,Q.depth,We,ve,Q.data)}}else{t.texImage3D(i.TEXTURE_3D,0,pe,Q.width,Q.height,Q.depth,0,We,ve,Q.data)}}else if(_.isFramebufferTexture){if(Qe){if(Ue){t.texStorage2D(i.TEXTURE_2D,le,pe,Q.width,Q.height)}else{let I=Q.width,ne=Q.height;for(let ce=0;ce<le;ce++){t.texImage2D(i.TEXTURE_2D,ce,pe,I,ne,0,We,ve,null);I>>=1;ne>>=1}}}}else{if(je.length>0&&at){if(Ue&&Qe){const I=rt(je[0]);t.texStorage2D(i.TEXTURE_2D,le,pe,I.width,I.height)}for(let I=0,ne=je.length;I<ne;I++){me=je[I];if(Ue){if(w){t.texSubImage2D(i.TEXTURE_2D,I,0,0,We,ve,me)}}else{t.texImage2D(i.TEXTURE_2D,I,pe,We,ve,me)}}_.generateMipmaps=false}else{if(Ue){if(Qe){const I=rt(Q);t.texStorage2D(i.TEXTURE_2D,le,pe,I.width,I.height)}if(w){t.texSubImage2D(i.TEXTURE_2D,0,0,0,We,ve,Q)}}else{t.texImage2D(i.TEXTURE_2D,0,pe,We,ve,Q)}}}if(M(_,at)){T(W)}Ie.__version=$.version;if(_.onUpdate)_.onUpdate(_)}E.__version=_.version}function Ae(E,_,G){if(_.image.length!==6)return;const W=K(E,_);const Z=_.source;t.bindTexture(i.TEXTURE_CUBE_MAP,E.__webglTexture,i.TEXTURE0+G);const $=n.get(Z);if(Z.version!==$.__version||W===true){t.activeTexture(i.TEXTURE0+G);const Ie=$e.getPrimaries($e.workingColorSpace);const ye=_.colorSpace===Rn?null:$e.getPrimaries(_.colorSpace);const ae=_.colorSpace===Rn||Ie===ye?i.NONE:i.BROWSER_DEFAULT_WEBGL;i.pixelStorei(i.UNPACK_FLIP_Y_WEBGL,_.flipY);i.pixelStorei(i.UNPACK_PREMULTIPLY_ALPHA_WEBGL,_.premultiplyAlpha);i.pixelStorei(i.UNPACK_ALIGNMENT,_.unpackAlignment);i.pixelStorei(i.UNPACK_COLORSPACE_CONVERSION_WEBGL,ae);const oe=_.isCompressedTexture||_.image[0].isCompressedTexture;const De=_.image[0]&&_.image[0].isDataTexture;const Q=[];for(let I=0;I<6;I++){if(!oe&&!De){Q[I]=f(_.image[I],false,true,r.maxCubemapSize)}else{Q[I]=De?_.image[I].image:_.image[I]}Q[I]=ke(_,Q[I])}const at=Q[0],We=d(at)||a,ve=s.convert(_.format,_.colorSpace),pe=s.convert(_.type),me=D(_.internalFormat,ve,pe,_.colorSpace);const je=a&&_.isVideoTexture!==true;const Ue=$.__version===void 0||W===true;const Qe=Z.dataReady;let w=C(_,at,We);B(i.TEXTURE_CUBE_MAP,_,We);let le;if(oe){if(je&&Ue){t.texStorage2D(i.TEXTURE_CUBE_MAP,w,me,at.width,at.height)}for(let I=0;I<6;I++){le=Q[I].mipmaps;for(let ne=0;ne<le.length;ne++){const ce=le[ne];if(_.format!==Xt){if(ve!==null){if(je){if(Qe){t.compressedTexSubImage2D(i.TEXTURE_CUBE_MAP_POSITIVE_X+I,ne,0,0,ce.width,ce.height,ve,ce.data)}}else{t.compressedTexImage2D(i.TEXTURE_CUBE_MAP_POSITIVE_X+I,ne,me,ce.width,ce.height,0,ce.data)}}else{console.warn("THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .setTextureCube()")}}else{if(je){if(Qe){t.texSubImage2D(i.TEXTURE_CUBE_MAP_POSITIVE_X+I,ne,0,0,ce.width,ce.height,ve,pe,ce.data)}}else{t.texImage2D(i.TEXTURE_CUBE_MAP_POSITIVE_X+I,ne,me,ce.width,ce.height,0,ve,pe,ce.data)}}}}}else{le=_.mipmaps;if(je&&Ue){if(le.length>0)w++;const I=rt(Q[0]);t.texStorage2D(i.TEXTURE_CUBE_MAP,w,me,I.width,I.height)}for(let I=0;I<6;I++){if(De){if(je){if(Qe){t.texSubImage2D(i.TEXTURE_CUBE_MAP_POSITIVE_X+I,0,0,0,Q[I].width,Q[I].height,ve,pe,Q[I].data)}}else{t.texImage2D(i.TEXTURE_CUBE_MAP_POSITIVE_X+I,0,me,Q[I].width,Q[I].height,0,ve,pe,Q[I].data)}for(let ne=0;ne<le.length;ne++){const ce=le[ne];const Xe=ce.image[I].image;if(je){if(Qe){t.texSubImage2D(i.TEXTURE_CUBE_MAP_POSITIVE_X+I,ne+1,0,0,Xe.width,Xe.height,ve,pe,Xe.data)}}else{t.texImage2D(i.TEXTURE_CUBE_MAP_POSITIVE_X+I,ne+1,me,Xe.width,Xe.height,0,ve,pe,Xe.data)}}}else{if(je){if(Qe){t.texSubImage2D(i.TEXTURE_CUBE_MAP_POSITIVE_X+I,0,0,0,ve,pe,Q[I])}}else{t.texImage2D(i.TEXTURE_CUBE_MAP_POSITIVE_X+I,0,me,ve,pe,Q[I])}for(let ne=0;ne<le.length;ne++){const ce=le[ne];if(je){if(Qe){t.texSubImage2D(i.TEXTURE_CUBE_MAP_POSITIVE_X+I,ne+1,0,0,ve,pe,ce.image[I])}}else{t.texImage2D(i.TEXTURE_CUBE_MAP_POSITIVE_X+I,ne+1,me,ve,pe,ce.image[I])}}}}}if(M(_,We)){T(i.TEXTURE_CUBE_MAP)}$.__version=Z.version;if(_.onUpdate)_.onUpdate(_)}E.__version=_.version}function ge(E,_,G,W,Z,$){const Ie=s.convert(G.format,G.colorSpace);const ye=s.convert(G.type);const ae=D(G.internalFormat,Ie,ye,G.colorSpace);const oe=n.get(_);if(!oe.__hasExternalTextures){const De=Math.max(1,_.width>>$);const Q=Math.max(1,_.height>>$);if(Z===i.TEXTURE_3D||Z===i.TEXTURE_2D_ARRAY){t.texImage3D(Z,$,ae,De,Q,_.depth,0,Ie,ye,null)}else{t.texImage2D(Z,$,ae,De,Q,0,Ie,ye,null)}}t.bindFramebuffer(i.FRAMEBUFFER,E);if(qe(_)){l.framebufferTexture2DMultisampleEXT(i.FRAMEBUFFER,W,Z,n.get(G).__webglTexture,0,Ee(_))}else if(Z===i.TEXTURE_2D||Z>=i.TEXTURE_CUBE_MAP_POSITIVE_X&&Z<=i.TEXTURE_CUBE_MAP_NEGATIVE_Z){i.framebufferTexture2D(i.FRAMEBUFFER,W,Z,n.get(G).__webglTexture,$)}t.bindFramebuffer(i.FRAMEBUFFER,null)}function fe(E,_,G){i.bindRenderbuffer(i.RENDERBUFFER,E);if(_.depthBuffer&&!_.stencilBuffer){let W=a===true?i.DEPTH_COMPONENT24:i.DEPTH_COMPONENT16;if(G||qe(_)){const Z=_.depthTexture;if(Z&&Z.isDepthTexture){if(Z.type===gn){W=i.DEPTH_COMPONENT32F}else if(Z.type===Dn){W=i.DEPTH_COMPONENT24}}const $=Ee(_);if(qe(_)){l.renderbufferStorageMultisampleEXT(i.RENDERBUFFER,$,W,_.width,_.height)}else{i.renderbufferStorageMultisample(i.RENDERBUFFER,$,W,_.width,_.height)}}else{i.renderbufferStorage(i.RENDERBUFFER,W,_.width,_.height)}i.framebufferRenderbuffer(i.FRAMEBUFFER,i.DEPTH_ATTACHMENT,i.RENDERBUFFER,E)}else if(_.depthBuffer&&_.stencilBuffer){const W=Ee(_);if(G&&qe(_)===false){i.renderbufferStorageMultisample(i.RENDERBUFFER,W,i.DEPTH24_STENCIL8,_.width,_.height)}else if(qe(_)){l.renderbufferStorageMultisampleEXT(i.RENDERBUFFER,W,i.DEPTH24_STENCIL8,_.width,_.height)}else{i.renderbufferStorage(i.RENDERBUFFER,i.DEPTH_STENCIL,_.width,_.height)}i.framebufferRenderbuffer(i.FRAMEBUFFER,i.DEPTH_STENCIL_ATTACHMENT,i.RENDERBUFFER,E)}else{const W=_.textures;for(let Z=0;Z<W.length;Z++){const $=W[Z];const Ie=s.convert($.format,$.colorSpace);const ye=s.convert($.type);const ae=D($.internalFormat,Ie,ye,$.colorSpace);const oe=Ee(_);if(G&&qe(_)===false){i.renderbufferStorageMultisample(i.RENDERBUFFER,oe,ae,_.width,_.height)}else if(qe(_)){l.renderbufferStorageMultisampleEXT(i.RENDERBUFFER,oe,ae,_.width,_.height)}else{i.renderbufferStorage(i.RENDERBUFFER,ae,_.width,_.height)}}}i.bindRenderbuffer(i.RENDERBUFFER,null)}function Ye(E,_){const G=_&&_.isWebGLCubeRenderTarget;if(G)throw new Error("Depth Texture with cube render targets is not supported");t.bindFramebuffer(i.FRAMEBUFFER,E);if(!(_.depthTexture&&_.depthTexture.isDepthTexture)){throw new Error("renderTarget.depthTexture must be an instance of THREE.DepthTexture")}if(!n.get(_.depthTexture).__webglTexture||_.depthTexture.image.width!==_.width||_.depthTexture.image.height!==_.height){_.depthTexture.image.width=_.width;_.depthTexture.image.height=_.height;_.depthTexture.needsUpdate=true}j(_.depthTexture,0);const W=n.get(_.depthTexture).__webglTexture;const Z=Ee(_);if(_.depthTexture.format===oi){if(qe(_)){l.framebufferTexture2DMultisampleEXT(i.FRAMEBUFFER,i.DEPTH_ATTACHMENT,i.TEXTURE_2D,W,0,Z)}else{i.framebufferTexture2D(i.FRAMEBUFFER,i.DEPTH_ATTACHMENT,i.TEXTURE_2D,W,0)}}else if(_.depthTexture.format===Qi){if(qe(_)){l.framebufferTexture2DMultisampleEXT(i.FRAMEBUFFER,i.DEPTH_STENCIL_ATTACHMENT,i.TEXTURE_2D,W,0,Z)}else{i.framebufferTexture2D(i.FRAMEBUFFER,i.DEPTH_STENCIL_ATTACHMENT,i.TEXTURE_2D,W,0)}}else{throw new Error("Unknown depthTexture format")}}function be(E){const _=n.get(E);const G=E.isWebGLCubeRenderTarget===true;if(E.depthTexture&&!_.__autoAllocateDepthBuffer){if(G)throw new Error("target.depthTexture not supported in Cube render targets");Ye(_.__webglFramebuffer,E)}else{if(G){_.__webglDepthbuffer=[];for(let W=0;W<6;W++){t.bindFramebuffer(i.FRAMEBUFFER,_.__webglFramebuffer[W]);_.__webglDepthbuffer[W]=i.createRenderbuffer();fe(_.__webglDepthbuffer[W],E,false)}}else{t.bindFramebuffer(i.FRAMEBUFFER,_.__webglFramebuffer);_.__webglDepthbuffer=i.createRenderbuffer();fe(_.__webglDepthbuffer,E,false)}}t.bindFramebuffer(i.FRAMEBUFFER,null)}function U(E,_,G){const W=n.get(E);if(_!==void 0){ge(W.__webglFramebuffer,E,E.texture,i.COLOR_ATTACHMENT0,i.TEXTURE_2D,0)}if(G!==void 0){be(E)}}function ft(E){const _=E.texture;const G=n.get(E);const W=n.get(_);E.addEventListener("dispose",ee);const Z=E.textures;const $=E.isWebGLCubeRenderTarget===true;const Ie=Z.length>1;const ye=d(E)||a;if(!Ie){if(W.__webglTexture===void 0){W.__webglTexture=i.createTexture()}W.__version=_.version;o.memory.textures++}if($){G.__webglFramebuffer=[];for(let ae=0;ae<6;ae++){if(a&&_.mipmaps&&_.mipmaps.length>0){G.__webglFramebuffer[ae]=[];for(let oe=0;oe<_.mipmaps.length;oe++){G.__webglFramebuffer[ae][oe]=i.createFramebuffer()}}else{G.__webglFramebuffer[ae]=i.createFramebuffer()}}}else{if(a&&_.mipmaps&&_.mipmaps.length>0){G.__webglFramebuffer=[];for(let ae=0;ae<_.mipmaps.length;ae++){G.__webglFramebuffer[ae]=i.createFramebuffer()}}else{G.__webglFramebuffer=i.createFramebuffer()}if(Ie){if(r.drawBuffers){for(let ae=0,oe=Z.length;ae<oe;ae++){const De=n.get(Z[ae]);if(De.__webglTexture===void 0){De.__webglTexture=i.createTexture();o.memory.textures++}}}else{console.warn("THREE.WebGLRenderer: WebGLMultipleRenderTargets can only be used with WebGL2 or WEBGL_draw_buffers extension.")}}if(a&&E.samples>0&&qe(E)===false){G.__webglMultisampledFramebuffer=i.createFramebuffer();G.__webglColorRenderbuffer=[];t.bindFramebuffer(i.FRAMEBUFFER,G.__webglMultisampledFramebuffer);for(let ae=0;ae<Z.length;ae++){const oe=Z[ae];G.__webglColorRenderbuffer[ae]=i.createRenderbuffer();i.bindRenderbuffer(i.RENDERBUFFER,G.__webglColorRenderbuffer[ae]);const De=s.convert(oe.format,oe.colorSpace);const Q=s.convert(oe.type);const at=D(oe.internalFormat,De,Q,oe.colorSpace,E.isXRRenderTarget===true);const We=Ee(E);i.renderbufferStorageMultisample(i.RENDERBUFFER,We,at,E.width,E.height);i.framebufferRenderbuffer(i.FRAMEBUFFER,i.COLOR_ATTACHMENT0+ae,i.RENDERBUFFER,G.__webglColorRenderbuffer[ae])}i.bindRenderbuffer(i.RENDERBUFFER,null);if(E.depthBuffer){G.__webglDepthRenderbuffer=i.createRenderbuffer();fe(G.__webglDepthRenderbuffer,E,true)}t.bindFramebuffer(i.FRAMEBUFFER,null)}}if($){t.bindTexture(i.TEXTURE_CUBE_MAP,W.__webglTexture);B(i.TEXTURE_CUBE_MAP,_,ye);for(let ae=0;ae<6;ae++){if(a&&_.mipmaps&&_.mipmaps.length>0){for(let oe=0;oe<_.mipmaps.length;oe++){ge(G.__webglFramebuffer[ae][oe],E,_,i.COLOR_ATTACHMENT0,i.TEXTURE_CUBE_MAP_POSITIVE_X+ae,oe)}}else{ge(G.__webglFramebuffer[ae],E,_,i.COLOR_ATTACHMENT0,i.TEXTURE_CUBE_MAP_POSITIVE_X+ae,0)}}if(M(_,ye)){T(i.TEXTURE_CUBE_MAP)}t.unbindTexture()}else if(Ie){for(let ae=0,oe=Z.length;ae<oe;ae++){const De=Z[ae];const Q=n.get(De);t.bindTexture(i.TEXTURE_2D,Q.__webglTexture);B(i.TEXTURE_2D,De,ye);ge(G.__webglFramebuffer,E,De,i.COLOR_ATTACHMENT0+ae,i.TEXTURE_2D,0);if(M(De,ye)){T(i.TEXTURE_2D)}}t.unbindTexture()}else{let ae=i.TEXTURE_2D;if(E.isWebGL3DRenderTarget||E.isWebGLArrayRenderTarget){if(a){ae=E.isWebGL3DRenderTarget?i.TEXTURE_3D:i.TEXTURE_2D_ARRAY}else{console.error("THREE.WebGLTextures: THREE.Data3DTexture and THREE.DataArrayTexture only supported with WebGL2.")}}t.bindTexture(ae,W.__webglTexture);B(ae,_,ye);if(a&&_.mipmaps&&_.mipmaps.length>0){for(let oe=0;oe<_.mipmaps.length;oe++){ge(G.__webglFramebuffer[oe],E,_,i.COLOR_ATTACHMENT0,ae,oe)}}else{ge(G.__webglFramebuffer,E,_,i.COLOR_ATTACHMENT0,ae,0)}if(M(_,ye)){T(ae)}t.unbindTexture()}if(E.depthBuffer){be(E)}}function Se(E){const _=d(E)||a;const G=E.textures;for(let W=0,Z=G.length;W<Z;W++){const $=G[W];if(M($,_)){const Ie=E.isWebGLCubeRenderTarget?i.TEXTURE_CUBE_MAP:i.TEXTURE_2D;const ye=n.get($).__webglTexture;t.bindTexture(Ie,ye);T(Ie);t.unbindTexture()}}}function He(E){if(a&&E.samples>0&&qe(E)===false){const _=E.textures;const G=E.width;const W=E.height;let Z=i.COLOR_BUFFER_BIT;const $=[];const Ie=E.stencilBuffer?i.DEPTH_STENCIL_ATTACHMENT:i.DEPTH_ATTACHMENT;const ye=n.get(E);const ae=_.length>1;if(ae){for(let oe=0;oe<_.length;oe++){t.bindFramebuffer(i.FRAMEBUFFER,ye.__webglMultisampledFramebuffer);i.framebufferRenderbuffer(i.FRAMEBUFFER,i.COLOR_ATTACHMENT0+oe,i.RENDERBUFFER,null);t.bindFramebuffer(i.FRAMEBUFFER,ye.__webglFramebuffer);i.framebufferTexture2D(i.DRAW_FRAMEBUFFER,i.COLOR_ATTACHMENT0+oe,i.TEXTURE_2D,null,0)}}t.bindFramebuffer(i.READ_FRAMEBUFFER,ye.__webglMultisampledFramebuffer);t.bindFramebuffer(i.DRAW_FRAMEBUFFER,ye.__webglFramebuffer);for(let oe=0;oe<_.length;oe++){$.push(i.COLOR_ATTACHMENT0+oe);if(E.depthBuffer){$.push(Ie)}const De=ye.__ignoreDepthValues!==void 0?ye.__ignoreDepthValues:false;if(De===false){if(E.depthBuffer)Z|=i.DEPTH_BUFFER_BIT;if(E.stencilBuffer)Z|=i.STENCIL_BUFFER_BIT}if(ae){i.framebufferRenderbuffer(i.READ_FRAMEBUFFER,i.COLOR_ATTACHMENT0,i.RENDERBUFFER,ye.__webglColorRenderbuffer[oe])}if(De===true){i.invalidateFramebuffer(i.READ_FRAMEBUFFER,[Ie]);i.invalidateFramebuffer(i.DRAW_FRAMEBUFFER,[Ie])}if(ae){const Q=n.get(_[oe]).__webglTexture;i.framebufferTexture2D(i.DRAW_FRAMEBUFFER,i.COLOR_ATTACHMENT0,i.TEXTURE_2D,Q,0)}i.blitFramebuffer(0,0,G,W,0,0,G,W,Z,i.NEAREST);if(c){i.invalidateFramebuffer(i.READ_FRAMEBUFFER,$)}}t.bindFramebuffer(i.READ_FRAMEBUFFER,null);t.bindFramebuffer(i.DRAW_FRAMEBUFFER,null);if(ae){for(let oe=0;oe<_.length;oe++){t.bindFramebuffer(i.FRAMEBUFFER,ye.__webglMultisampledFramebuffer);i.framebufferRenderbuffer(i.FRAMEBUFFER,i.COLOR_ATTACHMENT0+oe,i.RENDERBUFFER,ye.__webglColorRenderbuffer[oe]);const De=n.get(_[oe]).__webglTexture;t.bindFramebuffer(i.FRAMEBUFFER,ye.__webglFramebuffer);i.framebufferTexture2D(i.DRAW_FRAMEBUFFER,i.COLOR_ATTACHMENT0+oe,i.TEXTURE_2D,De,0)}}t.bindFramebuffer(i.DRAW_FRAMEBUFFER,ye.__webglMultisampledFramebuffer)}}function Ee(E){return Math.min(r.maxSamples,E.samples)}function qe(E){const _=n.get(E);return a&&E.samples>0&&e.has("WEBGL_multisampled_render_to_texture")===true&&_.__useRenderToTexture!==false}function ze(E){const _=o.render.frame;if(h.get(E)!==_){h.set(E,_);E.update()}}function ke(E,_){const G=E.colorSpace;const W=E.format;const Z=E.type;if(E.isCompressedTexture===true||E.isVideoTexture===true||E.format===ao)return _;if(G!==Gn&&G!==Rn){if($e.getTransfer(G)===Je){if(a===false){if(e.has("EXT_sRGB")===true&&W===Xt){E.format=ao;E.minFilter=Ct;E.generateMipmaps=false}else{_=Eu.sRGBToLinear(_)}}else{if(W!==Xt||Z!==Nn){console.warn("THREE.WebGLTextures: sRGB encoded textures have to use RGBAFormat and UnsignedByteType.")}}}else{console.error("THREE.WebGLTextures: Unsupported texture color space:",G)}}return _}function rt(E){if(typeof HTMLImageElement!=="undefined"&&E instanceof HTMLImageElement){u.width=E.naturalWidth||E.width;u.height=E.naturalHeight||E.height}else if(typeof VideoFrame!=="undefined"&&E instanceof VideoFrame){u.width=E.displayWidth;u.height=E.displayHeight}else{u.width=E.width;u.height=E.height}return u}this.allocateTextureUnit=k;this.resetTextureUnits=R;this.setTexture2D=j;this.setTexture2DArray=V;this.setTexture3D=X;this.setTextureCube=Y;this.rebindTextures=U;this.setupRenderTarget=ft;this.updateRenderTargetMipmap=Se;this.updateMultisampleRenderTarget=He;this.setupDepthRenderbuffer=be;this.setupFrameBufferTexture=ge;this.useMultisampledRTT=qe}function Pg(i,e,t){const n=t.isWebGL2;function r(s,o=Rn){let a;const l=$e.getTransfer(o);if(s===Nn)return i.UNSIGNED_BYTE;if(s===fu)return i.UNSIGNED_SHORT_4_4_4_4;if(s===pu)return i.UNSIGNED_SHORT_5_5_5_1;if(s===ud)return i.BYTE;if(s===hd)return i.SHORT;if(s===bo)return i.UNSIGNED_SHORT;if(s===du)return i.INT;if(s===Dn)return i.UNSIGNED_INT;if(s===gn)return i.FLOAT;if(s===Bn){if(n)return i.HALF_FLOAT;a=e.get("OES_texture_half_float");if(a!==null){return a.HALF_FLOAT_OES}else{return null}}if(s===dd)return i.ALPHA;if(s===Xt)return i.RGBA;if(s===fd)return i.LUMINANCE;if(s===pd)return i.LUMINANCE_ALPHA;if(s===oi)return i.DEPTH_COMPONENT;if(s===Qi)return i.DEPTH_STENCIL;if(s===ao){a=e.get("EXT_sRGB");if(a!==null){return a.SRGB_ALPHA_EXT}else{return null}}if(s===md)return i.RED;if(s===mu)return i.RED_INTEGER;if(s===_d)return i.RG;if(s===_u)return i.RG_INTEGER;if(s===gu)return i.RGBA_INTEGER;if(s===aa||s===oa||s===la||s===ca){if(l===Je){a=e.get("WEBGL_compressed_texture_s3tc_srgb");if(a!==null){if(s===aa)return a.COMPRESSED_SRGB_S3TC_DXT1_EXT;if(s===oa)return a.COMPRESSED_SRGB_ALPHA_S3TC_DXT1_EXT;if(s===la)return a.COMPRESSED_SRGB_ALPHA_S3TC_DXT3_EXT;if(s===ca)return a.COMPRESSED_SRGB_ALPHA_S3TC_DXT5_EXT}else{return null}}else{a=e.get("WEBGL_compressed_texture_s3tc");if(a!==null){if(s===aa)return a.COMPRESSED_RGB_S3TC_DXT1_EXT;if(s===oa)return a.COMPRESSED_RGBA_S3TC_DXT1_EXT;if(s===la)return a.COMPRESSED_RGBA_S3TC_DXT3_EXT;if(s===ca)return a.COMPRESSED_RGBA_S3TC_DXT5_EXT}else{return null}}}if(s===rl||s===sl||s===al||s===ol){a=e.get("WEBGL_compressed_texture_pvrtc");if(a!==null){if(s===rl)return a.COMPRESSED_RGB_PVRTC_4BPPV1_IMG;if(s===sl)return a.COMPRESSED_RGB_PVRTC_2BPPV1_IMG;if(s===al)return a.COMPRESSED_RGBA_PVRTC_4BPPV1_IMG;if(s===ol)return a.COMPRESSED_RGBA_PVRTC_2BPPV1_IMG}else{return null}}if(s===vu){a=e.get("WEBGL_compressed_texture_etc1");if(a!==null){return a.COMPRESSED_RGB_ETC1_WEBGL}else{return null}}if(s===ll||s===cl){a=e.get("WEBGL_compressed_texture_etc");if(a!==null){if(s===ll)return l===Je?a.COMPRESSED_SRGB8_ETC2:a.COMPRESSED_RGB8_ETC2;if(s===cl)return l===Je?a.COMPRESSED_SRGB8_ALPHA8_ETC2_EAC:a.COMPRESSED_RGBA8_ETC2_EAC}else{return null}}if(s===ul||s===hl||s===dl||s===fl||s===pl||s===ml||s===_l||s===gl||s===vl||s===xl||s===Sl||s===Ml||s===El||s===yl){a=e.get("WEBGL_compressed_texture_astc");if(a!==null){if(s===ul)return l===Je?a.COMPRESSED_SRGB8_ALPHA8_ASTC_4x4_KHR:a.COMPRESSED_RGBA_ASTC_4x4_KHR;if(s===hl)return l===Je?a.COMPRESSED_SRGB8_ALPHA8_ASTC_5x4_KHR:a.COMPRESSED_RGBA_ASTC_5x4_KHR;if(s===dl)return l===Je?a.COMPRESSED_SRGB8_ALPHA8_ASTC_5x5_KHR:a.COMPRESSED_RGBA_ASTC_5x5_KHR;if(s===fl)return l===Je?a.COMPRESSED_SRGB8_ALPHA8_ASTC_6x5_KHR:a.COMPRESSED_RGBA_ASTC_6x5_KHR;if(s===pl)return l===Je?a.COMPRESSED_SRGB8_ALPHA8_ASTC_6x6_KHR:a.COMPRESSED_RGBA_ASTC_6x6_KHR;if(s===ml)return l===Je?a.COMPRESSED_SRGB8_ALPHA8_ASTC_8x5_KHR:a.COMPRESSED_RGBA_ASTC_8x5_KHR;if(s===_l)return l===Je?a.COMPRESSED_SRGB8_ALPHA8_ASTC_8x6_KHR:a.COMPRESSED_RGBA_ASTC_8x6_KHR;if(s===gl)return l===Je?a.COMPRESSED_SRGB8_ALPHA8_ASTC_8x8_KHR:a.COMPRESSED_RGBA_ASTC_8x8_KHR;if(s===vl)return l===Je?a.COMPRESSED_SRGB8_ALPHA8_ASTC_10x5_KHR:a.COMPRESSED_RGBA_ASTC_10x5_KHR;if(s===xl)return l===Je?a.COMPRESSED_SRGB8_ALPHA8_ASTC_10x6_KHR:a.COMPRESSED_RGBA_ASTC_10x6_KHR;if(s===Sl)return l===Je?a.COMPRESSED_SRGB8_ALPHA8_ASTC_10x8_KHR:a.COMPRESSED_RGBA_ASTC_10x8_KHR;if(s===Ml)return l===Je?a.COMPRESSED_SRGB8_ALPHA8_ASTC_10x10_KHR:a.COMPRESSED_RGBA_ASTC_10x10_KHR;if(s===El)return l===Je?a.COMPRESSED_SRGB8_ALPHA8_ASTC_12x10_KHR:a.COMPRESSED_RGBA_ASTC_12x10_KHR;if(s===yl)return l===Je?a.COMPRESSED_SRGB8_ALPHA8_ASTC_12x12_KHR:a.COMPRESSED_RGBA_ASTC_12x12_KHR}else{return null}}if(s===ua||s===Tl||s===Al){a=e.get("EXT_texture_compression_bptc");if(a!==null){if(s===ua)return l===Je?a.COMPRESSED_SRGB_ALPHA_BPTC_UNORM_EXT:a.COMPRESSED_RGBA_BPTC_UNORM_EXT;if(s===Tl)return a.COMPRESSED_RGB_BPTC_SIGNED_FLOAT_EXT;if(s===Al)return a.COMPRESSED_RGB_BPTC_UNSIGNED_FLOAT_EXT}else{return null}}if(s===gd||s===bl||s===Cl||s===wl){a=e.get("EXT_texture_compression_rgtc");if(a!==null){if(s===ua)return a.COMPRESSED_RED_RGTC1_EXT;if(s===bl)return a.COMPRESSED_SIGNED_RED_RGTC1_EXT;if(s===Cl)return a.COMPRESSED_RED_GREEN_RGTC2_EXT;if(s===wl)return a.COMPRESSED_SIGNED_RED_GREEN_RGTC2_EXT}else{return null}}if(s===ai){if(n)return i.UNSIGNED_INT_24_8;a=e.get("WEBGL_depth_texture");if(a!==null){return a.UNSIGNED_INT_24_8_WEBGL}else{return null}}return i[s]!==void 0?i[s]:null}return{convert:r}}class Dg extends zt{constructor(e=[]){super();this.isArrayCamera=true;this.cameras=e}}class _s extends mt{constructor(){super();this.isGroup=true;this.type="Group"}}const Ug={type:"move"};class Oa{constructor(){this._targetRay=null;this._grip=null;this._hand=null}getHandSpace(){if(this._hand===null){this._hand=new _s;this._hand.matrixAutoUpdate=false;this._hand.visible=false;this._hand.joints={};this._hand.inputState={pinching:false}}return this._hand}getTargetRaySpace(){if(this._targetRay===null){this._targetRay=new _s;this._targetRay.matrixAutoUpdate=false;this._targetRay.visible=false;this._targetRay.hasLinearVelocity=false;this._targetRay.linearVelocity=new L;this._targetRay.hasAngularVelocity=false;this._targetRay.angularVelocity=new L}return this._targetRay}getGripSpace(){if(this._grip===null){this._grip=new _s;this._grip.matrixAutoUpdate=false;this._grip.visible=false;this._grip.hasLinearVelocity=false;this._grip.linearVelocity=new L;this._grip.hasAngularVelocity=false;this._grip.angularVelocity=new L}return this._grip}dispatchEvent(e){if(this._targetRay!==null){this._targetRay.dispatchEvent(e)}if(this._grip!==null){this._grip.dispatchEvent(e)}if(this._hand!==null){this._hand.dispatchEvent(e)}return this}connect(e){if(e&&e.hand){const t=this._hand;if(t){for(const n of e.hand.values()){this._getHandJoint(t,n)}}}this.dispatchEvent({type:"connected",data:e});return this}disconnect(e){this.dispatchEvent({type:"disconnected",data:e});if(this._targetRay!==null){this._targetRay.visible=false}if(this._grip!==null){this._grip.visible=false}if(this._hand!==null){this._hand.visible=false}return this}update(e,t,n){let r=null;let s=null;let o=null;const a=this._targetRay;const l=this._grip;const c=this._hand;if(e&&t.session.visibilityState!=="visible-blurred"){if(c&&e.hand){o=true;for(const S of e.hand.values()){const f=t.getJointPose(S,n);const d=this._getHandJoint(c,S);if(f!==null){d.matrix.fromArray(f.transform.matrix);d.matrix.decompose(d.position,d.rotation,d.scale);d.matrixWorldNeedsUpdate=true;d.jointRadius=f.radius}d.visible=f!==null}const u=c.joints["index-finger-tip"];const h=c.joints["thumb-tip"];const p=u.position.distanceTo(h.position);const m=.02;const g=.005;if(c.inputState.pinching&&p>m+g){c.inputState.pinching=false;this.dispatchEvent({type:"pinchend",handedness:e.handedness,target:this})}else if(!c.inputState.pinching&&p<=m-g){c.inputState.pinching=true;this.dispatchEvent({type:"pinchstart",handedness:e.handedness,target:this})}}else{if(l!==null&&e.gripSpace){s=t.getPose(e.gripSpace,n);if(s!==null){l.matrix.fromArray(s.transform.matrix);l.matrix.decompose(l.position,l.rotation,l.scale);l.matrixWorldNeedsUpdate=true;if(s.linearVelocity){l.hasLinearVelocity=true;l.linearVelocity.copy(s.linearVelocity)}else{l.hasLinearVelocity=false}if(s.angularVelocity){l.hasAngularVelocity=true;l.angularVelocity.copy(s.angularVelocity)}else{l.hasAngularVelocity=false}}}}if(a!==null){r=t.getPose(e.targetRaySpace,n);if(r===null&&s!==null){r=s}if(r!==null){a.matrix.fromArray(r.transform.matrix);a.matrix.decompose(a.position,a.rotation,a.scale);a.matrixWorldNeedsUpdate=true;if(r.linearVelocity){a.hasLinearVelocity=true;a.linearVelocity.copy(r.linearVelocity)}else{a.hasLinearVelocity=false}if(r.angularVelocity){a.hasAngularVelocity=true;a.angularVelocity.copy(r.angularVelocity)}else{a.hasAngularVelocity=false}this.dispatchEvent(Ug)}}}if(a!==null){a.visible=r!==null}if(l!==null){l.visible=s!==null}if(c!==null){c.visible=o!==null}return this}_getHandJoint(e,t){if(e.joints[t.jointName]===void 0){const n=new _s;n.matrixAutoUpdate=false;n.visible=false;e.joints[t.jointName]=n;e.add(n)}return e.joints[t.jointName]}}const Ng=`
void main() {

	gl_Position = vec4( position, 1.0 );

}`;const Ig=`
uniform sampler2DArray depthColor;
uniform float depthWidth;
uniform float depthHeight;

void main() {

	vec2 coord = vec2( gl_FragCoord.x / depthWidth, gl_FragCoord.y / depthHeight );

	if ( coord.x >= 1.0 ) {

		gl_FragDepthEXT = texture( depthColor, vec3( coord.x - 1.0, coord.y, 1 ) ).r;

	} else {

		gl_FragDepthEXT = texture( depthColor, vec3( coord.x, coord.y, 0 ) ).r;

	}

}`;class Fg{constructor(){this.texture=null;this.mesh=null;this.depthNear=0;this.depthFar=0}init(e,t,n){if(this.texture===null){const r=new yt;const s=e.properties.get(r);s.__webglTexture=t.texture;if(t.depthNear!=n.depthNear||t.depthFar!=n.depthFar){this.depthNear=t.depthNear;this.depthFar=t.depthFar}this.texture=r}}render(e,t){if(this.texture!==null){if(this.mesh===null){const n=t.cameras[0].viewport;const r=new Dt({extensions:{fragDepth:true},vertexShader:Ng,fragmentShader:Ig,uniforms:{depthColor:{value:this.texture},depthWidth:{value:n.z},depthHeight:{value:n.w}}});this.mesh=new qt(new Hr(20,20),r)}e.render(this.mesh,t)}}reset(){this.texture=null;this.mesh=null}}class Og extends tr{constructor(e,t){super();const n=this;let r=null;let s=1;let o=null;let a="local-floor";let l=1;let c=null;let u=null;let h=null;let p=null;let m=null;let g=null;const S=new Fg;const f=t.getContextAttributes();let d=null;let A=null;const M=[];const T=[];const D=new Pe;let C=null;const b=new zt;b.layers.enable(1);b.viewport=new dt;const z=new zt;z.layers.enable(2);z.viewport=new dt;const ee=[b,z];const v=new Dg;v.layers.enable(1);v.layers.enable(2);let y=null;let te=null;this.cameraAutoUpdate=true;this.enabled=false;this.isPresenting=false;this.getController=function(B){let K=M[B];if(K===void 0){K=new Oa;M[B]=K}return K.getTargetRaySpace()};this.getControllerGrip=function(B){let K=M[B];if(K===void 0){K=new Oa;M[B]=K}return K.getGripSpace()};this.getHand=function(B){let K=M[B];if(K===void 0){K=new Oa;M[B]=K}return K.getHandSpace()};function J(B){const K=T.indexOf(B.inputSource);if(K===-1){return}const he=M[K];if(he!==void 0){he.update(B.inputSource,B.frame,c||o);he.dispatchEvent({type:B.type,data:B.inputSource})}}function R(){r.removeEventListener("select",J);r.removeEventListener("selectstart",J);r.removeEventListener("selectend",J);r.removeEventListener("squeeze",J);r.removeEventListener("squeezestart",J);r.removeEventListener("squeezeend",J);r.removeEventListener("end",R);r.removeEventListener("inputsourceschange",k);for(let B=0;B<M.length;B++){const K=T[B];if(K===null)continue;T[B]=null;M[B].disconnect(K)}y=null;te=null;S.reset();e.setRenderTarget(d);m=null;p=null;h=null;r=null;A=null;Re.stop();n.isPresenting=false;e.setPixelRatio(C);e.setSize(D.width,D.height,false);n.dispatchEvent({type:"sessionend"})}this.setFramebufferScaleFactor=function(B){s=B;if(n.isPresenting===true){console.warn("THREE.WebXRManager: Cannot change framebuffer scale while presenting.")}};this.setReferenceSpaceType=function(B){a=B;if(n.isPresenting===true){console.warn("THREE.WebXRManager: Cannot change reference space type while presenting.")}};this.getReferenceSpace=function(){return c||o};this.setReferenceSpace=function(B){c=B};this.getBaseLayer=function(){return p!==null?p:m};this.getBinding=function(){return h};this.getFrame=function(){return g};this.getSession=function(){return r};this.setSession=async function(B){r=B;if(r!==null){d=e.getRenderTarget();r.addEventListener("select",J);r.addEventListener("selectstart",J);r.addEventListener("selectend",J);r.addEventListener("squeeze",J);r.addEventListener("squeezestart",J);r.addEventListener("squeezeend",J);r.addEventListener("end",R);r.addEventListener("inputsourceschange",k);if(f.xrCompatible!==true){await t.makeXRCompatible()}C=e.getPixelRatio();e.getSize(D);if(r.renderState.layers===void 0||e.capabilities.isWebGL2===false){const K={antialias:r.renderState.layers===void 0?f.antialias:true,alpha:true,depth:f.depth,stencil:f.stencil,framebufferScaleFactor:s};m=new XRWebGLLayer(r,t,K);r.updateRenderState({baseLayer:m});e.setPixelRatio(1);e.setSize(m.framebufferWidth,m.framebufferHeight,false);A=new tn(m.framebufferWidth,m.framebufferHeight,{format:Xt,type:Nn,colorSpace:e.outputColorSpace,stencilBuffer:f.stencil})}else{let K=null;let he=null;let Ae=null;if(f.depth){Ae=f.stencil?t.DEPTH24_STENCIL8:t.DEPTH_COMPONENT24;K=f.stencil?Qi:oi;he=f.stencil?ai:Dn}const ge={colorFormat:t.RGBA8,depthFormat:Ae,scaleFactor:s};h=new XRWebGLBinding(r,t);p=h.createProjectionLayer(ge);r.updateRenderState({layers:[p]});e.setPixelRatio(1);e.setSize(p.textureWidth,p.textureHeight,false);A=new tn(p.textureWidth,p.textureHeight,{format:Xt,type:Nn,depthTexture:new Iu(p.textureWidth,p.textureHeight,he,void 0,void 0,void 0,void 0,void 0,void 0,K),stencilBuffer:f.stencil,colorSpace:e.outputColorSpace,samples:f.antialias?4:0});const fe=e.properties.get(A);fe.__ignoreDepthValues=p.ignoreDepthValues}A.isXRRenderTarget=true;this.setFoveation(l);c=null;o=await r.requestReferenceSpace(a);Re.setContext(r);Re.start();n.isPresenting=true;n.dispatchEvent({type:"sessionstart"})}};this.getEnvironmentBlendMode=function(){if(r!==null){return r.environmentBlendMode}};function k(B){for(let K=0;K<B.removed.length;K++){const he=B.removed[K];const Ae=T.indexOf(he);if(Ae>=0){T[Ae]=null;M[Ae].disconnect(he)}}for(let K=0;K<B.added.length;K++){const he=B.added[K];let Ae=T.indexOf(he);if(Ae===-1){for(let fe=0;fe<M.length;fe++){if(fe>=T.length){T.push(he);Ae=fe;break}else if(T[fe]===null){T[fe]=he;Ae=fe;break}}if(Ae===-1)break}const ge=M[Ae];if(ge){ge.connect(he)}}}const H=new L;const j=new L;function V(B,K,he){H.setFromMatrixPosition(K.matrixWorld);j.setFromMatrixPosition(he.matrixWorld);const Ae=H.distanceTo(j);const ge=K.projectionMatrix.elements;const fe=he.projectionMatrix.elements;const Ye=ge[14]/(ge[10]-1);const be=ge[14]/(ge[10]+1);const U=(ge[9]+1)/ge[5];const ft=(ge[9]-1)/ge[5];const Se=(ge[8]-1)/ge[0];const He=(fe[8]+1)/fe[0];const Ee=Ye*Se;const qe=Ye*He;const ze=Ae/(-Se+He);const ke=ze*-Se;K.matrixWorld.decompose(B.position,B.quaternion,B.scale);B.translateX(ke);B.translateZ(ze);B.matrixWorld.compose(B.position,B.quaternion,B.scale);B.matrixWorldInverse.copy(B.matrixWorld).invert();const rt=Ye+ze;const E=be+ze;const _=Ee-ke;const G=qe+(Ae-ke);const W=U*be/E*rt;const Z=ft*be/E*rt;B.projectionMatrix.makePerspective(_,G,W,Z,rt,E);B.projectionMatrixInverse.copy(B.projectionMatrix).invert()}function X(B,K){if(K===null){B.matrixWorld.copy(B.matrix)}else{B.matrixWorld.multiplyMatrices(K.matrixWorld,B.matrix)}B.matrixWorldInverse.copy(B.matrixWorld).invert()}this.updateCamera=function(B){if(r===null)return;if(S.texture!==null){B.near=S.depthNear;B.far=S.depthFar}v.near=z.near=b.near=B.near;v.far=z.far=b.far=B.far;if(y!==v.near||te!==v.far){r.updateRenderState({depthNear:v.near,depthFar:v.far});y=v.near;te=v.far;b.near=y;b.far=te;z.near=y;z.far=te;b.updateProjectionMatrix();z.updateProjectionMatrix();B.updateProjectionMatrix()}const K=B.parent;const he=v.cameras;X(v,K);for(let Ae=0;Ae<he.length;Ae++){X(he[Ae],K)}if(he.length===2){V(v,b,z)}else{v.projectionMatrix.copy(b.projectionMatrix)}Y(B,v,K)};function Y(B,K,he){if(he===null){B.matrix.copy(K.matrixWorld)}else{B.matrix.copy(he.matrixWorld);B.matrix.invert();B.matrix.multiply(K.matrixWorld)}B.matrix.decompose(B.position,B.quaternion,B.scale);B.updateMatrixWorld(true);B.projectionMatrix.copy(K.projectionMatrix);B.projectionMatrixInverse.copy(K.projectionMatrixInverse);if(B.isPerspectiveCamera){B.fov=oo*2*Math.atan(1/B.projectionMatrix.elements[5]);B.zoom=1}}this.getCamera=function(){return v};this.getFoveation=function(){if(p===null&&m===null){return void 0}return l};this.setFoveation=function(B){l=B;if(p!==null){p.fixedFoveation=B}if(m!==null&&m.fixedFoveation!==void 0){m.fixedFoveation=B}};this.hasDepthSensing=function(){return S.texture!==null};let se=null;function de(B,K){u=K.getViewerPose(c||o);g=K;if(u!==null){const he=u.views;if(m!==null){e.setRenderTargetFramebuffer(A,m.framebuffer);e.setRenderTarget(A)}let Ae=false;if(he.length!==v.cameras.length){v.cameras.length=0;Ae=true}for(let fe=0;fe<he.length;fe++){const Ye=he[fe];let be=null;if(m!==null){be=m.getViewport(Ye)}else{const ft=h.getViewSubImage(p,Ye);be=ft.viewport;if(fe===0){e.setRenderTargetTextures(A,ft.colorTexture,p.ignoreDepthValues?void 0:ft.depthStencilTexture);e.setRenderTarget(A)}}let U=ee[fe];if(U===void 0){U=new zt;U.layers.enable(fe);U.viewport=new dt;ee[fe]=U}U.matrix.fromArray(Ye.transform.matrix);U.matrix.decompose(U.position,U.quaternion,U.scale);U.projectionMatrix.fromArray(Ye.projectionMatrix);U.projectionMatrixInverse.copy(U.projectionMatrix).invert();U.viewport.set(be.x,be.y,be.width,be.height);if(fe===0){v.matrix.copy(U.matrix);v.matrix.decompose(v.position,v.quaternion,v.scale)}if(Ae===true){v.cameras.push(U)}}const ge=r.enabledFeatures;if(ge&&ge.includes("depth-sensing")){const fe=h.getDepthInformation(he[0]);if(fe&&fe.isValid&&fe.texture){S.init(e,fe,r.renderState)}}}for(let he=0;he<M.length;he++){const Ae=T[he];const ge=M[he];if(Ae!==null&&ge!==void 0){ge.update(Ae,K,c||o)}}S.render(e,v);if(se)se(B,K);if(K.detectedPlanes){n.dispatchEvent({type:"planesdetected",data:K})}g=null}const Re=new Nu;Re.setAnimationLoop(de);this.setAnimationLoop=function(B){se=B};this.dispose=function(){}}}const $n=new nn;const Bg=new nt;function zg(i,e){function t(f,d){if(f.matrixAutoUpdate===true){f.updateMatrix()}d.value.copy(f.matrix)}function n(f,d){d.color.getRGB(f.fogColor.value,Pu(i));if(d.isFog){f.fogNear.value=d.near;f.fogFar.value=d.far}else if(d.isFogExp2){f.fogDensity.value=d.density}}function r(f,d,A,M,T){if(d.isMeshBasicMaterial){s(f,d)}else if(d.isMeshLambertMaterial){s(f,d)}else if(d.isMeshToonMaterial){s(f,d);h(f,d)}else if(d.isMeshPhongMaterial){s(f,d);u(f,d)}else if(d.isMeshStandardMaterial){s(f,d);p(f,d);if(d.isMeshPhysicalMaterial){m(f,d,T)}}else if(d.isMeshMatcapMaterial){s(f,d);g(f,d)}else if(d.isMeshDepthMaterial){s(f,d)}else if(d.isMeshDistanceMaterial){s(f,d);S(f,d)}else if(d.isMeshNormalMaterial){s(f,d)}else if(d.isLineBasicMaterial){o(f,d);if(d.isLineDashedMaterial){a(f,d)}}else if(d.isPointsMaterial){l(f,d,A,M)}else if(d.isSpriteMaterial){c(f,d)}else if(d.isShadowMaterial){f.color.value.copy(d.color);f.opacity.value=d.opacity}else if(d.isShaderMaterial){d.uniformsNeedUpdate=false}}function s(f,d){f.opacity.value=d.opacity;if(d.color){f.diffuse.value.copy(d.color)}if(d.emissive){f.emissive.value.copy(d.emissive).multiplyScalar(d.emissiveIntensity)}if(d.map){f.map.value=d.map;t(d.map,f.mapTransform)}if(d.alphaMap){f.alphaMap.value=d.alphaMap;t(d.alphaMap,f.alphaMapTransform)}if(d.bumpMap){f.bumpMap.value=d.bumpMap;t(d.bumpMap,f.bumpMapTransform);f.bumpScale.value=d.bumpScale;if(d.side===wt){f.bumpScale.value*=-1}}if(d.normalMap){f.normalMap.value=d.normalMap;t(d.normalMap,f.normalMapTransform);f.normalScale.value.copy(d.normalScale);if(d.side===wt){f.normalScale.value.negate()}}if(d.displacementMap){f.displacementMap.value=d.displacementMap;t(d.displacementMap,f.displacementMapTransform);f.displacementScale.value=d.displacementScale;f.displacementBias.value=d.displacementBias}if(d.emissiveMap){f.emissiveMap.value=d.emissiveMap;t(d.emissiveMap,f.emissiveMapTransform)}if(d.specularMap){f.specularMap.value=d.specularMap;t(d.specularMap,f.specularMapTransform)}if(d.alphaTest>0){f.alphaTest.value=d.alphaTest}const A=e.get(d);const M=A.envMap;const T=A.envMapRotation;if(M){f.envMap.value=M;$n.copy(T);$n.x*=-1;$n.y*=-1;$n.z*=-1;if(M.isCubeTexture&&M.isRenderTargetTexture===false){$n.y*=-1;$n.z*=-1}f.envMapRotation.value.setFromMatrix4(Bg.makeRotationFromEuler($n));f.flipEnvMap.value=M.isCubeTexture&&M.isRenderTargetTexture===false?-1:1;f.reflectivity.value=d.reflectivity;f.ior.value=d.ior;f.refractionRatio.value=d.refractionRatio}if(d.lightMap){f.lightMap.value=d.lightMap;const D=i._useLegacyLights===true?Math.PI:1;f.lightMapIntensity.value=d.lightMapIntensity*D;t(d.lightMap,f.lightMapTransform)}if(d.aoMap){f.aoMap.value=d.aoMap;f.aoMapIntensity.value=d.aoMapIntensity;t(d.aoMap,f.aoMapTransform)}}function o(f,d){f.diffuse.value.copy(d.color);f.opacity.value=d.opacity;if(d.map){f.map.value=d.map;t(d.map,f.mapTransform)}}function a(f,d){f.dashSize.value=d.dashSize;f.totalSize.value=d.dashSize+d.gapSize;f.scale.value=d.scale}function l(f,d,A,M){f.diffuse.value.copy(d.color);f.opacity.value=d.opacity;f.size.value=d.size*A;f.scale.value=M*.5;if(d.map){f.map.value=d.map;t(d.map,f.uvTransform)}if(d.alphaMap){f.alphaMap.value=d.alphaMap;t(d.alphaMap,f.alphaMapTransform)}if(d.alphaTest>0){f.alphaTest.value=d.alphaTest}}function c(f,d){f.diffuse.value.copy(d.color);f.opacity.value=d.opacity;f.rotation.value=d.rotation;if(d.map){f.map.value=d.map;t(d.map,f.mapTransform)}if(d.alphaMap){f.alphaMap.value=d.alphaMap;t(d.alphaMap,f.alphaMapTransform)}if(d.alphaTest>0){f.alphaTest.value=d.alphaTest}}function u(f,d){f.specular.value.copy(d.specular);f.shininess.value=Math.max(d.shininess,1e-4)}function h(f,d){if(d.gradientMap){f.gradientMap.value=d.gradientMap}}function p(f,d){f.metalness.value=d.metalness;if(d.metalnessMap){f.metalnessMap.value=d.metalnessMap;t(d.metalnessMap,f.metalnessMapTransform)}f.roughness.value=d.roughness;if(d.roughnessMap){f.roughnessMap.value=d.roughnessMap;t(d.roughnessMap,f.roughnessMapTransform)}const A=e.get(d).envMap;if(A){f.envMapIntensity.value=d.envMapIntensity}}function m(f,d,A){f.ior.value=d.ior;if(d.sheen>0){f.sheenColor.value.copy(d.sheenColor).multiplyScalar(d.sheen);f.sheenRoughness.value=d.sheenRoughness;if(d.sheenColorMap){f.sheenColorMap.value=d.sheenColorMap;t(d.sheenColorMap,f.sheenColorMapTransform)}if(d.sheenRoughnessMap){f.sheenRoughnessMap.value=d.sheenRoughnessMap;t(d.sheenRoughnessMap,f.sheenRoughnessMapTransform)}}if(d.clearcoat>0){f.clearcoat.value=d.clearcoat;f.clearcoatRoughness.value=d.clearcoatRoughness;if(d.clearcoatMap){f.clearcoatMap.value=d.clearcoatMap;t(d.clearcoatMap,f.clearcoatMapTransform)}if(d.clearcoatRoughnessMap){f.clearcoatRoughnessMap.value=d.clearcoatRoughnessMap;t(d.clearcoatRoughnessMap,f.clearcoatRoughnessMapTransform)}if(d.clearcoatNormalMap){f.clearcoatNormalMap.value=d.clearcoatNormalMap;t(d.clearcoatNormalMap,f.clearcoatNormalMapTransform);f.clearcoatNormalScale.value.copy(d.clearcoatNormalScale);if(d.side===wt){f.clearcoatNormalScale.value.negate()}}}if(d.iridescence>0){f.iridescence.value=d.iridescence;f.iridescenceIOR.value=d.iridescenceIOR;f.iridescenceThicknessMinimum.value=d.iridescenceThicknessRange[0];f.iridescenceThicknessMaximum.value=d.iridescenceThicknessRange[1];if(d.iridescenceMap){f.iridescenceMap.value=d.iridescenceMap;t(d.iridescenceMap,f.iridescenceMapTransform)}if(d.iridescenceThicknessMap){f.iridescenceThicknessMap.value=d.iridescenceThicknessMap;t(d.iridescenceThicknessMap,f.iridescenceThicknessMapTransform)}}if(d.transmission>0){f.transmission.value=d.transmission;f.transmissionSamplerMap.value=A.texture;f.transmissionSamplerSize.value.set(A.width,A.height);if(d.transmissionMap){f.transmissionMap.value=d.transmissionMap;t(d.transmissionMap,f.transmissionMapTransform)}f.thickness.value=d.thickness;if(d.thicknessMap){f.thicknessMap.value=d.thicknessMap;t(d.thicknessMap,f.thicknessMapTransform)}f.attenuationDistance.value=d.attenuationDistance;f.attenuationColor.value.copy(d.attenuationColor)}if(d.anisotropy>0){f.anisotropyVector.value.set(d.anisotropy*Math.cos(d.anisotropyRotation),d.anisotropy*Math.sin(d.anisotropyRotation));if(d.anisotropyMap){f.anisotropyMap.value=d.anisotropyMap;t(d.anisotropyMap,f.anisotropyMapTransform)}}f.specularIntensity.value=d.specularIntensity;f.specularColor.value.copy(d.specularColor);if(d.specularColorMap){f.specularColorMap.value=d.specularColorMap;t(d.specularColorMap,f.specularColorMapTransform)}if(d.specularIntensityMap){f.specularIntensityMap.value=d.specularIntensityMap;t(d.specularIntensityMap,f.specularIntensityMapTransform)}}function g(f,d){if(d.matcap){f.matcap.value=d.matcap}}function S(f,d){const A=e.get(d).light;f.referencePosition.value.setFromMatrixPosition(A.matrixWorld);f.nearDistance.value=A.shadow.camera.near;f.farDistance.value=A.shadow.camera.far}return{refreshFogUniforms:n,refreshMaterialUniforms:r}}function Gg(i,e,t,n){let r={};let s={};let o=[];const a=t.isWebGL2?i.getParameter(i.MAX_UNIFORM_BUFFER_BINDINGS):0;function l(A,M){const T=M.program;n.uniformBlockBinding(A,T)}function c(A,M){let T=r[A.id];if(T===void 0){g(A);T=u(A);r[A.id]=T;A.addEventListener("dispose",f)}const D=M.program;n.updateUBOMapping(A,D);const C=e.render.frame;if(s[A.id]!==C){p(A);s[A.id]=C}}function u(A){const M=h();A.__bindingPointIndex=M;const T=i.createBuffer();const D=A.__size;const C=A.usage;i.bindBuffer(i.UNIFORM_BUFFER,T);i.bufferData(i.UNIFORM_BUFFER,D,C);i.bindBuffer(i.UNIFORM_BUFFER,null);i.bindBufferBase(i.UNIFORM_BUFFER,M,T);return T}function h(){for(let A=0;A<a;A++){if(o.indexOf(A)===-1){o.push(A);return A}}console.error("THREE.WebGLRenderer: Maximum number of simultaneously usable uniforms groups reached.");return 0}function p(A){const M=r[A.id];const T=A.uniforms;const D=A.__cache;i.bindBuffer(i.UNIFORM_BUFFER,M);for(let C=0,b=T.length;C<b;C++){const z=Array.isArray(T[C])?T[C]:[T[C]];for(let ee=0,v=z.length;ee<v;ee++){const y=z[ee];if(m(y,C,ee,D)===true){const te=y.__offset;const J=Array.isArray(y.value)?y.value:[y.value];let R=0;for(let k=0;k<J.length;k++){const H=J[k];const j=S(H);if(typeof H==="number"||typeof H==="boolean"){y.__data[0]=H;i.bufferSubData(i.UNIFORM_BUFFER,te+R,y.__data)}else if(H.isMatrix3){y.__data[0]=H.elements[0];y.__data[1]=H.elements[1];y.__data[2]=H.elements[2];y.__data[3]=0;y.__data[4]=H.elements[3];y.__data[5]=H.elements[4];y.__data[6]=H.elements[5];y.__data[7]=0;y.__data[8]=H.elements[6];y.__data[9]=H.elements[7];y.__data[10]=H.elements[8];y.__data[11]=0}else{H.toArray(y.__data,R);R+=j.storage/Float32Array.BYTES_PER_ELEMENT}}i.bufferSubData(i.UNIFORM_BUFFER,te,y.__data)}}}i.bindBuffer(i.UNIFORM_BUFFER,null)}function m(A,M,T,D){const C=A.value;const b=M+"_"+T;if(D[b]===void 0){if(typeof C==="number"||typeof C==="boolean"){D[b]=C}else{D[b]=C.clone()}return true}else{const z=D[b];if(typeof C==="number"||typeof C==="boolean"){if(z!==C){D[b]=C;return true}}else{if(z.equals(C)===false){z.copy(C);return true}}}return false}function g(A){const M=A.uniforms;let T=0;const D=16;for(let b=0,z=M.length;b<z;b++){const ee=Array.isArray(M[b])?M[b]:[M[b]];for(let v=0,y=ee.length;v<y;v++){const te=ee[v];const J=Array.isArray(te.value)?te.value:[te.value];for(let R=0,k=J.length;R<k;R++){const H=J[R];const j=S(H);const V=T%D;if(V!==0&&D-V<j.boundary){T+=D-V}te.__data=new Float32Array(j.storage/Float32Array.BYTES_PER_ELEMENT);te.__offset=T;T+=j.storage}}}const C=T%D;if(C>0)T+=D-C;A.__size=T;A.__cache={};return this}function S(A){const M={boundary:0,storage:0};if(typeof A==="number"||typeof A==="boolean"){M.boundary=4;M.storage=4}else if(A.isVector2){M.boundary=8;M.storage=8}else if(A.isVector3||A.isColor){M.boundary=16;M.storage=12}else if(A.isVector4){M.boundary=16;M.storage=16}else if(A.isMatrix3){M.boundary=48;M.storage=48}else if(A.isMatrix4){M.boundary=64;M.storage=64}else if(A.isTexture){console.warn("THREE.WebGLRenderer: Texture samplers can not be part of an uniforms group.")}else{console.warn("THREE.WebGLRenderer: Unsupported uniform value type.",A)}return M}function f(A){const M=A.target;M.removeEventListener("dispose",f);const T=o.indexOf(M.__bindingPointIndex);o.splice(T,1);i.deleteBuffer(r[M.id]);delete r[M.id];delete s[M.id]}function d(){for(const A in r){i.deleteBuffer(r[A])}o=[];r={};s={}}return{bind:l,update:c,dispose:d}}class Hu{constructor(e={}){const{canvas:t=Rd(),context:n=null,depth:r=true,stencil:s=true,alpha:o=false,antialias:a=false,premultipliedAlpha:l=true,preserveDrawingBuffer:c=false,powerPreference:u="default",failIfMajorPerformanceCaveat:h=false}=e;this.isWebGLRenderer=true;let p;if(n!==null){p=n.getContextAttributes().alpha}else{p=o}const m=new Uint32Array(4);const g=new Int32Array(4);let S=null;let f=null;const d=[];const A=[];this.domElement=t;this.debug={checkShaderErrors:true,onShaderError:null};this.autoClear=true;this.autoClearColor=true;this.autoClearDepth=true;this.autoClearStencil=true;this.sortObjects=true;this.clippingPlanes=[];this.localClippingEnabled=false;this._outputColorSpace=Kt;this._useLegacyLights=false;this.toneMapping=Un;this.toneMappingExposure=1;const M=this;let T=false;let D=0;let C=0;let b=null;let z=-1;let ee=null;const v=new dt;const y=new dt;let te=null;const J=new Ve(0);let R=0;let k=t.width;let H=t.height;let j=1;let V=null;let X=null;const Y=new dt(0,0,k,H);const se=new dt(0,0,k,H);let de=false;const Re=new wo;let B=false;let K=false;let he=null;const Ae=new nt;const ge=new Pe;const fe=new L;const Ye={background:null,fog:null,environment:null,overrideMaterial:null,isScene:true};function be(){return b===null?j:1}let U=n;function ft(x,P){for(let F=0;F<x.length;F++){const O=x[F];const N=t.getContext(O,P);if(N!==null)return N}return null}try{const x={alpha:true,depth:r,stencil:s,antialias:a,premultipliedAlpha:l,preserveDrawingBuffer:c,powerPreference:u,failIfMajorPerformanceCaveat:h};if("setAttribute"in t)t.setAttribute("data-engine",`three.js r${To}`);t.addEventListener("webglcontextlost",Qe,false);t.addEventListener("webglcontextrestored",w,false);t.addEventListener("webglcontextcreationerror",le,false);if(U===null){const P=["webgl2","webgl","experimental-webgl"];if(M.isWebGL1Renderer===true){P.shift()}U=ft(P,x);if(U===null){if(ft(P)){throw new Error("Error creating WebGL context with your selected attributes.")}else{throw new Error("Error creating WebGL context.")}}}if(typeof WebGLRenderingContext!=="undefined"&&U instanceof WebGLRenderingContext){console.warn("THREE.WebGLRenderer: WebGL 1 support was deprecated in r153 and will be removed in r163.")}if(U.getShaderPrecisionFormat===void 0){U.getShaderPrecisionFormat=function(){return{"rangeMin":1,"rangeMax":1,"precision":1}}}}catch(x){console.error("THREE.WebGLRenderer: "+x.message);throw x}let Se,He,Ee,qe;let ze,ke,rt,E,_,G,W;let Z,$,Ie,ye,ae,oe;let De,Q,at,We;let ve,pe,me;function je(){Se=new qm(U);He=new Gm(U,Se,e);Se.init(He);ve=new Pg(U,Se,He);Ee=new Rg(U,Se,He);qe=new $m(U);ze=new mg;ke=new Lg(U,Se,Ee,ze,He,ve,qe);rt=new Vm(M);E=new Xm(M);_=new ef(U,He);pe=new Bm(U,Se,_,He);G=new jm(U,_,qe,pe);W=new Qm(U,G,_,qe);Q=new Jm(U,He,ke);ae=new Hm(ze);Z=new pg(M,rt,E,Se,He,pe,ae);$=new zg(M,ze);Ie=new gg;ye=new yg(Se,He);De=new Om(M,rt,E,Ee,W,p,l);oe=new wg(M,W,He);me=new Gg(U,qe,He,Ee);at=new zm(U,Se,qe,He);We=new Ym(U,Se,qe,He);qe.programs=Z.programs;M.capabilities=He;M.extensions=Se;M.properties=ze;M.renderLists=Ie;M.shadowMap=oe;M.state=Ee;M.info=qe}je();const Ue=new Og(M,U);this.xr=Ue;this.getContext=function(){return U};this.getContextAttributes=function(){return U.getContextAttributes()};this.forceContextLoss=function(){const x=Se.get("WEBGL_lose_context");if(x)x.loseContext()};this.forceContextRestore=function(){const x=Se.get("WEBGL_lose_context");if(x)x.restoreContext()};this.getPixelRatio=function(){return j};this.setPixelRatio=function(x){if(x===void 0)return;j=x;this.setSize(k,H,false)};this.getSize=function(x){return x.set(k,H)};this.setSize=function(x,P,F=true){if(Ue.isPresenting){console.warn("THREE.WebGLRenderer: Can't change size while VR device is presenting.");return}k=x;H=P;t.width=Math.floor(x*j);t.height=Math.floor(P*j);if(F===true){t.style.width=x+"px";t.style.height=P+"px"}this.setViewport(0,0,x,P)};this.getDrawingBufferSize=function(x){return x.set(k*j,H*j).floor()};this.setDrawingBufferSize=function(x,P,F){k=x;H=P;j=F;t.width=Math.floor(x*F);t.height=Math.floor(P*F);this.setViewport(0,0,x,P)};this.getCurrentViewport=function(x){return x.copy(v)};this.getViewport=function(x){return x.copy(Y)};this.setViewport=function(x,P,F,O){if(x.isVector4){Y.set(x.x,x.y,x.z,x.w)}else{Y.set(x,P,F,O)}Ee.viewport(v.copy(Y).multiplyScalar(j).round())};this.getScissor=function(x){return x.copy(se)};this.setScissor=function(x,P,F,O){if(x.isVector4){se.set(x.x,x.y,x.z,x.w)}else{se.set(x,P,F,O)}Ee.scissor(y.copy(se).multiplyScalar(j).round())};this.getScissorTest=function(){return de};this.setScissorTest=function(x){Ee.setScissorTest(de=x)};this.setOpaqueSort=function(x){V=x};this.setTransparentSort=function(x){X=x};this.getClearColor=function(x){return x.copy(De.getClearColor())};this.setClearColor=function(){De.setClearColor.apply(De,arguments)};this.getClearAlpha=function(){return De.getClearAlpha()};this.setClearAlpha=function(){De.setClearAlpha.apply(De,arguments)};this.clear=function(x=true,P=true,F=true){let O=0;if(x){let N=false;if(b!==null){const ue=b.texture.format;N=ue===gu||ue===_u||ue===mu}if(N){const ue=b.texture.type;const _e=ue===Nn||ue===Dn||ue===bo||ue===ai||ue===fu||ue===pu;const Me=De.getClearColor();const Te=De.getClearAlpha();const Ge=Me.r;const Le=Me.g;const Ne=Me.b;if(_e){m[0]=Ge;m[1]=Le;m[2]=Ne;m[3]=Te;U.clearBufferuiv(U.COLOR,0,m)}else{g[0]=Ge;g[1]=Le;g[2]=Ne;g[3]=Te;U.clearBufferiv(U.COLOR,0,g)}}else{O|=U.COLOR_BUFFER_BIT}}if(P)O|=U.DEPTH_BUFFER_BIT;if(F){O|=U.STENCIL_BUFFER_BIT;this.state.buffers.stencil.setMask(4294967295)}U.clear(O)};this.clearColor=function(){this.clear(true,false,false)};this.clearDepth=function(){this.clear(false,true,false)};this.clearStencil=function(){this.clear(false,false,true)};this.dispose=function(){t.removeEventListener("webglcontextlost",Qe,false);t.removeEventListener("webglcontextrestored",w,false);t.removeEventListener("webglcontextcreationerror",le,false);Ie.dispose();ye.dispose();ze.dispose();rt.dispose();E.dispose();W.dispose();pe.dispose();me.dispose();Z.dispose();Ue.dispose();Ue.removeEventListener("sessionstart",Nt);Ue.removeEventListener("sessionend",Ze);if(he){he.dispose();he=null}St.stop()};function Qe(x){x.preventDefault();console.log("THREE.WebGLRenderer: Context Lost.");T=true}function w(){console.log("THREE.WebGLRenderer: Context Restored.");T=false;const x=qe.autoReset;const P=oe.enabled;const F=oe.autoUpdate;const O=oe.needsUpdate;const N=oe.type;je();qe.autoReset=x;oe.enabled=P;oe.autoUpdate=F;oe.needsUpdate=O;oe.type=N}function le(x){console.error("THREE.WebGLRenderer: A WebGL context could not be created. Reason: ",x.statusMessage)}function I(x){const P=x.target;P.removeEventListener("dispose",I);ne(P)}function ne(x){ce(x);ze.remove(x)}function ce(x){const P=ze.get(x).programs;if(P!==void 0){P.forEach(function(F){Z.releaseProgram(F)});if(x.isShaderMaterial){Z.releaseShaderCache(x)}}}this.renderBufferDirect=function(x,P,F,O,N,ue){if(P===null)P=Ye;const _e=N.isMesh&&N.matrixWorld.determinant()<0;const Me=Zu(x,P,F,O,N);Ee.setMaterial(O,_e);let Te=F.index;let Ge=1;if(O.wireframe===true){Te=G.getWireframeAttribute(F);if(Te===void 0)return;Ge=2}const Le=F.drawRange;const Ne=F.attributes.position;let st=Le.start*Ge;let Rt=(Le.start+Le.count)*Ge;if(ue!==null){st=Math.max(st,ue.start*Ge);Rt=Math.min(Rt,(ue.start+ue.count)*Ge)}if(Te!==null){st=Math.max(st,0);Rt=Math.min(Rt,Te.count)}else if(Ne!==void 0&&Ne!==null){st=Math.max(st,0);Rt=Math.min(Rt,Ne.count)}const ut=Rt-st;if(ut<0||ut===Infinity)return;pe.setup(N,O,Me,F,Te);let rn;let tt=at;if(Te!==null){rn=_.get(Te);tt=We;tt.setIndex(rn)}if(N.isMesh){if(O.wireframe===true){Ee.setLineWidth(O.wireframeLinewidth*be());tt.setMode(U.LINES)}else{tt.setMode(U.TRIANGLES)}}else if(N.isLine){let Fe=O.linewidth;if(Fe===void 0)Fe=1;Ee.setLineWidth(Fe*be());if(N.isLineSegments){tt.setMode(U.LINES)}else if(N.isLineLoop){tt.setMode(U.LINE_LOOP)}else{tt.setMode(U.LINE_STRIP)}}else if(N.isPoints){tt.setMode(U.POINTS)}else if(N.isSprite){tt.setMode(U.TRIANGLES)}if(N.isBatchedMesh){tt.renderMultiDraw(N._multiDrawStarts,N._multiDrawCounts,N._multiDrawCount)}else if(N.isInstancedMesh){tt.renderInstances(st,ut,N.count)}else if(F.isInstancedBufferGeometry){const Fe=F._maxInstanceCount!==void 0?F._maxInstanceCount:Infinity;const Js=Math.min(F.instanceCount,Fe);tt.renderInstances(st,ut,Js)}else{tt.render(st,ut)}};function Xe(x,P,F){if(x.transparent===true&&x.side===Jt&&x.forceSinglePass===false){x.side=wt;x.needsUpdate=true;qr(x,P,F);x.side=On;x.needsUpdate=true;qr(x,P,F);x.side=Jt}else{qr(x,P,F)}}this.compile=function(x,P,F=null){if(F===null)F=x;f=ye.get(F);f.init();A.push(f);F.traverseVisible(function(N){if(N.isLight&&N.layers.test(P.layers)){f.pushLight(N);if(N.castShadow){f.pushShadow(N)}}});if(x!==F){x.traverseVisible(function(N){if(N.isLight&&N.layers.test(P.layers)){f.pushLight(N);if(N.castShadow){f.pushShadow(N)}}})}f.setupLights(M._useLegacyLights);const O=new Set;x.traverse(function(N){const ue=N.material;if(ue){if(Array.isArray(ue)){for(let _e=0;_e<ue.length;_e++){const Me=ue[_e];Xe(Me,F,N);O.add(Me)}}else{Xe(ue,F,N);O.add(ue)}}});A.pop();f=null;return O};this.compileAsync=function(x,P,F=null){const O=this.compile(x,P,F);return new Promise(N=>{function ue(){O.forEach(function(_e){const Me=ze.get(_e);const Te=Me.currentProgram;if(Te.isReady()){O.delete(_e)}});if(O.size===0){N(x);return}setTimeout(ue,10)}if(Se.get("KHR_parallel_shader_compile")!==null){ue()}else{setTimeout(ue,10)}})};let Ke=null;function pt(x){if(Ke)Ke(x)}function Nt(){St.stop()}function Ze(){St.start()}const St=new Nu;St.setAnimationLoop(pt);if(typeof self!=="undefined")St.setContext(self);this.setAnimationLoop=function(x){Ke=x;Ue.setAnimationLoop(x);x===null?St.stop():St.start()};Ue.addEventListener("sessionstart",Nt);Ue.addEventListener("sessionend",Ze);this.render=function(x,P){if(P!==void 0&&P.isCamera!==true){console.error("THREE.WebGLRenderer.render: camera is not an instance of THREE.Camera.");return}if(T===true)return;if(x.matrixWorldAutoUpdate===true)x.updateMatrixWorld();if(P.parent===null&&P.matrixWorldAutoUpdate===true)P.updateMatrixWorld();if(Ue.enabled===true&&Ue.isPresenting===true){if(Ue.cameraAutoUpdate===true)Ue.updateCamera(P);P=Ue.getCamera()}if(x.isScene===true)x.onBeforeRender(M,x,P,b);f=ye.get(x,A.length);f.init();A.push(f);Ae.multiplyMatrices(P.projectionMatrix,P.matrixWorldInverse);Re.setFromProjectionMatrix(Ae);K=this.localClippingEnabled;B=ae.init(this.clippingPlanes,K);S=Ie.get(x,d.length);S.init();d.push(S);Yt(x,P,0,M.sortObjects);S.finish();if(M.sortObjects===true){S.sort(V,X)}this.info.render.frame++;if(B===true)ae.beginShadows();const F=f.state.shadowsArray;oe.render(F,x,P);if(B===true)ae.endShadows();if(this.info.autoReset===true)this.info.reset();if(Ue.enabled===false||Ue.isPresenting===false||Ue.hasDepthSensing()===false){De.render(S,x)}f.setupLights(M._useLegacyLights);if(P.isArrayCamera){const O=P.cameras;for(let N=0,ue=O.length;N<ue;N++){const _e=O[N];Go(S,x,_e,_e.viewport)}}else{Go(S,x,P)}if(b!==null){ke.updateMultisampleRenderTarget(b);ke.updateRenderTargetMipmap(b)}if(x.isScene===true)x.onAfterRender(M,x,P);pe.resetDefaultState();z=-1;ee=null;A.pop();if(A.length>0){f=A[A.length-1]}else{f=null}d.pop();if(d.length>0){S=d[d.length-1]}else{S=null}};function Yt(x,P,F,O){if(x.visible===false)return;const N=x.layers.test(P.layers);if(N){if(x.isGroup){F=x.renderOrder}else if(x.isLOD){if(x.autoUpdate===true)x.update(P)}else if(x.isLight){f.pushLight(x);if(x.castShadow){f.pushShadow(x)}}else if(x.isSprite){if(!x.frustumCulled||Re.intersectsSprite(x)){if(O){fe.setFromMatrixPosition(x.matrixWorld).applyMatrix4(Ae)}const _e=W.update(x);const Me=x.material;if(Me.visible){S.push(x,_e,Me,F,fe.z,null)}}}else if(x.isMesh||x.isLine||x.isPoints){if(!x.frustumCulled||Re.intersectsObject(x)){const _e=W.update(x);const Me=x.material;if(O){if(x.boundingSphere!==void 0){if(x.boundingSphere===null)x.computeBoundingSphere();fe.copy(x.boundingSphere.center)}else{if(_e.boundingSphere===null)_e.computeBoundingSphere();fe.copy(_e.boundingSphere.center)}fe.applyMatrix4(x.matrixWorld).applyMatrix4(Ae)}if(Array.isArray(Me)){const Te=_e.groups;for(let Ge=0,Le=Te.length;Ge<Le;Ge++){const Ne=Te[Ge];const st=Me[Ne.materialIndex];if(st&&st.visible){S.push(x,_e,st,F,fe.z,Ne)}}}else if(Me.visible){S.push(x,_e,Me,F,fe.z,null)}}}}const ue=x.children;for(let _e=0,Me=ue.length;_e<Me;_e++){Yt(ue[_e],P,F,O)}}function Go(x,P,F,O){const N=x.opaque;const ue=x.transmissive;const _e=x.transparent;f.setupLightsView(F);if(B===true)ae.setGlobalState(M.clippingPlanes,F);if(ue.length>0)Ku(N,ue,P,F);if(O)Ee.viewport(v.copy(O));if(N.length>0)Xr(N,P,F);if(ue.length>0)Xr(ue,P,F);if(_e.length>0)Xr(_e,P,F);Ee.buffers.depth.setTest(true);Ee.buffers.depth.setMask(true);Ee.buffers.color.setMask(true);Ee.setPolygonOffset(false)}function Ku(x,P,F,O){const N=F.isScene===true?F.overrideMaterial:null;if(N!==null){return}const ue=He.isWebGL2;if(he===null){he=new tn(1,1,{generateMipmaps:true,type:Se.has("EXT_color_buffer_half_float")?Bn:Nn,minFilter:ei,samples:ue?4:0})}M.getDrawingBufferSize(ge);if(ue){he.setSize(ge.x,ge.y)}else{he.setSize(lo(ge.x),lo(ge.y))}const _e=M.getRenderTarget();M.setRenderTarget(he);M.getClearColor(J);R=M.getClearAlpha();if(R<1)M.setClearColor(16777215,.5);M.clear();const Me=M.toneMapping;M.toneMapping=Un;Xr(x,F,O);ke.updateMultisampleRenderTarget(he);ke.updateRenderTargetMipmap(he);let Te=false;for(let Ge=0,Le=P.length;Ge<Le;Ge++){const Ne=P[Ge];const st=Ne.object;const Rt=Ne.geometry;const ut=Ne.material;const rn=Ne.group;if(ut.side===Jt&&st.layers.test(O.layers)){const tt=ut.side;ut.side=wt;ut.needsUpdate=true;Ho(st,F,O,Rt,ut,rn);ut.side=tt;ut.needsUpdate=true;Te=true}}if(Te===true){ke.updateMultisampleRenderTarget(he);ke.updateRenderTargetMipmap(he)}M.setRenderTarget(_e);M.setClearColor(J,R);M.toneMapping=Me}function Xr(x,P,F){const O=P.isScene===true?P.overrideMaterial:null;for(let N=0,ue=x.length;N<ue;N++){const _e=x[N];const Me=_e.object;const Te=_e.geometry;const Ge=O===null?_e.material:O;const Le=_e.group;if(Me.layers.test(F.layers)){Ho(Me,P,F,Te,Ge,Le)}}}function Ho(x,P,F,O,N,ue){x.onBeforeRender(M,P,F,O,N,ue);x.modelViewMatrix.multiplyMatrices(F.matrixWorldInverse,x.matrixWorld);x.normalMatrix.getNormalMatrix(x.modelViewMatrix);N.onBeforeRender(M,P,F,O,x,ue);if(N.transparent===true&&N.side===Jt&&N.forceSinglePass===false){N.side=wt;N.needsUpdate=true;M.renderBufferDirect(F,P,O,N,x,ue);N.side=On;N.needsUpdate=true;M.renderBufferDirect(F,P,O,N,x,ue);N.side=Jt}else{M.renderBufferDirect(F,P,O,N,x,ue)}x.onAfterRender(M,P,F,O,N,ue)}function qr(x,P,F){if(P.isScene!==true)P=Ye;const O=ze.get(x);const N=f.state.lights;const ue=f.state.shadowsArray;const _e=N.state.version;const Me=Z.getParameters(x,N.state,ue,P,F);const Te=Z.getProgramCacheKey(Me);let Ge=O.programs;O.environment=x.isMeshStandardMaterial?P.environment:null;O.fog=P.fog;O.envMap=(x.isMeshStandardMaterial?E:rt).get(x.envMap||O.environment);O.envMapRotation=O.environment!==null&&x.envMap===null?P.environmentRotation:x.envMapRotation;if(Ge===void 0){x.addEventListener("dispose",I);Ge=new Map;O.programs=Ge}let Le=Ge.get(Te);if(Le!==void 0){if(O.currentProgram===Le&&O.lightsStateVersion===_e){ko(x,Me);return Le}}else{Me.uniforms=Z.getUniforms(x);x.onBuild(F,Me,M);x.onBeforeCompile(Me,M);Le=Z.acquireProgram(Me,Te);Ge.set(Te,Le);O.uniforms=Me.uniforms}const Ne=O.uniforms;if(!x.isShaderMaterial&&!x.isRawShaderMaterial||x.clipping===true){Ne.clippingPlanes=ae.uniform}ko(x,Me);O.needsLights=Qu(x);O.lightsStateVersion=_e;if(O.needsLights){Ne.ambientLightColor.value=N.state.ambient;Ne.lightProbe.value=N.state.probe;Ne.directionalLights.value=N.state.directional;Ne.directionalLightShadows.value=N.state.directionalShadow;Ne.spotLights.value=N.state.spot;Ne.spotLightShadows.value=N.state.spotShadow;Ne.rectAreaLights.value=N.state.rectArea;Ne.ltc_1.value=N.state.rectAreaLTC1;Ne.ltc_2.value=N.state.rectAreaLTC2;Ne.pointLights.value=N.state.point;Ne.pointLightShadows.value=N.state.pointShadow;Ne.hemisphereLights.value=N.state.hemi;Ne.directionalShadowMap.value=N.state.directionalShadowMap;Ne.directionalShadowMatrix.value=N.state.directionalShadowMatrix;Ne.spotShadowMap.value=N.state.spotShadowMap;Ne.spotLightMatrix.value=N.state.spotLightMatrix;Ne.spotLightMap.value=N.state.spotLightMap;Ne.pointShadowMap.value=N.state.pointShadowMap;Ne.pointShadowMatrix.value=N.state.pointShadowMatrix}O.currentProgram=Le;O.uniformsList=null;return Le}function Vo(x){if(x.uniformsList===null){const P=x.currentProgram.getUniforms();x.uniformsList=Es.seqWithValue(P.seq,x.uniforms)}return x.uniformsList}function ko(x,P){const F=ze.get(x);F.outputColorSpace=P.outputColorSpace;F.batching=P.batching;F.instancing=P.instancing;F.instancingColor=P.instancingColor;F.instancingMorph=P.instancingMorph;F.skinning=P.skinning;F.morphTargets=P.morphTargets;F.morphNormals=P.morphNormals;F.morphColors=P.morphColors;F.morphTargetsCount=P.morphTargetsCount;F.numClippingPlanes=P.numClippingPlanes;F.numIntersection=P.numClipIntersection;F.vertexAlphas=P.vertexAlphas;F.vertexTangents=P.vertexTangents;F.toneMapping=P.toneMapping}function Zu(x,P,F,O,N){if(P.isScene!==true)P=Ye;ke.resetTextureUnits();const ue=P.fog;const _e=O.isMeshStandardMaterial?P.environment:null;const Me=b===null?M.outputColorSpace:b.isXRRenderTarget===true?b.texture.colorSpace:Gn;const Te=(O.isMeshStandardMaterial?E:rt).get(O.envMap||_e);const Ge=O.vertexColors===true&&!!F.attributes.color&&F.attributes.color.itemSize===4;const Le=!!F.attributes.tangent&&(!!O.normalMap||O.anisotropy>0);const Ne=!!F.morphAttributes.position;const st=!!F.morphAttributes.normal;const Rt=!!F.morphAttributes.color;let ut=Un;if(O.toneMapped){if(b===null||b.isXRRenderTarget===true){ut=M.toneMapping}}const rn=F.morphAttributes.position||F.morphAttributes.normal||F.morphAttributes.color;const tt=rn!==void 0?rn.length:0;const Fe=ze.get(O);const Js=f.state.lights;if(B===true){if(K===true||x!==ee){const It=x===ee&&O.id===z;ae.setState(O,x,It)}}let et=false;if(O.version===Fe.__version){if(Fe.needsLights&&Fe.lightsStateVersion!==Js.state.version){et=true}else if(Fe.outputColorSpace!==Me){et=true}else if(N.isBatchedMesh&&Fe.batching===false){et=true}else if(!N.isBatchedMesh&&Fe.batching===true){et=true}else if(N.isInstancedMesh&&Fe.instancing===false){et=true}else if(!N.isInstancedMesh&&Fe.instancing===true){et=true}else if(N.isSkinnedMesh&&Fe.skinning===false){et=true}else if(!N.isSkinnedMesh&&Fe.skinning===true){et=true}else if(N.isInstancedMesh&&Fe.instancingColor===true&&N.instanceColor===null){et=true}else if(N.isInstancedMesh&&Fe.instancingColor===false&&N.instanceColor!==null){et=true}else if(N.isInstancedMesh&&Fe.instancingMorph===true&&N.morphTexture===null){et=true}else if(N.isInstancedMesh&&Fe.instancingMorph===false&&N.morphTexture!==null){et=true}else if(Fe.envMap!==Te){et=true}else if(O.fog===true&&Fe.fog!==ue){et=true}else if(Fe.numClippingPlanes!==void 0&&(Fe.numClippingPlanes!==ae.numPlanes||Fe.numIntersection!==ae.numIntersection)){et=true}else if(Fe.vertexAlphas!==Ge){et=true}else if(Fe.vertexTangents!==Le){et=true}else if(Fe.morphTargets!==Ne){et=true}else if(Fe.morphNormals!==st){et=true}else if(Fe.morphColors!==Rt){et=true}else if(Fe.toneMapping!==ut){et=true}else if(He.isWebGL2===true&&Fe.morphTargetsCount!==tt){et=true}}else{et=true;Fe.__version=O.version}let Hn=Fe.currentProgram;if(et===true){Hn=qr(O,P,N)}let Wo=false;let sr=false;let Qs=false;const _t=Hn.getUniforms(),Vn=Fe.uniforms;if(Ee.useProgram(Hn.program)){Wo=true;sr=true;Qs=true}if(O.id!==z){z=O.id;sr=true}if(Wo||ee!==x){_t.setValue(U,"projectionMatrix",x.projectionMatrix);_t.setValue(U,"viewMatrix",x.matrixWorldInverse);const It=_t.map.cameraPosition;if(It!==void 0){It.setValue(U,fe.setFromMatrixPosition(x.matrixWorld))}if(He.logarithmicDepthBuffer){_t.setValue(U,"logDepthBufFC",2/(Math.log(x.far+1)/Math.LN2))}if(O.isMeshPhongMaterial||O.isMeshToonMaterial||O.isMeshLambertMaterial||O.isMeshBasicMaterial||O.isMeshStandardMaterial||O.isShaderMaterial){_t.setValue(U,"isOrthographic",x.isOrthographicCamera===true)}if(ee!==x){ee=x;sr=true;Qs=true}}if(N.isSkinnedMesh){_t.setOptional(U,N,"bindMatrix");_t.setOptional(U,N,"bindMatrixInverse");const It=N.skeleton;if(It){if(He.floatVertexTextures){if(It.boneTexture===null)It.computeBoneTexture();_t.setValue(U,"boneTexture",It.boneTexture,ke)}else{console.warn("THREE.WebGLRenderer: SkinnedMesh can only be used with WebGL 2. With WebGL 1 OES_texture_float and vertex textures support is required.")}}}if(N.isBatchedMesh){_t.setOptional(U,N,"batchingTexture");_t.setValue(U,"batchingTexture",N._matricesTexture,ke)}const ea=F.morphAttributes;if(ea.position!==void 0||ea.normal!==void 0||ea.color!==void 0&&He.isWebGL2===true){Q.update(N,F,Hn)}if(sr||Fe.receiveShadow!==N.receiveShadow){Fe.receiveShadow=N.receiveShadow;_t.setValue(U,"receiveShadow",N.receiveShadow)}if(O.isMeshGouraudMaterial&&O.envMap!==null){Vn.envMap.value=Te;Vn.flipEnvMap.value=Te.isCubeTexture&&Te.isRenderTargetTexture===false?-1:1}if(sr){_t.setValue(U,"toneMappingExposure",M.toneMappingExposure);if(Fe.needsLights){Ju(Vn,Qs)}if(ue&&O.fog===true){$.refreshFogUniforms(Vn,ue)}$.refreshMaterialUniforms(Vn,O,j,H,he);Es.upload(U,Vo(Fe),Vn,ke)}if(O.isShaderMaterial&&O.uniformsNeedUpdate===true){Es.upload(U,Vo(Fe),Vn,ke);O.uniformsNeedUpdate=false}if(O.isSpriteMaterial){_t.setValue(U,"center",N.center)}_t.setValue(U,"modelViewMatrix",N.modelViewMatrix);_t.setValue(U,"normalMatrix",N.normalMatrix);_t.setValue(U,"modelMatrix",N.matrixWorld);if(O.isShaderMaterial||O.isRawShaderMaterial){const It=O.uniformsGroups;for(let ta=0,eh=It.length;ta<eh;ta++){if(He.isWebGL2){const Xo=It[ta];me.update(Xo,Hn);me.bind(Xo,Hn)}else{console.warn("THREE.WebGLRenderer: Uniform Buffer Objects can only be used with WebGL 2.")}}}return Hn}function Ju(x,P){x.ambientLightColor.needsUpdate=P;x.lightProbe.needsUpdate=P;x.directionalLights.needsUpdate=P;x.directionalLightShadows.needsUpdate=P;x.pointLights.needsUpdate=P;x.pointLightShadows.needsUpdate=P;x.spotLights.needsUpdate=P;x.spotLightShadows.needsUpdate=P;x.rectAreaLights.needsUpdate=P;x.hemisphereLights.needsUpdate=P}function Qu(x){return x.isMeshLambertMaterial||x.isMeshToonMaterial||x.isMeshPhongMaterial||x.isMeshStandardMaterial||x.isShadowMaterial||x.isShaderMaterial&&x.lights===true}this.getActiveCubeFace=function(){return D};this.getActiveMipmapLevel=function(){return C};this.getRenderTarget=function(){return b};this.setRenderTargetTextures=function(x,P,F){ze.get(x.texture).__webglTexture=P;ze.get(x.depthTexture).__webglTexture=F;const O=ze.get(x);O.__hasExternalTextures=true;O.__autoAllocateDepthBuffer=F===void 0;if(!O.__autoAllocateDepthBuffer){if(Se.has("WEBGL_multisampled_render_to_texture")===true){console.warn("THREE.WebGLRenderer: Render-to-texture extension was disabled because an external texture was provided");O.__useRenderToTexture=false}}};this.setRenderTargetFramebuffer=function(x,P){const F=ze.get(x);F.__webglFramebuffer=P;F.__useDefaultFramebuffer=P===void 0};this.setRenderTarget=function(x,P=0,F=0){b=x;D=P;C=F;let O=true;let N=null;let ue=false;let _e=false;if(x){const Te=ze.get(x);if(Te.__useDefaultFramebuffer!==void 0){Ee.bindFramebuffer(U.FRAMEBUFFER,null);O=false}else if(Te.__webglFramebuffer===void 0){ke.setupRenderTarget(x)}else if(Te.__hasExternalTextures){ke.rebindTextures(x,ze.get(x.texture).__webglTexture,ze.get(x.depthTexture).__webglTexture)}const Ge=x.texture;if(Ge.isData3DTexture||Ge.isDataArrayTexture||Ge.isCompressedArrayTexture){_e=true}const Le=ze.get(x).__webglFramebuffer;if(x.isWebGLCubeRenderTarget){if(Array.isArray(Le[P])){N=Le[P][F]}else{N=Le[P]}ue=true}else if(He.isWebGL2&&x.samples>0&&ke.useMultisampledRTT(x)===false){N=ze.get(x).__webglMultisampledFramebuffer}else{if(Array.isArray(Le)){N=Le[F]}else{N=Le}}v.copy(x.viewport);y.copy(x.scissor);te=x.scissorTest}else{v.copy(Y).multiplyScalar(j).floor();y.copy(se).multiplyScalar(j).floor();te=de}const Me=Ee.bindFramebuffer(U.FRAMEBUFFER,N);if(Me&&He.drawBuffers&&O){Ee.drawBuffers(x,N)}Ee.viewport(v);Ee.scissor(y);Ee.setScissorTest(te);if(ue){const Te=ze.get(x.texture);U.framebufferTexture2D(U.FRAMEBUFFER,U.COLOR_ATTACHMENT0,U.TEXTURE_CUBE_MAP_POSITIVE_X+P,Te.__webglTexture,F)}else if(_e){const Te=ze.get(x.texture);const Ge=P||0;U.framebufferTextureLayer(U.FRAMEBUFFER,U.COLOR_ATTACHMENT0,Te.__webglTexture,F||0,Ge)}z=-1};this.readRenderTargetPixels=function(x,P,F,O,N,ue,_e){if(!(x&&x.isWebGLRenderTarget)){console.error("THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not THREE.WebGLRenderTarget.");return}let Me=ze.get(x).__webglFramebuffer;if(x.isWebGLCubeRenderTarget&&_e!==void 0){Me=Me[_e]}if(Me){Ee.bindFramebuffer(U.FRAMEBUFFER,Me);try{const Te=x.texture;const Ge=Te.format;const Le=Te.type;if(Ge!==Xt&&ve.convert(Ge)!==U.getParameter(U.IMPLEMENTATION_COLOR_READ_FORMAT)){console.error("THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in RGBA or implementation defined format.");return}const Ne=Le===Bn&&(Se.has("EXT_color_buffer_half_float")||He.isWebGL2&&Se.has("EXT_color_buffer_float"));if(Le!==Nn&&ve.convert(Le)!==U.getParameter(U.IMPLEMENTATION_COLOR_READ_TYPE)&&!(Le===gn&&(He.isWebGL2||Se.has("OES_texture_float")||Se.has("WEBGL_color_buffer_float")))&&!Ne){console.error("THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in UnsignedByteType or implementation defined type.");return}if(P>=0&&P<=x.width-O&&(F>=0&&F<=x.height-N)){U.readPixels(P,F,O,N,ve.convert(Ge),ve.convert(Le),ue)}}finally{const Te=b!==null?ze.get(b).__webglFramebuffer:null;Ee.bindFramebuffer(U.FRAMEBUFFER,Te)}}};this.copyFramebufferToTexture=function(x,P,F=0){const O=Math.pow(2,-F);const N=Math.floor(P.image.width*O);const ue=Math.floor(P.image.height*O);ke.setTexture2D(P,0);U.copyTexSubImage2D(U.TEXTURE_2D,F,0,0,x.x,x.y,N,ue);Ee.unbindTexture()};this.copyTextureToTexture=function(x,P,F,O=0){const N=P.image.width;const ue=P.image.height;const _e=ve.convert(F.format);const Me=ve.convert(F.type);ke.setTexture2D(F,0);U.pixelStorei(U.UNPACK_FLIP_Y_WEBGL,F.flipY);U.pixelStorei(U.UNPACK_PREMULTIPLY_ALPHA_WEBGL,F.premultiplyAlpha);U.pixelStorei(U.UNPACK_ALIGNMENT,F.unpackAlignment);if(P.isDataTexture){U.texSubImage2D(U.TEXTURE_2D,O,x.x,x.y,N,ue,_e,Me,P.image.data)}else{if(P.isCompressedTexture){U.compressedTexSubImage2D(U.TEXTURE_2D,O,x.x,x.y,P.mipmaps[0].width,P.mipmaps[0].height,_e,P.mipmaps[0].data)}else{U.texSubImage2D(U.TEXTURE_2D,O,x.x,x.y,_e,Me,P.image)}}if(O===0&&F.generateMipmaps)U.generateMipmap(U.TEXTURE_2D);Ee.unbindTexture()};this.copyTextureToTexture3D=function(x,P,F,O,N=0){if(M.isWebGL1Renderer){console.warn("THREE.WebGLRenderer.copyTextureToTexture3D: can only be used with WebGL2.");return}const ue=Math.round(x.max.x-x.min.x);const _e=Math.round(x.max.y-x.min.y);const Me=x.max.z-x.min.z+1;const Te=ve.convert(O.format);const Ge=ve.convert(O.type);let Le;if(O.isData3DTexture){ke.setTexture3D(O,0);Le=U.TEXTURE_3D}else if(O.isDataArrayTexture||O.isCompressedArrayTexture){ke.setTexture2DArray(O,0);Le=U.TEXTURE_2D_ARRAY}else{console.warn("THREE.WebGLRenderer.copyTextureToTexture3D: only supports THREE.DataTexture3D and THREE.DataTexture2DArray.");return}U.pixelStorei(U.UNPACK_FLIP_Y_WEBGL,O.flipY);U.pixelStorei(U.UNPACK_PREMULTIPLY_ALPHA_WEBGL,O.premultiplyAlpha);U.pixelStorei(U.UNPACK_ALIGNMENT,O.unpackAlignment);const Ne=U.getParameter(U.UNPACK_ROW_LENGTH);const st=U.getParameter(U.UNPACK_IMAGE_HEIGHT);const Rt=U.getParameter(U.UNPACK_SKIP_PIXELS);const ut=U.getParameter(U.UNPACK_SKIP_ROWS);const rn=U.getParameter(U.UNPACK_SKIP_IMAGES);const tt=F.isCompressedTexture?F.mipmaps[N]:F.image;U.pixelStorei(U.UNPACK_ROW_LENGTH,tt.width);U.pixelStorei(U.UNPACK_IMAGE_HEIGHT,tt.height);U.pixelStorei(U.UNPACK_SKIP_PIXELS,x.min.x);U.pixelStorei(U.UNPACK_SKIP_ROWS,x.min.y);U.pixelStorei(U.UNPACK_SKIP_IMAGES,x.min.z);if(F.isDataTexture||F.isData3DTexture){U.texSubImage3D(Le,N,P.x,P.y,P.z,ue,_e,Me,Te,Ge,tt.data)}else{if(O.isCompressedArrayTexture){U.compressedTexSubImage3D(Le,N,P.x,P.y,P.z,ue,_e,Me,Te,tt.data)}else{U.texSubImage3D(Le,N,P.x,P.y,P.z,ue,_e,Me,Te,Ge,tt)}}U.pixelStorei(U.UNPACK_ROW_LENGTH,Ne);U.pixelStorei(U.UNPACK_IMAGE_HEIGHT,st);U.pixelStorei(U.UNPACK_SKIP_PIXELS,Rt);U.pixelStorei(U.UNPACK_SKIP_ROWS,ut);U.pixelStorei(U.UNPACK_SKIP_IMAGES,rn);if(N===0&&O.generateMipmaps)U.generateMipmap(Le);Ee.unbindTexture()};this.initTexture=function(x){if(x.isCubeTexture){ke.setTextureCube(x,0)}else if(x.isData3DTexture){ke.setTexture3D(x,0)}else if(x.isDataArrayTexture||x.isCompressedArrayTexture){ke.setTexture2DArray(x,0)}else{ke.setTexture2D(x,0)}Ee.unbindTexture()};this.resetState=function(){D=0;C=0;b=null;Ee.reset();pe.reset()};if(typeof __THREE_DEVTOOLS__!=="undefined"){__THREE_DEVTOOLS__.dispatchEvent(new CustomEvent("observe",{detail:this}))}}get coordinateSystem(){return vn}get outputColorSpace(){return this._outputColorSpace}set outputColorSpace(e){this._outputColorSpace=e;const t=this.getContext();t.drawingBufferColorSpace=e===Co?"display-p3":"srgb";t.unpackColorSpace=$e.workingColorSpace===js?"display-p3":"srgb"}get useLegacyLights(){console.warn("THREE.WebGLRenderer: The property .useLegacyLights has been deprecated. Migrate your lighting according to the following guide: https://discourse.threejs.org/t/updates-to-lighting-in-three-js-r155/53733.");return this._useLegacyLights}set useLegacyLights(e){console.warn("THREE.WebGLRenderer: The property .useLegacyLights has been deprecated. Migrate your lighting according to the following guide: https://discourse.threejs.org/t/updates-to-lighting-in-three-js-r155/53733.");this._useLegacyLights=e}}class Hg extends Hu{}Hg.prototype.isWebGL1Renderer=true;class Vg extends mt{constructor(){super();this.isScene=true;this.type="Scene";this.background=null;this.environment=null;this.fog=null;this.backgroundBlurriness=0;this.backgroundIntensity=1;this.backgroundRotation=new nn;this.environmentRotation=new nn;this.overrideMaterial=null;if(typeof __THREE_DEVTOOLS__!=="undefined"){__THREE_DEVTOOLS__.dispatchEvent(new CustomEvent("observe",{detail:this}))}}copy(e,t){super.copy(e,t);if(e.background!==null)this.background=e.background.clone();if(e.environment!==null)this.environment=e.environment.clone();if(e.fog!==null)this.fog=e.fog.clone();this.backgroundBlurriness=e.backgroundBlurriness;this.backgroundIntensity=e.backgroundIntensity;this.backgroundRotation.copy(e.backgroundRotation);this.environmentRotation.copy(e.environmentRotation);if(e.overrideMaterial!==null)this.overrideMaterial=e.overrideMaterial.clone();this.matrixAutoUpdate=e.matrixAutoUpdate;return this}toJSON(e){const t=super.toJSON(e);if(this.fog!==null)t.object.fog=this.fog.toJSON();if(this.backgroundBlurriness>0)t.object.backgroundBlurriness=this.backgroundBlurriness;if(this.backgroundIntensity!==1)t.object.backgroundIntensity=this.backgroundIntensity;t.object.backgroundRotation=this.backgroundRotation.toArray();t.object.environmentRotation=this.environmentRotation.toArray();return t}}class Vr extends nr{constructor(e){super();this.isLineBasicMaterial=true;this.type="LineBasicMaterial";this.color=new Ve(16777215);this.map=null;this.linewidth=1;this.linecap="round";this.linejoin="round";this.fog=true;this.setValues(e)}copy(e){super.copy(e);this.color.copy(e.color);this.map=e.map;this.linewidth=e.linewidth;this.linecap=e.linecap;this.linejoin=e.linejoin;this.fog=e.fog;return this}}const xc=new L;const Sc=new L;const Mc=new nt;const Ba=new Au;const gs=new Ys;class Po extends mt{constructor(e=new Ut,t=new Vr){super();this.isLine=true;this.type="Line";this.geometry=e;this.material=t;this.updateMorphTargets()}copy(e,t){super.copy(e,t);this.material=Array.isArray(e.material)?e.material.slice():e.material;this.geometry=e.geometry;return this}computeLineDistances(){const e=this.geometry;if(e.index===null){const t=e.attributes.position;const n=[0];for(let r=1,s=t.count;r<s;r++){xc.fromBufferAttribute(t,r-1);Sc.fromBufferAttribute(t,r);n[r]=n[r-1];n[r]+=xc.distanceTo(Sc)}e.setAttribute("lineDistance",new Tt(n,1))}else{console.warn("THREE.Line.computeLineDistances(): Computation only possible with non-indexed BufferGeometry.")}return this}raycast(e,t){const n=this.geometry;const r=this.matrixWorld;const s=e.params.Line.threshold;const o=n.drawRange;if(n.boundingSphere===null)n.computeBoundingSphere();gs.copy(n.boundingSphere);gs.applyMatrix4(r);gs.radius+=s;if(e.ray.intersectsSphere(gs)===false)return;Mc.copy(r).invert();Ba.copy(e.ray).applyMatrix4(Mc);const a=s/((this.scale.x+this.scale.y+this.scale.z)/3);const l=a*a;const c=new L;const u=new L;const h=new L;const p=new L;const m=this.isLineSegments?2:1;const g=n.index;const S=n.attributes;const f=S.position;if(g!==null){const d=Math.max(0,o.start);const A=Math.min(g.count,o.start+o.count);for(let M=d,T=A-1;M<T;M+=m){const D=g.getX(M);const C=g.getX(M+1);c.fromBufferAttribute(f,D);u.fromBufferAttribute(f,C);const b=Ba.distanceSqToSegment(c,u,p,h);if(b>l)continue;p.applyMatrix4(this.matrixWorld);const z=e.ray.origin.distanceTo(p);if(z<e.near||z>e.far)continue;t.push({distance:z,point:h.clone().applyMatrix4(this.matrixWorld),index:M,face:null,faceIndex:null,object:this})}}else{const d=Math.max(0,o.start);const A=Math.min(f.count,o.start+o.count);for(let M=d,T=A-1;M<T;M+=m){c.fromBufferAttribute(f,M);u.fromBufferAttribute(f,M+1);const D=Ba.distanceSqToSegment(c,u,p,h);if(D>l)continue;p.applyMatrix4(this.matrixWorld);const C=e.ray.origin.distanceTo(p);if(C<e.near||C>e.far)continue;t.push({distance:C,point:h.clone().applyMatrix4(this.matrixWorld),index:M,face:null,faceIndex:null,object:this})}}}updateMorphTargets(){const e=this.geometry;const t=e.morphAttributes;const n=Object.keys(t);if(n.length>0){const r=t[n[0]];if(r!==void 0){this.morphTargetInfluences=[];this.morphTargetDictionary={};for(let s=0,o=r.length;s<o;s++){const a=r[s].name||String(s);this.morphTargetInfluences.push(0);this.morphTargetDictionary[a]=s}}}}}const Ec=new L;const yc=new L;class Vu extends Po{constructor(e,t){super(e,t);this.isLineSegments=true;this.type="LineSegments"}computeLineDistances(){const e=this.geometry;if(e.index===null){const t=e.attributes.position;const n=[];for(let r=0,s=t.count;r<s;r+=2){Ec.fromBufferAttribute(t,r);yc.fromBufferAttribute(t,r+1);n[r]=r===0?0:n[r-1];n[r+1]=n[r]+Ec.distanceTo(yc)}e.setAttribute("lineDistance",new Tt(n,1))}else{console.warn("THREE.LineSegments.computeLineDistances(): Computation only possible with non-indexed BufferGeometry.")}return this}}class kg{constructor(){this.type="Curve";this.arcLengthDivisions=200}getPoint(){console.warn("THREE.Curve: .getPoint() not implemented.");return null}getPointAt(e,t){const n=this.getUtoTmapping(e);return this.getPoint(n,t)}getPoints(e=5){const t=[];for(let n=0;n<=e;n++){t.push(this.getPoint(n/e))}return t}getSpacedPoints(e=5){const t=[];for(let n=0;n<=e;n++){t.push(this.getPointAt(n/e))}return t}getLength(){const e=this.getLengths();return e[e.length-1]}getLengths(e=this.arcLengthDivisions){if(this.cacheArcLengths&&this.cacheArcLengths.length===e+1&&!this.needsUpdate){return this.cacheArcLengths}this.needsUpdate=false;const t=[];let n,r=this.getPoint(0);let s=0;t.push(0);for(let o=1;o<=e;o++){n=this.getPoint(o/e);s+=n.distanceTo(r);t.push(s);r=n}this.cacheArcLengths=t;return t}updateArcLengths(){this.needsUpdate=true;this.getLengths()}getUtoTmapping(e,t){const n=this.getLengths();let r=0;const s=n.length;let o;if(t){o=t}else{o=e*n[s-1]}let a=0,l=s-1,c;while(a<=l){r=Math.floor(a+(l-a)/2);c=n[r]-o;if(c<0){a=r+1}else if(c>0){l=r-1}else{l=r;break}}r=l;if(n[r]===o){return r/(s-1)}const u=n[r];const h=n[r+1];const p=h-u;const m=(o-u)/p;const g=(r+m)/(s-1);return g}getTangent(e,t){const n=1e-4;let r=e-n;let s=e+n;if(r<0)r=0;if(s>1)s=1;const o=this.getPoint(r);const a=this.getPoint(s);const l=t||(o.isVector2?new Pe:new L);l.copy(a).sub(o).normalize();return l}getTangentAt(e,t){const n=this.getUtoTmapping(e);return this.getTangent(n,t)}computeFrenetFrames(e,t){const n=new L;const r=[];const s=[];const o=[];const a=new L;const l=new nt;for(let m=0;m<=e;m++){const g=m/e;r[m]=this.getTangentAt(g,new L)}s[0]=new L;o[0]=new L;let c=Number.MAX_VALUE;const u=Math.abs(r[0].x);const h=Math.abs(r[0].y);const p=Math.abs(r[0].z);if(u<=c){c=u;n.set(1,0,0)}if(h<=c){c=h;n.set(0,1,0)}if(p<=c){n.set(0,0,1)}a.crossVectors(r[0],n).normalize();s[0].crossVectors(r[0],a);o[0].crossVectors(r[0],s[0]);for(let m=1;m<=e;m++){s[m]=s[m-1].clone();o[m]=o[m-1].clone();a.crossVectors(r[m-1],r[m]);if(a.length()>Number.EPSILON){a.normalize();const g=Math.acos(xt(r[m-1].dot(r[m]),-1,1));s[m].applyMatrix4(l.makeRotationAxis(a,g))}o[m].crossVectors(r[m],s[m])}if(t===true){let m=Math.acos(xt(s[0].dot(s[e]),-1,1));m/=e;if(r[0].dot(a.crossVectors(s[0],s[e]))>0){m=-m}for(let g=1;g<=e;g++){s[g].applyMatrix4(l.makeRotationAxis(r[g],m*g));o[g].crossVectors(r[g],s[g])}}return{tangents:r,normals:s,binormals:o}}clone(){return new this.constructor().copy(this)}copy(e){this.arcLengthDivisions=e.arcLengthDivisions;return this}toJSON(){const e={metadata:{version:4.6,type:"Curve",generator:"Curve.toJSON"}};e.arcLengthDivisions=this.arcLengthDivisions;e.type=this.type;return e}fromJSON(e){this.arcLengthDivisions=e.arcLengthDivisions;return this}}function Do(){let i=0,e=0,t=0,n=0;function r(s,o,a,l){i=s;e=a;t=-3*s+3*o-2*a-l;n=2*s-2*o+a+l}return{initCatmullRom:function(s,o,a,l,c){r(o,a,c*(a-s),c*(l-o))},initNonuniformCatmullRom:function(s,o,a,l,c,u,h){let p=(o-s)/c-(a-s)/(c+u)+(a-o)/u;let m=(a-o)/u-(l-o)/(u+h)+(l-a)/h;p*=u;m*=u;r(o,a,p,m)},calc:function(s){const o=s*s;const a=o*s;return i+e*s+t*o+n*a}}}const vs=new L;const za=new Do;const Ga=new Do;const Ha=new Do;class ku extends kg{constructor(e=[],t=false,n="centripetal",r=.5){super();this.isCatmullRomCurve3=true;this.type="CatmullRomCurve3";this.points=e;this.closed=t;this.curveType=n;this.tension=r}getPoint(e,t=new L){const n=t;const r=this.points;const s=r.length;const o=(s-(this.closed?0:1))*e;let a=Math.floor(o);let l=o-a;if(this.closed){a+=a>0?0:(Math.floor(Math.abs(a)/s)+1)*s}else if(l===0&&a===s-1){a=s-2;l=1}let c,u;if(this.closed||a>0){c=r[(a-1)%s]}else{vs.subVectors(r[0],r[1]).add(r[0]);c=vs}const h=r[a%s];const p=r[(a+1)%s];if(this.closed||a+2<s){u=r[(a+2)%s]}else{vs.subVectors(r[s-1],r[s-2]).add(r[s-1]);u=vs}if(this.curveType==="centripetal"||this.curveType==="chordal"){const m=this.curveType==="chordal"?.5:.25;let g=Math.pow(c.distanceToSquared(h),m);let S=Math.pow(h.distanceToSquared(p),m);let f=Math.pow(p.distanceToSquared(u),m);if(S<1e-4)S=1;if(g<1e-4)g=S;if(f<1e-4)f=S;za.initNonuniformCatmullRom(c.x,h.x,p.x,u.x,g,S,f);Ga.initNonuniformCatmullRom(c.y,h.y,p.y,u.y,g,S,f);Ha.initNonuniformCatmullRom(c.z,h.z,p.z,u.z,g,S,f)}else if(this.curveType==="catmullrom"){za.initCatmullRom(c.x,h.x,p.x,u.x,this.tension);Ga.initCatmullRom(c.y,h.y,p.y,u.y,this.tension);Ha.initCatmullRom(c.z,h.z,p.z,u.z,this.tension)}n.set(za.calc(l),Ga.calc(l),Ha.calc(l));return n}copy(e){super.copy(e);this.points=[];for(let t=0,n=e.points.length;t<n;t++){const r=e.points[t];this.points.push(r.clone())}this.closed=e.closed;this.curveType=e.curveType;this.tension=e.tension;return this}toJSON(){const e=super.toJSON();e.points=[];for(let t=0,n=this.points.length;t<n;t++){const r=this.points[t];e.points.push(r.toArray())}e.closed=this.closed;e.curveType=this.curveType;e.tension=this.tension;return e}fromJSON(e){super.fromJSON(e);this.points=[];for(let t=0,n=e.points.length;t<n;t++){const r=e.points[t];this.points.push(new L().fromArray(r))}this.closed=e.closed;this.curveType=e.curveType;this.tension=e.tension;return this}}class Wg extends Dt{constructor(e){super(e);this.isRawShaderMaterial=true;this.type="RawShaderMaterial"}}class Xg extends nr{constructor(e){super();this.isMeshPhongMaterial=true;this.type="MeshPhongMaterial";this.color=new Ve(16777215);this.specular=new Ve(1118481);this.shininess=30;this.map=null;this.lightMap=null;this.lightMapIntensity=1;this.aoMap=null;this.aoMapIntensity=1;this.emissive=new Ve(0);this.emissiveIntensity=1;this.emissiveMap=null;this.bumpMap=null;this.bumpScale=1;this.normalMap=null;this.normalMapType=xu;this.normalScale=new Pe(1,1);this.displacementMap=null;this.displacementScale=1;this.displacementBias=0;this.specularMap=null;this.alphaMap=null;this.envMap=null;this.envMapRotation=new nn;this.combine=Ao;this.reflectivity=1;this.refractionRatio=.98;this.wireframe=false;this.wireframeLinewidth=1;this.wireframeLinecap="round";this.wireframeLinejoin="round";this.flatShading=false;this.fog=true;this.setValues(e)}copy(e){super.copy(e);this.color.copy(e.color);this.specular.copy(e.specular);this.shininess=e.shininess;this.map=e.map;this.lightMap=e.lightMap;this.lightMapIntensity=e.lightMapIntensity;this.aoMap=e.aoMap;this.aoMapIntensity=e.aoMapIntensity;this.emissive.copy(e.emissive);this.emissiveMap=e.emissiveMap;this.emissiveIntensity=e.emissiveIntensity;this.bumpMap=e.bumpMap;this.bumpScale=e.bumpScale;this.normalMap=e.normalMap;this.normalMapType=e.normalMapType;this.normalScale.copy(e.normalScale);this.displacementMap=e.displacementMap;this.displacementScale=e.displacementScale;this.displacementBias=e.displacementBias;this.specularMap=e.specularMap;this.alphaMap=e.alphaMap;this.envMap=e.envMap;this.envMapRotation.copy(e.envMapRotation);this.combine=e.combine;this.reflectivity=e.reflectivity;this.refractionRatio=e.refractionRatio;this.wireframe=e.wireframe;this.wireframeLinewidth=e.wireframeLinewidth;this.wireframeLinecap=e.wireframeLinecap;this.wireframeLinejoin=e.wireframeLinejoin;this.flatShading=e.flatShading;this.fog=e.fog;return this}}const Tc={enabled:false,files:{},add:function(i,e){if(this.enabled===false)return;this.files[i]=e},get:function(i){if(this.enabled===false)return;return this.files[i]},remove:function(i){delete this.files[i]},clear:function(){this.files={}}};class qg{constructor(e,t,n){const r=this;let s=false;let o=0;let a=0;let l=void 0;const c=[];this.onStart=void 0;this.onLoad=e;this.onProgress=t;this.onError=n;this.itemStart=function(u){a++;if(s===false){if(r.onStart!==void 0){r.onStart(u,o,a)}}s=true};this.itemEnd=function(u){o++;if(r.onProgress!==void 0){r.onProgress(u,o,a)}if(o===a){s=false;if(r.onLoad!==void 0){r.onLoad()}}};this.itemError=function(u){if(r.onError!==void 0){r.onError(u)}};this.resolveURL=function(u){if(l){return l(u)}return u};this.setURLModifier=function(u){l=u;return this};this.addHandler=function(u,h){c.push(u,h);return this};this.removeHandler=function(u){const h=c.indexOf(u);if(h!==-1){c.splice(h,2)}return this};this.getHandler=function(u){for(let h=0,p=c.length;h<p;h+=2){const m=c[h];const g=c[h+1];if(m.global)m.lastIndex=0;if(m.test(u)){return g}}return null}}}const jg=new qg;class Uo{constructor(e){this.manager=e!==void 0?e:jg;this.crossOrigin="anonymous";this.withCredentials=false;this.path="";this.resourcePath="";this.requestHeader={}}load(){}loadAsync(e,t){const n=this;return new Promise(function(r,s){n.load(e,r,t,s)})}parse(){}setCrossOrigin(e){this.crossOrigin=e;return this}setWithCredentials(e){this.withCredentials=e;return this}setPath(e){this.path=e;return this}setResourcePath(e){this.resourcePath=e;return this}setRequestHeader(e){this.requestHeader=e;return this}}Uo.DEFAULT_MATERIAL_NAME="__DEFAULT";class Yg extends Uo{constructor(e){super(e)}load(e,t,n,r){if(this.path!==void 0)e=this.path+e;e=this.manager.resolveURL(e);const s=this;const o=Tc.get(e);if(o!==void 0){s.manager.itemStart(e);setTimeout(function(){if(t)t(o);s.manager.itemEnd(e)},0);return o}const a=gr("img");function l(){u();Tc.add(e,this);if(t)t(this);s.manager.itemEnd(e)}function c(h){u();if(r)r(h);s.manager.itemError(e);s.manager.itemEnd(e)}function u(){a.removeEventListener("load",l,false);a.removeEventListener("error",c,false)}a.addEventListener("load",l,false);a.addEventListener("error",c,false);if(e.slice(0,5)!=="data:"){if(this.crossOrigin!==void 0)a.crossOrigin=this.crossOrigin}s.manager.itemStart(e);a.src=e;return a}}class Ac extends Uo{constructor(e){super(e)}load(e,t,n,r){const s=new yt;const o=new Yg(this.manager);o.setCrossOrigin(this.crossOrigin);o.setPath(this.path);o.load(e,function(a){s.image=a;s.needsUpdate=true;if(t!==void 0){t(s)}},n,r);return s}}class Wu extends mt{constructor(e,t=1){super();this.isLight=true;this.type="Light";this.color=new Ve(e);this.intensity=t}dispose(){}copy(e,t){super.copy(e,t);this.color.copy(e.color);this.intensity=e.intensity;return this}toJSON(e){const t=super.toJSON(e);t.object.color=this.color.getHex();t.object.intensity=this.intensity;if(this.groundColor!==void 0)t.object.groundColor=this.groundColor.getHex();if(this.distance!==void 0)t.object.distance=this.distance;if(this.angle!==void 0)t.object.angle=this.angle;if(this.decay!==void 0)t.object.decay=this.decay;if(this.penumbra!==void 0)t.object.penumbra=this.penumbra;if(this.shadow!==void 0)t.object.shadow=this.shadow.toJSON();return t}}const Va=new nt;const bc=new L;const Cc=new L;class $g{constructor(e){this.camera=e;this.bias=0;this.normalBias=0;this.radius=1;this.blurSamples=8;this.mapSize=new Pe(512,512);this.map=null;this.mapPass=null;this.matrix=new nt;this.autoUpdate=true;this.needsUpdate=false;this._frustum=new wo;this._frameExtents=new Pe(1,1);this._viewportCount=1;this._viewports=[new dt(0,0,1,1)]}getViewportCount(){return this._viewportCount}getFrustum(){return this._frustum}updateMatrices(e){const t=this.camera;const n=this.matrix;bc.setFromMatrixPosition(e.matrixWorld);t.position.copy(bc);Cc.setFromMatrixPosition(e.target.matrixWorld);t.lookAt(Cc);t.updateMatrixWorld();Va.multiplyMatrices(t.projectionMatrix,t.matrixWorldInverse);this._frustum.setFromProjectionMatrix(Va);n.set(.5,0,0,.5,0,.5,0,.5,0,0,.5,.5,0,0,0,1);n.multiply(Va)}getViewport(e){return this._viewports[e]}getFrameExtents(){return this._frameExtents}dispose(){if(this.map){this.map.dispose()}if(this.mapPass){this.mapPass.dispose()}}copy(e){this.camera=e.camera.clone();this.bias=e.bias;this.radius=e.radius;this.mapSize.copy(e.mapSize);return this}clone(){return new this.constructor().copy(this)}toJSON(){const e={};if(this.bias!==0)e.bias=this.bias;if(this.normalBias!==0)e.normalBias=this.normalBias;if(this.radius!==1)e.radius=this.radius;if(this.mapSize.x!==512||this.mapSize.y!==512)e.mapSize=this.mapSize.toArray();e.camera=this.camera.toJSON(false).object;delete e.camera.matrix;return e}}class Kg extends $g{constructor(){super(new Ro(-5,5,5,-5,.5,500));this.isDirectionalLightShadow=true}}class Zg extends Wu{constructor(e,t){super(e,t);this.isDirectionalLight=true;this.type="DirectionalLight";this.position.copy(mt.DEFAULT_UP);this.updateMatrix();this.target=new mt;this.shadow=new Kg}dispose(){this.shadow.dispose()}copy(e){super.copy(e);this.target=e.target.clone();this.shadow=e.shadow.clone();return this}}class Jg extends Wu{constructor(e,t){super(e,t);this.isAmbientLight=true;this.type="AmbientLight"}}class Qg{constructor(e=true){this.autoStart=e;this.startTime=0;this.oldTime=0;this.elapsedTime=0;this.running=false}start(){this.startTime=wc();this.oldTime=this.startTime;this.elapsedTime=0;this.running=true}stop(){this.getElapsedTime();this.running=false;this.autoStart=false}getElapsedTime(){this.getDelta();return this.elapsedTime}getDelta(){let e=0;if(this.autoStart&&!this.running){this.start();return 0}if(this.running){const t=wc();e=(t-this.oldTime)/1e3;this.oldTime=t;this.elapsedTime+=e}return e}}function wc(){return(typeof performance==="undefined"?Date:performance).now()}class ev extends Vu{constructor(e=10,t=10,n=4473924,r=8947848){n=new Ve(n);r=new Ve(r);const s=t/2;const o=e/t;const a=e/2;const l=[],c=[];for(let p=0,m=0,g=-a;p<=t;p++,g+=o){l.push(-a,0,g,a,0,g);l.push(g,0,-a,g,0,a);const S=p===s?n:r;S.toArray(c,m);m+=3;S.toArray(c,m);m+=3;S.toArray(c,m);m+=3;S.toArray(c,m);m+=3}const u=new Ut;u.setAttribute("position",new Tt(l,3));u.setAttribute("color",new Tt(c,3));const h=new Vr({vertexColors:true,toneMapped:false});super(u,h);this.type="GridHelper"}dispose(){this.geometry.dispose();this.material.dispose()}}class tv extends Vu{constructor(e=1){const t=[0,0,0,e,0,0,0,0,0,0,e,0,0,0,0,0,0,e];const n=[1,0,0,1,.6,0,0,1,0,.6,1,0,0,0,1,0,.6,1];const r=new Ut;r.setAttribute("position",new Tt(t,3));r.setAttribute("color",new Tt(n,3));const s=new Vr({vertexColors:true,toneMapped:false});super(r,s);this.type="AxesHelper"}setColors(e,t,n){const r=new Ve;const s=this.geometry.attributes.color.array;r.set(e);r.toArray(s,0);r.toArray(s,3);r.set(t);r.toArray(s,6);r.toArray(s,9);r.set(n);r.toArray(s,12);r.toArray(s,15);this.geometry.attributes.color.needsUpdate=true;return this}dispose(){this.geometry.dispose();this.material.dispose()}}if(typeof __THREE_DEVTOOLS__!=="undefined"){__THREE_DEVTOOLS__.dispatchEvent(new CustomEvent("register",{detail:{revision:To}}))}if(typeof window!=="undefined"){if(window.__THREE__){console.warn("WARNING: Multiple instances of Three.js being imported.")}else{window.__THREE__=To}}class rr{constructor(){this.isPass=true;this.enabled=true;this.needsSwap=true;this.clear=false;this.renderToScreen=false}setSize(){}render(){console.error("THREE.Pass: .render() must be implemented in derived pass.")}dispose(){}}const nv=new Ro(-1,1,1,-1,0,1);class iv extends Ut{constructor(){super();this.setAttribute("position",new Tt([-1,3,0,-1,-1,0,3,-1,0],3));this.setAttribute("uv",new Tt([0,2,0,0,2,0],2))}}const rv=new iv;class No{constructor(e){this._mesh=new qt(rv,e)}dispose(){this._mesh.geometry.dispose()}render(e){e.render(this._mesh,nv)}get material(){return this._mesh.material}set material(e){this._mesh.material=e}}const Rc={name:"ConvolutionShader",defines:{"KERNEL_SIZE_FLOAT":"25.0","KERNEL_SIZE_INT":"25"},uniforms:{"tDiffuse":{value:null},"uImageIncrement":{value:new Pe(.001953125,0)},"cKernel":{value:[]}},vertexShader:`

		uniform vec2 uImageIncrement;

		varying vec2 vUv;

		void main() {

			vUv = uv - ( ( KERNEL_SIZE_FLOAT - 1.0 ) / 2.0 ) * uImageIncrement;
			gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );

		}`,fragmentShader:`

		uniform float cKernel[ KERNEL_SIZE_INT ];

		uniform sampler2D tDiffuse;
		uniform vec2 uImageIncrement;

		varying vec2 vUv;

		void main() {

			vec2 imageCoord = vUv;
			vec4 sum = vec4( 0.0, 0.0, 0.0, 0.0 );

			for( int i = 0; i < KERNEL_SIZE_INT; i ++ ) {

				sum += texture2D( tDiffuse, imageCoord ) * cKernel[ i ];
				imageCoord += uImageIncrement;

			}

			gl_FragColor = sum;

		}`,buildKernel:function(i){const e=25;let t=2*Math.ceil(i*3)+1;if(t>e)t=e;const n=(t-1)*.5;const r=new Array(t);let s=0;for(let o=0;o<t;++o){r[o]=sv(o-n,i);s+=r[o]}for(let o=0;o<t;++o)r[o]/=s;return r}};function sv(i,e){return Math.exp(-(i*i)/(2*e*e))}class li extends rr{constructor(e=1,t=25,n=4){super();this.renderTargetX=new tn(1,1,{type:Bn});this.renderTargetX.texture.name="BloomPass.x";this.renderTargetY=new tn(1,1,{type:Bn});this.renderTargetY.texture.name="BloomPass.y";this.combineUniforms=vr.clone(xs.uniforms);this.combineUniforms["strength"].value=e;this.materialCombine=new Dt({name:xs.name,uniforms:this.combineUniforms,vertexShader:xs.vertexShader,fragmentShader:xs.fragmentShader,blending:Qa,transparent:true});const r=Rc;this.convolutionUniforms=vr.clone(r.uniforms);this.convolutionUniforms["uImageIncrement"].value=li.blurX;this.convolutionUniforms["cKernel"].value=Rc.buildKernel(n);this.materialConvolution=new Dt({name:r.name,uniforms:this.convolutionUniforms,vertexShader:r.vertexShader,fragmentShader:r.fragmentShader,defines:{"KERNEL_SIZE_FLOAT":t.toFixed(1),"KERNEL_SIZE_INT":t.toFixed(0)}});this.needsSwap=false;this.fsQuad=new No(null)}render(e,t,n,r,s){if(s)e.state.buffers.stencil.setTest(false);this.fsQuad.material=this.materialConvolution;this.convolutionUniforms["tDiffuse"].value=n.texture;this.convolutionUniforms["uImageIncrement"].value=li.blurX;e.setRenderTarget(this.renderTargetX);e.clear();this.fsQuad.render(e);this.convolutionUniforms["tDiffuse"].value=this.renderTargetX.texture;this.convolutionUniforms["uImageIncrement"].value=li.blurY;e.setRenderTarget(this.renderTargetY);e.clear();this.fsQuad.render(e);this.fsQuad.material=this.materialCombine;this.combineUniforms["tDiffuse"].value=this.renderTargetY.texture;if(s)e.state.buffers.stencil.setTest(true);e.setRenderTarget(n);if(this.clear)e.clear();this.fsQuad.render(e)}setSize(e,t){this.renderTargetX.setSize(e,t);this.renderTargetY.setSize(e,t)}dispose(){this.renderTargetX.dispose();this.renderTargetY.dispose();this.materialCombine.dispose();this.materialConvolution.dispose();this.fsQuad.dispose()}}const xs={name:"CombineShader",uniforms:{"tDiffuse":{value:null},"strength":{value:1}},vertexShader:`

		varying vec2 vUv;

		void main() {

			vUv = uv;
			gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );

		}`,fragmentShader:`

		uniform float strength;

		uniform sampler2D tDiffuse;

		varying vec2 vUv;

		void main() {

			vec4 texel = texture2D( tDiffuse, vUv );
			gl_FragColor = strength * texel;

		}`};li.blurX=new Pe(.001953125,0);li.blurY=new Pe(0,.001953125);const av={name:"DotScreenShader",uniforms:{"tDiffuse":{value:null},"tSize":{value:new Pe(256,256)},"center":{value:new Pe(.5,.5)},"angle":{value:1.57},"scale":{value:1}},vertexShader:`

		varying vec2 vUv;

		void main() {

			vUv = uv;
			gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );

		}`,fragmentShader:`

		uniform vec2 center;
		uniform float angle;
		uniform float scale;
		uniform vec2 tSize;

		uniform sampler2D tDiffuse;

		varying vec2 vUv;

		float pattern() {

			float s = sin( angle ), c = cos( angle );

			vec2 tex = vUv * tSize - center;
			vec2 point = vec2( c * tex.x - s * tex.y, s * tex.x + c * tex.y ) * scale;

			return ( sin( point.x ) * sin( point.y ) ) * 4.0;

		}

		void main() {

			vec4 color = texture2D( tDiffuse, vUv );

			float average = ( color.r + color.g + color.b ) / 3.0;

			gl_FragColor = vec4( vec3( average * 10.0 - 5.0 + pattern() ), color.a );

		}`};const ov={name:"CopyShader",uniforms:{"tDiffuse":{value:null},"opacity":{value:1}},vertexShader:`

		varying vec2 vUv;

		void main() {

			vUv = uv;
			gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );

		}`,fragmentShader:`

		uniform float opacity;

		uniform sampler2D tDiffuse;

		varying vec2 vUv;

		void main() {

			vec4 texel = texture2D( tDiffuse, vUv );
			gl_FragColor = opacity * texel;


		}`};class Ks extends rr{constructor(e,t){super();this.textureID=t!==void 0?t:"tDiffuse";if(e instanceof Dt){this.uniforms=e.uniforms;this.material=e}else if(e){this.uniforms=vr.clone(e.uniforms);this.material=new Dt({name:e.name!==void 0?e.name:"unspecified",defines:Object.assign({},e.defines),uniforms:this.uniforms,vertexShader:e.vertexShader,fragmentShader:e.fragmentShader})}this.fsQuad=new No(this.material)}render(e,t,n){if(this.uniforms[this.textureID]){this.uniforms[this.textureID].value=n.texture}this.fsQuad.material=this.material;if(this.renderToScreen){e.setRenderTarget(null);this.fsQuad.render(e)}else{e.setRenderTarget(t);if(this.clear)e.clear(e.autoClearColor,e.autoClearDepth,e.autoClearStencil);this.fsQuad.render(e)}}dispose(){this.material.dispose();this.fsQuad.dispose()}}class Lc extends rr{constructor(e,t){super();this.scene=e;this.camera=t;this.clear=true;this.needsSwap=false;this.inverse=false}render(e,t,n){const r=e.getContext();const s=e.state;s.buffers.color.setMask(false);s.buffers.depth.setMask(false);s.buffers.color.setLocked(true);s.buffers.depth.setLocked(true);let o,a;if(this.inverse){o=0;a=1}else{o=1;a=0}s.buffers.stencil.setTest(true);s.buffers.stencil.setOp(r.REPLACE,r.REPLACE,r.REPLACE);s.buffers.stencil.setFunc(r.ALWAYS,o,4294967295);s.buffers.stencil.setClear(a);s.buffers.stencil.setLocked(true);e.setRenderTarget(n);if(this.clear)e.clear();e.render(this.scene,this.camera);e.setRenderTarget(t);if(this.clear)e.clear();e.render(this.scene,this.camera);s.buffers.color.setLocked(false);s.buffers.depth.setLocked(false);s.buffers.color.setMask(true);s.buffers.depth.setMask(true);s.buffers.stencil.setLocked(false);s.buffers.stencil.setFunc(r.EQUAL,1,4294967295);s.buffers.stencil.setOp(r.KEEP,r.KEEP,r.KEEP);s.buffers.stencil.setLocked(true)}}class lv extends rr{constructor(){super();this.needsSwap=false}render(e){e.state.buffers.stencil.setLocked(false);e.state.buffers.stencil.setTest(false)}}class cv{constructor(e,t){this.renderer=e;this._pixelRatio=e.getPixelRatio();if(t===void 0){const n=e.getSize(new Pe);this._width=n.width;this._height=n.height;t=new tn(this._width*this._pixelRatio,this._height*this._pixelRatio,{type:Bn});t.texture.name="EffectComposer.rt1"}else{this._width=t.width;this._height=t.height}this.renderTarget1=t;this.renderTarget2=t.clone();this.renderTarget2.texture.name="EffectComposer.rt2";this.writeBuffer=this.renderTarget1;this.readBuffer=this.renderTarget2;this.renderToScreen=true;this.passes=[];this.copyPass=new Ks(ov);this.copyPass.material.blending=Sn;this.clock=new Qg}swapBuffers(){const e=this.readBuffer;this.readBuffer=this.writeBuffer;this.writeBuffer=e}addPass(e){this.passes.push(e);e.setSize(this._width*this._pixelRatio,this._height*this._pixelRatio)}insertPass(e,t){this.passes.splice(t,0,e);e.setSize(this._width*this._pixelRatio,this._height*this._pixelRatio)}removePass(e){const t=this.passes.indexOf(e);if(t!==-1){this.passes.splice(t,1)}}isLastEnabledPass(e){for(let t=e+1;t<this.passes.length;t++){if(this.passes[t].enabled){return false}}return true}render(e){if(e===void 0){e=this.clock.getDelta()}const t=this.renderer.getRenderTarget();let n=false;for(let r=0,s=this.passes.length;r<s;r++){const o=this.passes[r];if(o.enabled===false)continue;o.renderToScreen=this.renderToScreen&&this.isLastEnabledPass(r);o.render(this.renderer,this.writeBuffer,this.readBuffer,e,n);if(o.needsSwap){if(n){const a=this.renderer.getContext();const l=this.renderer.state.buffers.stencil;l.setFunc(a.NOTEQUAL,1,4294967295);this.copyPass.render(this.renderer,this.writeBuffer,this.readBuffer,e);l.setFunc(a.EQUAL,1,4294967295)}this.swapBuffers()}if(Lc!==void 0){if(o instanceof Lc){n=true}else if(o instanceof lv){n=false}}}this.renderer.setRenderTarget(t)}reset(e){if(e===void 0){const t=this.renderer.getSize(new Pe);this._pixelRatio=this.renderer.getPixelRatio();this._width=t.width;this._height=t.height;e=this.renderTarget1.clone();e.setSize(this._width*this._pixelRatio,this._height*this._pixelRatio)}this.renderTarget1.dispose();this.renderTarget2.dispose();this.renderTarget1=e;this.renderTarget2=e.clone();this.writeBuffer=this.renderTarget1;this.readBuffer=this.renderTarget2}setSize(e,t){this._width=e;this._height=t;const n=this._width*this._pixelRatio;const r=this._height*this._pixelRatio;this.renderTarget1.setSize(n,r);this.renderTarget2.setSize(n,r);for(let s=0;s<this.passes.length;s++){this.passes[s].setSize(n,r)}}setPixelRatio(e){this._pixelRatio=e;this.setSize(this._width,this._height)}dispose(){this.renderTarget1.dispose();this.renderTarget2.dispose();this.copyPass.dispose()}}const uv={name:"OutputShader",uniforms:{"tDiffuse":{value:null},"toneMappingExposure":{value:1}},vertexShader:`
		precision highp float;

		uniform mat4 modelViewMatrix;
		uniform mat4 projectionMatrix;

		attribute vec3 position;
		attribute vec2 uv;

		varying vec2 vUv;

		void main() {

			vUv = uv;
			gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );

		}`,fragmentShader:`
	
		precision highp float;

		uniform sampler2D tDiffuse;

		#include <tonemapping_pars_fragment>
		#include <colorspace_pars_fragment>

		varying vec2 vUv;

		void main() {

			gl_FragColor = texture2D( tDiffuse, vUv );

			// tone mapping

			#ifdef LINEAR_TONE_MAPPING

				gl_FragColor.rgb = LinearToneMapping( gl_FragColor.rgb );

			#elif defined( REINHARD_TONE_MAPPING )

				gl_FragColor.rgb = ReinhardToneMapping( gl_FragColor.rgb );

			#elif defined( CINEON_TONE_MAPPING )

				gl_FragColor.rgb = OptimizedCineonToneMapping( gl_FragColor.rgb );

			#elif defined( ACES_FILMIC_TONE_MAPPING )

				gl_FragColor.rgb = ACESFilmicToneMapping( gl_FragColor.rgb );

			#elif defined( AGX_TONE_MAPPING )

				gl_FragColor.rgb = AgXToneMapping( gl_FragColor.rgb );

			#elif defined( NEUTRAL_TONE_MAPPING )

				gl_FragColor.rgb = NeutralToneMapping( gl_FragColor.rgb );

			#endif

			// color space

			#ifdef SRGB_TRANSFER

				gl_FragColor = sRGBTransferOETF( gl_FragColor );

			#endif

		}`};class hv extends rr{constructor(){super();const e=uv;this.uniforms=vr.clone(e.uniforms);this.material=new Wg({name:e.name,uniforms:this.uniforms,vertexShader:e.vertexShader,fragmentShader:e.fragmentShader});this.fsQuad=new No(this.material);this._outputColorSpace=null;this._toneMapping=null}render(e,t,n){this.uniforms["tDiffuse"].value=n.texture;this.uniforms["toneMappingExposure"].value=e.toneMappingExposure;if(this._outputColorSpace!==e.outputColorSpace||this._toneMapping!==e.toneMapping){this._outputColorSpace=e.outputColorSpace;this._toneMapping=e.toneMapping;this.material.defines={};if($e.getTransfer(this._outputColorSpace)===Je)this.material.defines.SRGB_TRANSFER="";if(this._toneMapping===su)this.material.defines.LINEAR_TONE_MAPPING="";else if(this._toneMapping===au)this.material.defines.REINHARD_TONE_MAPPING="";else if(this._toneMapping===ou)this.material.defines.CINEON_TONE_MAPPING="";else if(this._toneMapping===lu)this.material.defines.ACES_FILMIC_TONE_MAPPING="";else if(this._toneMapping===cu)this.material.defines.AGX_TONE_MAPPING="";else if(this._toneMapping===uu)this.material.defines.NEUTRAL_TONE_MAPPING="";this.material.needsUpdate=true}if(this.renderToScreen===true){e.setRenderTarget(null);this.fsQuad.render(e)}else{e.setRenderTarget(t);if(this.clear)e.clear(e.autoClearColor,e.autoClearDepth,e.autoClearStencil);this.fsQuad.render(e)}}dispose(){this.material.dispose();this.fsQuad.dispose()}}class dv extends rr{constructor(e,t,n=null,r=null,s=null){super();this.scene=e;this.camera=t;this.overrideMaterial=n;this.clearColor=r;this.clearAlpha=s;this.clear=true;this.clearDepth=false;this.needsSwap=false;this._oldClearColor=new Ve}render(e,t,n){const r=e.autoClear;e.autoClear=false;let s,o;if(this.overrideMaterial!==null){o=this.scene.overrideMaterial;this.scene.overrideMaterial=this.overrideMaterial}if(this.clearColor!==null){e.getClearColor(this._oldClearColor);e.setClearColor(this.clearColor)}if(this.clearAlpha!==null){s=e.getClearAlpha();e.setClearAlpha(this.clearAlpha)}if(this.clearDepth==true){e.clearDepth()}e.setRenderTarget(this.renderToScreen?null:n);if(this.clear===true){e.clear(e.autoClearColor,e.autoClearDepth,e.autoClearStencil)}e.render(this.scene,this.camera);if(this.clearColor!==null){e.setClearColor(this._oldClearColor)}if(this.clearAlpha!==null){e.setClearAlpha(s)}if(this.overrideMaterial!==null){this.scene.overrideMaterial=o}e.autoClear=r}}const fv={name:"RGBShiftShader",uniforms:{"tDiffuse":{value:null},"amount":{value:.005},"angle":{value:0}},vertexShader:`

		varying vec2 vUv;

		void main() {

			vUv = uv;
			gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );

		}`,fragmentShader:`

		uniform sampler2D tDiffuse;
		uniform float amount;
		uniform float angle;

		varying vec2 vUv;

		void main() {

			vec2 offset = amount * vec2( cos(angle), sin(angle));
			vec4 cr = texture2D(tDiffuse, vUv + offset);
			vec4 cga = texture2D(tDiffuse, vUv);
			vec4 cb = texture2D(tDiffuse, vUv - offset);
			gl_FragColor = vec4(cr.r, cga.g, cb.b, cga.a);

		}`};const kr=new Hu({antialias:true});kr.setPixelRatio(window.devicePixelRatio);kr.setSize(window.innerWidth,window.innerHeight);const In=new zt(50,window.innerWidth/window.innerHeight,.1,1e3);In.position.set(16,16,16);const pv=new Hr(16,16,16,16);const mv=new Xg({color:ys("--three-color-mesh"),emissive:ys("--three-color-mesh-emissive"),emissiveIntensity:1,displacementScale:3,transparent:true,opacity:1,side:Jt,alphaTest:0,depthTest:true,depthWrite:true});const Io=new qt(pv,mv);Io.position.set(0,0,-1.5);Io.name="mesh";const Xu=new ku([new L(2,5,.8),new L(-1,3,1.2),new L(1,-2,.9),new L(5,-3,4)]);const _v=Xu.getPoints(50);const gv=new Ut().setFromPoints(_v);const vv=new Vr({color:"red"});const Fo=new Po(gv,vv);const qu=new ku([new L(-12,-2,2),new L(-6,0,-2),new L(-5,-4,-2),new L(2,-10,2)]);const xv=qu.getPoints(50);const Sv=new Ut().setFromPoints(xv);const Mv=new Vr({color:"blue"});const Oo=new Po(Sv,Mv);const Ev=new Zg(16777215,.8);Ev.position.set(4,4,4);new Jg(ys("--three-color-ambientLight"),1);const jt=new Vg;jt.background=new Ve(ys("--three-color-background"));const Bo=new ev(64,16);const Zs=new tv(4);Zs.setColors("lime","aquamarine","LightCoral");jt.add(Io);Fo.name="path";jt.add(Fo);Fo.visible=false;Oo.visible=false;Bo.visible=false;Zs.visible=false;Oo.name="lookatPath";jt.add(Oo);jt.add(In);In.position.set(0,0,0);Bo.name="grid";jt.add(Bo);Zs.name="axes";jt.add(Zs);const yv=new Ks({name:"myShader",uniforms:{"tDiffuse":{value:null},"opacity":{value:1}},vertexShader:`

		varying vec2 vUv;

		void main() {
			vUv = uv;
			gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );

		}`,fragmentShader:`

		uniform float opacity;

		uniform sampler2D tDiffuse;

		varying vec2 vUv;

		void main() {
            vec4 lol = vec4(1, 0, 0, 1);
			vec4 texel = texture2D( tDiffuse, vUv );
			gl_FragColor = opacity * vec4(texel * 3.);


		}`});const zn=new cv(kr);const ju=new Ks(av);ju.uniforms["scale"].value=3;const Tv=new li(25,4,9,256);const Yu=new Ks(fv);Yu.uniforms["amount"].value=.0015;zn.addPass(new dv(jt,In));zn.addPass(ju);zn.addPass(Yu);zn.addPass(Tv);zn.addPass(yv);zn.addPass(new hv);function Pc(i){return-(Math.cos(Math.PI*i)-1)/2}function Av(i,e,t=1e4){let n=null;let r=null;function s(o){if(i.loaderNeedsUpdate===false)return;n=n??o;const a=o-n;const l=Math.min(a/t,1);const c=a/t*10%1;if(r!==o){e.style.setProperty("--loadspinAngle",`${Pc(c)*360}deg`);e.style.setProperty("--loadspinAngle2",`${Pc(c)*360}deg`);e.style.setProperty("--loadspinAngleOffset",`${l*360}deg`);r=o;window.requestAnimationFrame(s)}if(l>=1){n=null;r=null;n=o}}return()=>window.requestAnimationFrame(s)}function bv(i=.92){let e=0;return(t=0,n=i)=>{const r=t*(1-n)+e*n;e=r;return r}}const Cv=bv();const wv=(i,e,t)=>()=>{if(i.progressNeedsUpdate===false)return;requestAnimationFrame(i.animateProgress);e.style.setProperty("--multiplayerProgress",`${Cv(t())*100}%`)};function Rv(i){return Math.min(1,1.001-Math.pow(2,-10*i))}const Lv=(i,e,t)=>{if(typeof i==="number"){return(1-t)*i+t*e}else if(Array.isArray(e)){const n=[];for(let r=0;r<e.length;r++){n.push((1-t)*i[r]+t*e[r])}return n}};var ri,mn,si,Dr,ki,Wi,fo,Ur,Nr,Ir,uo;class Pv{constructor({durationms:e=2e3,cb:t=()=>{},easing:n=Rv}={}){xe(this,Ir);xe(this,ri,null);xe(this,mn,null);xe(this,si,null);xe(this,Dr,null);xe(this,ki,null);xe(this,Wi,null);xe(this,fo,null);xe(this,Ur,null);xe(this,Nr,null);Ce(this,Ur,e);Ce(this,Dr,t);Ce(this,Nr,n)}from(e){Ce(this,ki,e)}to(e){Ce(this,Wi,e);window.cancelAnimationFrame(ie(this,ri));Ce(this,ri,null);Ce(this,mn,null);Ce(this,si,null);Ce(this,ri,window.requestAnimationFrame(it(this,Ir,uo).bind(this)))}}ri=new WeakMap;mn=new WeakMap;si=new WeakMap;Dr=new WeakMap;ki=new WeakMap;Wi=new WeakMap;fo=new WeakMap;Ur=new WeakMap;Nr=new WeakMap;Ir=new WeakSet;uo=function(e){Ce(this,mn,ie(this,mn)??e);const t=e-ie(this,mn);const n=Math.min(t/ie(this,Ur),1);if(ie(this,si)!==e){ie(this,Dr).call(this,Lv(ie(this,ki),ie(this,Wi),ie(this,Nr).call(this,n)));Ce(this,si,e)}if(n>=1){Ce(this,mn,null);Ce(this,si,null);Ce(this,mn,e);Ce(this,ki,ie(this,Wi));return}Ce(this,ri,window.requestAnimationFrame(it(this,Ir,uo).bind(this)))};var Xi,qi,Bt,ji,Yi;class Dv{constructor(e){xe(this,Xi,null);xe(this,qi,[]);xe(this,Bt,[]);xe(this,ji,0);xe(this,Yi,null);Ce(this,Xi,e??console.error("provide a camera to CameraLoc constructor"));Ce(this,Yi,new Pv({durationms:3e3,cb:t=>{Ce(this,Bt,t);this.update()}}))}addCurve(e,t){ie(this,qi).push({get:n=>{const r=e.getPointAt(n);const s=t.getPointAt(n);return[[r.x,r.y,r.z],[s.x,s.y,s.z]]}});ie(this,Bt).push(0)}addPos(e,t){ie(this,qi).push({get:n=>{return[e,t]}});ie(this,Bt).push(0)}update(){const e=[0,0,0];const t=[0,0,0];ie(this,qi).forEach((n,r)=>{const s=n.get(ie(this,ji))[0].map(a=>a*ie(this,Bt)[r]);e[0]+=s[0];e[1]+=s[1];e[2]+=s[2];const o=n.get(ie(this,ji))[1].map(a=>a*ie(this,Bt)[r]);t[0]+=o[0];t[1]+=o[1];t[2]+=o[2]});ie(this,Xi).position.set(e[0],e[1],e[2]);ie(this,Xi).lookAt(t[0],t[1],t[2])}setScroll(e){Ce(this,ji,e<0?0:e>1?1:e);this.update()}setPage(e){ie(this,Yi).from(ie(this,Bt));ie(this,Yi).to(ie(this,Bt).map((t,n)=>n===e?1:0))}initPage(e){Ce(this,Bt,ie(this,Bt).map((t,n)=>n===e?1:0))}}Xi=new WeakMap;qi=new WeakMap;Bt=new WeakMap;ji=new WeakMap;Yi=new WeakMap;let kt;let Ci;let Ln;let bt;let $u;let ti;const ci=new Dv(In);ci.addCurve(Xu,qu);ci.addPos([2,-1,3],[1,0,-1]);ci.addPos([2,0,2],[1,0,-1]);const Uv=()=>we.fk.atmos.forEach((i,e)=>bt.setWindow(e,i.win));async function Nv(){[kt,Ci]=await Lh();Ln=new Dh(kt,{playerOptions:{fadems:1800,loop:false}});const i=we.projects.map(e=>e.audio);bt=new _r(kt,{defaultSourceOptions:{speedlimms:1e3,slidems:4e3,threshPosition:_r.threshPosition.center,windowFade:.4}});$u=new Cs({ctx:kt,param:bt.node.parameters.get("gain"),range:[0,1],initialValue:0,speedlimms:20,slidems:4e3});ti=new Ja(kt);Ci.create.gain01("masterGain");Ln.node.connect(Ci.masterGain);bt.node.connect(Ci.masterGain);ti.node.connect(Ci.masterGain);Ci.masterGain.connect(kt.destination);return Promise.all([Ln.loadSources(i.filter(e=>e!=="")),bt.loadAudioSources(we.fk.atmos.map(e=>e.src)),ti.loadSources(we.fk.os.map(e=>e.src))])}function Iv(){function i(t){return new Promise(n=>{jt.getObjectByName("mesh").material.alphaMap=new Ac().load("./textures/alpha.jpg",n)})}function e(t){return new Promise(n=>{jt.getObjectByName("mesh").material.displacementMap=new Ac().load("./textures/displacement-soft-clouds.jpg",n)})}return[i(),e()]}const Wr=function i(){i.loaded=false;i.nextView="/";i.loadNextView=function(){i.loaded=true;i.route(i.nextView);i.nextView="/"};i.lenis=null;i.lenisResize=null;i.render3d=function(){zn.render(jt,In)};i.animate=function(n){i.lenis&&i.lenis.raf(n);i.render3d();requestAnimationFrame(i.animate)};i.progressNeedsUpdate=false;i.loaderNeedsUpdate=false;i.animateLoader=Av(i,Wc);i.animateProgress=wv(i,Kc,()=>Ln.getPosition());i.renderNewScroll=function(n){if(i.lenis){window.removeEventListener("resize",i.lenisResize,false);i.lenis.stop();i.lenis.destroy();i.lenis=null}i.lenis=new Lenis;i.lenisResize=()=>{i.lenis.resize();if(n.data.scroll3d===true){ci.setScroll(i.lenis.progress);bt==null?void 0:bt.updatePosition(i.lenis.progress)}};window.addEventListener("resize",i.lenisResize);i.lenis.on("scroll",r=>{if(n.data.scroll3d===true){ci.setScroll(i.lenis.progress);bt==null?void 0:bt.updatePosition(i.lenis.progress)}})};i.update=(n,r)=>{try{if(!i.updates.get(n))console.warn(`No update function corresponding to App.updates.get(${n})(${r})`);else i.updates.get(n)(r)}catch(s){console.error(`App.updates.get(${n})(${r}) : ${s}`)}};i.render=(()=>{let n={};return r=>{const s=r??{};const o=Object.keys(s).filter(a=>a!=="data"&&s[a]!==void 0&&n[a]!==s[a]);rh([...document.querySelectorAll("section"),xn]);o.map(a=>i.update(a,s[a]));n=s;ih();i.renderNewScroll(r);if(o.length===0){return false}return true}})();i.route=n=>{if(n!=="/"&&i.loaded===false){i.nextView=n;i.route("/");return}if(n==="/"&&i.loaded===true){i.route("/fk");return}const r=i.views.get(n);const s=window.location.origin+n;if(n!=="/")history.pushState(r,"",s);i.render(r);window.scrollY===0?window.dispatchEvent(new Event("scroll")):window.scrollTo(0,0)};i.views=new Map([["/",{meta:{title:"hello",description:we.fk.meta.description},docTitle:"~~ François Kerforn",loading:true,loadingSection:true,fkSection:false,projectsSection:false,displayArrows:false,project:-1,displayCarousel:false,multiplayer:-1,projectLinksGrid:false,footer:false,nav:false,three:false,data:{scroll3d:false},progress:false,heroContent:false}],["/fk",{meta:{title:we.fk.meta.title,description:we.fk.meta.description},docTitle:we.fk.meta.title,loading:false,loadingSection:false,fkSection:true,projectsSection:false,displayArrows:false,project:-1,displayCarousel:false,multiplayer:-1,projectLinksGrid:false,footer:true,nav:true,three:true,data:{scroll3d:true},progress:false,heroContent:true,cameraLoc:0,atmos1Gain:1}],["/projects",{meta:{title:we.projectsList.meta.title,description:we.projectsList.meta.description},loading:false,loadingSection:false,fkSection:false,projectsSection:true,docTitle:we.projectsList.meta.title,displayArrows:false,project:-1,displayCarousel:false,multiplayer:-1,projectLinksGrid:true,footer:false,nav:true,three:true,data:{scroll3d:false},progress:false,heroContent:false,cameraLoc:1,atmos1Gain:0}],...we.projects.map((n,r)=>{return[n.href,{meta:{title:`${n.name} | François Kerforn`,description:n.meta.description},docTitle:`${n.name} | François Kerforn`,loading:false,loadingSection:false,fkSection:false,projectsSection:false,displayArrows:true,project:r,displayCarousel:true,multiplayer:Uh[r],projectLinksGrid:false,footer:false,nav:true,three:true,data:{scroll3d:false},progress:true,heroContent:false,cameraLoc:2,atmos1Gain:0}]})]);i.updates=new Map([["loading",async n=>{if(!n)return;Promise.all([Nv(),...Iv(),ah(850)]).catch(r=>console.error("Error while loading audio/textures > ",r)).finally(()=>{i.loadNextView();Uv();bt==null?void 0:bt.updatePosition(i.lenis.progress);Array.from([pr,mr,...document.getElementsByClassName("projectContentLinks")]).forEach(r=>r.onmouseenter=()=>ti.play(0));Xa.forEach(r=>r.onmouseenter=()=>ti.play(1));Yc.forEach(r=>r.onmouseenter=()=>ti.play(0));Array.from(document.getElementsByClassName("homeLink")).forEach(r=>r.onmouseenter=()=>ti.play(0))})}],["meta",({title:n,description:r})=>{document.querySelector('meta[name="title"]').setAttribute("content",n);document.querySelector('meta[name="description"]').setAttribute("content",r)}],["docTitle",n=>document.title=n],["loadingSection",n=>{if(n){$t(document.querySelector("section.loading"),false);document.querySelector("section.loading").style.opacity=1;i.loaderNeedsUpdate=true;i.animateLoader()}else{$t(document.querySelector("section.loading"),true);document.querySelector("section.loading").style.opacity=0;i.loaderNeedsUpdate=false}}],["fkSection",n=>{if(n){$t([document.querySelector("section.fk"),document.querySelector("footer")],false);document.querySelector("section.fk").style.opacity=1}else{$t([document.querySelector("section.fk"),document.querySelector("footer")],true);document.querySelector("section.fk").style.opacity=0}}],["projectsSection",n=>{if(n)$t(document.querySelector("section.projects"),false);else $t(document.querySelector("section.projects"),true)}],["footer",n=>{n===false?xn.classList.add("hidden"):xn.classList.remove("hidden")}],["nav",n=>{n===false?$i.classList.add("hidden"):($i.classList.remove("hidden"),Ki.classList.contains("hidden")&&setTimeout(()=>Ki.classList.remove("hidden"),1500))}],["displayArrows",n=>{n===false?fr.forEach(r=>(r.style.opacity="0",r.style.pointerEvents="none")):fr.forEach(r=>(r.style.opacity="1",r.style.pointerEvents="all"))}],["project",(()=>{let n=-1;return r=>{var s,o,a,l;if(n===void 0||n===-1){if(r===void 0||r===-1){return}else{$t([document.querySelectorAll("section.project")[r]],false);dr[r].appear("appearToTop");_n[r].display(true);(s=Ri[r])==null?void 0:s.display(true);wi[r].appear("appearToTop");qa.textContent=`${r+1}/${we.projects.length}`}}else{if(r===void 0||r===-1){$t([document.querySelectorAll("section.project")[n]],true);dr[n].vanish("vanishToTop");_n[n].display(false);(o=Ri[n])==null?void 0:o.display(false);wi[n].vanish()}else{let c=r>n?"RIGHT":"LEFT";if(r===0&&n===we.projects.length-1){c="RIGHT"}if(r===we.projects.length-1&&n===0){c="LEFT"}$t(document.querySelectorAll("section.project")[r],false);$t(document.querySelectorAll("section.project")[n],true);_n[n].display(false);(a=Ri[n])==null?void 0:a.display(false);wi[n].vanish();dr[n].vanish(c==="LEFT"?"vanishToRight":"vanishToLeft");dr[r].appear(c==="LEFT"?"appearToLeft":"appearToRight");_n[r].display(true);(l=Ri[r])==null?void 0:l.display(true);wi[r].appear("appearToTop");qa.textContent=`${r+1}/${we.projects.length}`}}n=r}})()],["displayCarousel",n=>n?ja.el.classList.remove("hidden"):ja.el.classList.add("hidden")],["multiplayer",n=>{Ln==null?void 0:Ln.play(n)}],["projectLinksGrid",n=>{if(n){Ui.style.opacity="1";Ui.classList.add("fadeIn")}else{Ui.style.opacity="0"}}],["three",n=>{n?document.getElementById("three").classList.remove("hidden"):document.getElementById("three").classList.add("hidden")}],["progress",n=>{if(n){bs.classList.remove("hidden");if(Ln)i.progressNeedsUpdate=true;requestAnimationFrame(i.animateProgress)}else{bs.classList.add("hidden");i.progressNeedsUpdate=false}}],["heroContent",n=>{n?(ka.appear("appearToLeft"),Wa.appear("appearToRight")):(ka.vanish("vanishToRight"),Wa.vanish("vanishToLeft"))}],["cameraLoc",n=>{if(n==null)return;ci.setPage(n)}],["atmos1Gain",n=>{$u.update(n)}]]);[...Xa,pr,mr,Xs,...wi.map(n=>n.el),vh,xh].forEach(n=>n.onclick=()=>{const r=n.href.substring(window.location.origin.length);i.route(r);return false});[...document.querySelectorAll("section"),document.querySelector("footer")].forEach(n=>n.classList.add("disabled"));document.addEventListener("keyup",(()=>{let n=false;return r=>{if(n===true)return;n=true;const s=we.projects.length;if(r.key==="ArrowLeft"&&we.projects.map(o=>o.href).includes(window.location.pathname)){const o=history.state.project-1<0?s-1:history.state.project-1;i.route(we.projects[o].href)}if(r.key==="ArrowRight"&&we.projects.map(o=>o.href).includes(window.location.pathname)){const o=history.state.project+1>=s?0:history.state.project+1;i.route(we.projects[o].href)}setTimeout(()=>n=false,300)}})());fr.forEach((()=>{let n=false;return(r,s)=>r.addEventListener("click",()=>{if(n===true)return;n=true;const o=we.projects.length;if(s===0){const a=history.state.project-1<0?o-1:history.state.project-1;i.route(we.projects[a].href)}if(s===1){const a=history.state.project+1>=o?0:history.state.project+1;i.route(we.projects[a].href)}setTimeout(()=>n=false,300)})})());async function e(n){if(kt.state==="running"){audioSwitch.classList.remove("on");await kt.suspend();kt.state==="running"&&audioSwitch.classList.add("on")}else{audioSwitch.classList.add("on");await kt.resume();kt.state!=="running"&&audioSwitch.classList.remove("on")}}audioSwitch.addEventListener("click",e);function t(){In.aspect=window.innerWidth/window.innerHeight;In.updateProjectionMatrix();kr.setSize(window.innerWidth,window.innerHeight);zn.setSize(window.innerWidth,window.innerHeight)}window.addEventListener("resize",t)};Wr();ci.initPage(Wr.views.get(window.location.pathname).cameraLoc);window.addEventListener("popstate",i=>Wr.render(i.state));Wr.route(window.location.pathname);document.getElementById("three").appendChild(kr.domElement);requestAnimationFrame(Wr.animate);
